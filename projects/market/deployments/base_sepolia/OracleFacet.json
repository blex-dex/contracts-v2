{
  "address": "0x5532Df60a5147CdBC382a4F1AeA188feF20715f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AccessManagedInvalidAuthority",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        }
      ],
      "name": "AccessManagedRequiredDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AccessManagedUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "SafeCastOverflowedIntToUint",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "MaxCumulativeDeltaDiffExceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "PriceData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePrice",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getChainPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getFastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDefaultOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_market",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxCumulativeDeltaDiffs",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxCumulativeDeltaDiffs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_markets",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "setUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32a39b81b06eef2cd7f8caaab88e41e63ed6f6134922730dcaedb8c589da34c4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x653985cBA14eF0b751bf209fee39De78b4d21676",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2220307",
    "logsBloom": "0x
    "blockHash": "0xc7ae6f71b5fb01794bd7fd1e2178d2add231eb0099b29ebe1b6af908a5af3cd2",
    "transactionHash": "0x32a39b81b06eef2cd7f8caaab88e41e63ed6f6134922730dcaedb8c589da34c4",
    "logs": [],
    "blockNumber": 8272349,
    "cumulativeGasUsed": "2264182",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f6719ff3a2395d03b26d7bb330f0d005",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"MaxCumulativeDeltaDiffExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"PriceData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getChainPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getFastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDefaultOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_market\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxCumulativeDeltaDiffs\",\"type\":\"uint256[]\"}],\"name\":\"setMaxCumulativeDeltaDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_markets\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/OracleFacet.sol\":\"OracleFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"src/ac/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessManaged} from \\\"./LibAccessManaged.sol\\\";\\nimport {AuthorityUtils} from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\n\\nabstract contract IAccessManaged {\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    modifier restricted() {\\n        //todo\\n        // _checkCanCall(msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        //todo\\n        // require(msg.sender == address(this), \\\"AccessManaged: only self\\\");\\n        _;\\n    }\\n\\n    modifier onlySelfOrRestricted() {\\n        // todo\\n        _;\\n    }\\n\\n    function _authority() internal view returns (address) {\\n        return LibAccessManaged.Storage()._authority;\\n    }\\n\\n    function _checkCanCall(address caller, bytes calldata data) internal {\\n        LibAccessManaged.AccessManagedStorage storage $ = LibAccessManaged.Storage();\\n        (bool immediate, uint32 delay) =\\n            AuthorityUtils.canCallWithDelay(_authority(), caller, address(this), bytes4(data[0:4]));\\n        if (!immediate) {\\n            if (delay > 0) {\\n                $._consumingSchedule = true;\\n                IAccessManager(_authority()).consumeScheduledOp(caller, data);\\n                $._consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x926078f4b7e70567d14fdfcc6d09e3d7baa8abeaf0e388d52ef977d7e6526ec0\",\"license\":\"MIT\"},\"src/ac/LibAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary LibAccessManaged {\\n    struct AccessManagedStorage {\\n        address _authority;\\n        bool _consumingSchedule;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessManaged\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessManagedStorageLocation =\\n        0xf3177357ab46d8af007ab3fdb9af81da189e1068fefdc0073dca88a2cab40a00;\\n\\n    function Storage() internal pure returns (AccessManagedStorage storage fs) {\\n        bytes32 position = AccessManagedStorageLocation;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe8fc43c1b84ea9c7d025060019e7749e4fdf9c9a554df88cbf59a0469d3e3e3\",\"license\":\"BUSL-1.1\"},\"src/facets/OracleFacet.sol\":{\"content\":\"// 1. \\u5916\\u90e8\\u9884\\u8a00\\u673a\\u7684\\u4f9d\\u8d56\\n// 2. \\u5904\\u7406\\u9884\\u8a00\\u673a\\u7cbe\\u5ea6\\n// 3. \\u4ef7\\u683c\\u903b\\u8f91\\u7684\\u65b9\\u6cd5\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAccessManaged} from \\\"../ac/IAccessManaged.sol\\\";\\nimport {OracleHandler} from \\\"../lib/oracle/OracleHandler.sol\\\";\\nimport {IPrice} from \\\"../interfaces/IPrice.sol\\\";\\n\\ncontract OracleFacet is IAccessManaged, IPrice {\\n    //================================================================\\n    //   ADMIN functions\\n    //================================================================\\n\\n    function initDefaultOracleConfig() external restricted {\\n        OracleHandler.ConfigStruct memory _config = OracleHandler.ConfigStruct({\\n            maxDeviationBP: 100, //\\u8d85\\u8fc7 1% \\u8fdb\\u884c\\u6bd4\\u4ef7\\n            priceDuration: 300, //checked\\n            maxPriceUpdateDelay: 3600, // checked\\n            priceDataInterval: 60, //checked\\n            sampleSpace: 1 //checked\\n        });\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setConfig(bytes calldata _data) external restricted {\\n        (OracleHandler.ConfigStruct memory _config) = abi.decode(_data, (OracleHandler.ConfigStruct));\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setPrices(uint16[] memory _markets, uint256[] memory _prices) external restricted {\\n        OracleHandler.setPrices(_markets, _prices);\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(uint16[] memory _market, uint256[] memory _maxCumulativeDeltaDiffs)\\n        external\\n        restricted\\n    {\\n        for (uint256 i = 0; i < _market.length; i++) {\\n            OracleHandler.Storage().maxCumulativeDeltaDiffs[_market[i]] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setUSDT(address _feed) external restricted {\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.USDT = _feed;\\n    }\\n\\n    //========================================================================\\n    //     view functions\\n    //========================================================================\\n\\n    function getPrice(uint16 market, bool _maximise) external view override returns (uint256) {\\n        return OracleHandler.getPrice(market, _maximise);\\n    }\\n\\n    function getChainPrice(uint16 market, bool _maximise) external view returns (uint256) {\\n        return OracleHandler.getChainPrice(market, _maximise);\\n    }\\n\\n    function getFastPrice(uint16 market, uint256 _referencePrice, bool _maximise) external view returns (uint256) {\\n        return OracleHandler.getFastPrice(market, _referencePrice, _maximise);\\n    }\\n}\\n\",\"keccak256\":\"0x184a44410a47fe86f1b2d459de3da701959663bebbeb009f5fe7c90950fd6579\",\"license\":\"MIT\"},\"src/interfaces/IPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPrice {\\n    function getPrice(uint16 market, bool _maximise) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60e54eaaaf60158d8260dd33a0a80357f47e315f5da0db19cb3cdfc1de45e6cf\",\"license\":\"MIT\"},\"src/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (uint256);\\n\\n    function description() external view returns (string memory);\\n\\n    function aggregator() external view returns (address);\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestRound() external view returns (uint80);\\n\\n    function getRoundData(\\n        uint80 roundId\\n    ) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\",\"keccak256\":\"0x9f509678e2c05dedffbb7a26bf8f36cade173e483423edf691264cd95cd2b546\",\"license\":\"MIT\"},\"src/lib/oracle/OracleHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPriceFeed} from \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OracleHandler {\\n    using SafeCast for int256;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.oracle.storage\\\");\\n    uint256 constant PRICE_PRECISION = 10 ** 30;\\n    uint256 constant ONE_USD = PRICE_PRECISION;\\n    uint256 constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n    uint256 constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n    uint256 constant BP_DIVISOR = 10000;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    struct ConfigStruct {\\n        uint32 maxDeviationBP; // 1000\\n        uint32 priceDuration; // 300\\n        uint32 maxPriceUpdateDelay; // 3600\\n        uint32 priceDataInterval; // 60\\n        uint32 sampleSpace; // 3\\n    }\\n\\n    struct StorageStruct {\\n        address USDT;\\n        ConfigStruct config;\\n        mapping(uint16 => address) priceFeeds;\\n        mapping(uint16 => uint256) spreadBP;\\n        mapping(uint16 => uint256) prices;\\n        mapping(uint16 => uint256) maxCumulativeDeltaDiffs;\\n        mapping(uint16 => PriceDataItem) priceData;\\n    }\\n\\n    event PriceData(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event MaxCumulativeDeltaDiffExceeded(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event UpdatePrice(address feed, uint16 indexed market, uint256 price);\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function config() internal view returns (ConfigStruct memory) {\\n        return Storage().config;\\n    }\\n\\n    function setPrices(uint16[] memory _markets, uint256[] memory _prices) internal {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _setPrice(_markets[i], _prices[i]);\\n        }\\n    }\\n\\n    function setPrice(uint16 _market, uint256 _price) internal {\\n        _setPrice(_market, _price);\\n    }\\n\\n    //==================================================================================================\\n    //================ view    functions================================================================\\n    //==================================================================================================\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBPIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBPIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case the maxDeviationBP between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n\\n    function getPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 chainPrice = getChainPrice(market, _maximise);\\n        return getFastPrice(market, chainPrice, _maximise);\\n    }\\n\\n    function getFastPrice(uint16 market, uint256 _refPrice, bool _maximise) internal view returns (uint256) {\\n        uint256 lastUpdate = uint256(Storage().priceData[market].refTime);\\n        uint256 fastPrice = Storage().prices[market];\\n        if (\\n            block.timestamp > lastUpdate + uint256(Storage().config.maxPriceUpdateDelay)\\n                || block.timestamp > lastUpdate + uint256(Storage().config.priceDuration) || fastPrice == 0\\n        ) {\\n            return _refPrice;\\n        }\\n\\n        uint256 diffBP = _refPrice > fastPrice ? _refPrice - fastPrice : fastPrice - _refPrice;\\n        diffBP = (diffBP * BP_DIVISOR) / _refPrice;\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBP is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        // 1. fastPrice\\n        // 2. fastprice > chainlink, false\\n        // 2. 1%\\n        // 3. fastPricechainlink/, fastPrice\\n\\n        if (favorFastPrice(market) && diffBP <= uint256(Storage().config.maxDeviationBP)) {\\n            return fastPrice;\\n        }\\n\\n        return comparePrices(_refPrice, fastPrice, _maximise);\\n    }\\n\\n    function comparePrices(uint256 price1, uint256 price2, bool maximize) private pure returns (uint256) {\\n        return maximize ? (price1 > price2 ? price1 : price2) : (price1 < price2 ? price1 : price2);\\n    }\\n\\n    function getChainPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 xxxUSD = _getChainPrice(market, _maximise);\\n        uint256 _USDTUSD = _getChainPrice(market, _maximise);\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    //==================================================================================================\\n    //================ private functions================================================================\\n    //==================================================================================================\\n    function _setPrice(uint16 market, uint256 _price) internal {\\n        // check if the market has a price feed\\n        if (Storage().priceFeeds[market] != address(0)) {\\n            uint256 refPrice = _getLatestPriceWithUSDT(market);\\n            uint256 fastPrice = Storage().prices[market];\\n\\n            (uint256 prevRefPrice, uint256 refTime, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) =\\n                _getPriceData(market);\\n\\n            if (prevRefPrice > 0) {\\n                // chainlink\\n                uint256 refDeltaAmount = refPrice > prevRefPrice ? refPrice - prevRefPrice : prevRefPrice - refPrice;\\n                // fastPrice\\n                uint256 fastDeltaAmount = fastPrice > _price ? fastPrice - _price : _price - fastPrice;\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (\\n                    refTime / Storage().config.priceDataInterval != block.timestamp / Storage().config.priceDataInterval\\n                ) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n                //\\n                cumulativeRefDelta = cumulativeRefDelta + (refDeltaAmount * CUMULATIVE_DELTA_PRECISION) / prevRefPrice;\\n                cumulativeFastDelta = cumulativeFastDelta + (fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) / fastPrice;\\n            }\\n\\n            if (\\n                cumulativeFastDelta > cumulativeRefDelta\\n                    && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n            ) {\\n                emit MaxCumulativeDeltaDiffExceeded(\\n                    market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta\\n                );\\n            }\\n\\n            _setPriceData(market, refPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            emit PriceData(market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n        }\\n\\n        Storage().prices[market] = _price;\\n        emit UpdatePrice(msg.sender, market, _price);\\n    }\\n\\n    function _setPriceData(uint16 _market, uint256 _refPrice, uint256 _cumulativeRefDelta, uint256 _cumulativeFastDelta)\\n        private\\n    {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(_cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA, \\\"FastPriceFeed: invalid cumulativeRefDelta\\\");\\n        require(_cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA, \\\"FastPriceFeed: invalid cumulativeFastDelta\\\");\\n\\n        Storage().priceData[_market] = PriceDataItem(\\n            uint160(_refPrice), uint32(block.timestamp), uint32(_cumulativeRefDelta), uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _getLatestPriceWithUSDT(uint16 market) internal view returns (uint256) {\\n        uint256 xxxUSD = _getLatestPrice(market);\\n        uint256 _USDTUSD = (IPriceFeed(Storage().USDT).latestAnswer()).toUint256();\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    function _getLatestPrice(uint16 market) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n        IPriceFeed _priceFeed = IPriceFeed(_feed);\\n        int256 _price = _priceFeed.latestAnswer();\\n        require(_price > 0, \\\"PriceFeed: invalid price\\\");\\n        return uint256(_price);\\n    }\\n\\n    function _getChainPrice(uint16 market, bool _maximise) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n\\n        uint256 _price = 0;\\n        uint80 _id = IPriceFeed(Storage().priceFeeds[market]).latestRound();\\n\\n        for (uint80 i = 0; i < Storage().config.sampleSpace; i++) {\\n            if (_id <= i) {\\n                break;\\n            }\\n            uint256 p;\\n\\n            if (i == 0) {\\n                int256 _p = IPriceFeed(Storage().priceFeeds[market]).latestAnswer();\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p,,,) = IPriceFeed(Storage().priceFeeds[market]).getRoundData(_id - i);\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            }\\n\\n            if (_price == 0) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (_maximise && p > _price) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (!_maximise && p < _price) {\\n                _price = p;\\n            }\\n        }\\n\\n        require(_price > 0, \\\"PriceFeed: could not fetch price\\\");\\n        uint256 _decimals = IPriceFeed(Storage().priceFeeds[market]).decimals();\\n        return (_price * PRICE_PRECISION) / (10 ** _decimals);\\n    }\\n\\n    function _getPriceData(uint16 market) internal view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = Storage().priceData[market];\\n        return (\\n            uint256(data.refPrice),\\n            uint256(data.refTime),\\n            uint256(data.cumulativeRefDelta),\\n            uint256(data.cumulativeFastDelta)\\n        );\\n    }\\n\\n    function favorFastPrice(uint16 market) internal view returns (bool) {\\n        (,, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = _getPriceData(market);\\n        if (\\n            cumulativeFastDelta > cumulativeRefDelta\\n                && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n        ) {\\n            // fast > chainlink, fast-chainlink >\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xad1f5ee47376eb63f8f7d4d7cf81a388db0131dd8009a6334140742d1f16bdc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061273c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80632e6e6ea91461007d578063354497aa146100ad57806350c1b923146100c957806364b6db53146100e557806367af1a0314610115578063aa94bda81461011f578063db6112251461013b578063f224f69a1461016b575b600080fd5b6100976004803603810190610092919061184f565b610187565b6040516100a491906118b1565b60405180910390f35b6100c760048036038101906100c29190611931565b61019d565b005b6100e360048036038101906100de91906119dc565b61028d565b005b6100ff60048036038101906100fa9190611a09565b6102e0565b60405161010c91906118b1565b60405180910390f35b61011d6102f4565b005b61013960048036038101906101349190611c5b565b61041f565b005b61015560048036038101906101509190611a09565b6104a0565b60405161016291906118b1565b60405180910390f35b61018560048036038101906101809190611c5b565b6104b4565b005b60006101948484846104c2565b90509392505050565b600082828101906101ae9190611da0565b905060006101ba610658565b9050818160010160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555090505050505050565b6000610297610658565b9050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006102ec8383610685565b905092915050565b60006040518060a00160405280606463ffffffff16815260200161012c63ffffffff168152602001610e1063ffffffff168152602001603c63ffffffff168152602001600163ffffffff168152509050600061034e610658565b9050818160010160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff1602179055509050505050565b60005b825181101561049b5781818151811061043e5761043d611dcd565b5b602002602001015161044e610658565b600501600085848151811061046657610465611dcd565b5b602002602001015161ffff1661ffff16815260200190815260200160002081905550808061049390611e2b565b915050610422565b505050565b60006104ac838361073e565b905092915050565b6104be8282610761565b5050565b6000806104cd610658565b60060160008661ffff1661ffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050600061050f610658565b60040160008761ffff1661ffff168152602001908152602001600020549050610536610658565b60010160000160089054906101000a900463ffffffff1663ffffffff168261055e9190611e73565b421180610599575061056e610658565b60010160000160049054906101000a900463ffffffff1663ffffffff16826105969190611e73565b42115b806105a45750600081145b156105b3578492505050610651565b60008186116105cd5785826105c89190611ea7565b6105da565b81866105d99190611ea7565b5b905085612710826105eb9190611edb565b6105f59190611f4c565b9050610600876107c3565b8015610630575061060f610658565b60010160000160009054906101000a900463ffffffff1663ffffffff168111155b1561064057819350505050610651565b61064b868387610830565b93505050505b9392505050565b6000807f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490508091505090565b6000806106928484610864565b905060006106a08585610864565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106db9190611f4c565b82101561070f57806c0c9f2c9cd04674edea40000000836106fc9190611edb565b6107069190611f4c565b92505050610738565b806c0c9f2c9cd04674edea40000000836107299190611f4c565b6107339190611edb565b925050505b92915050565b60008061074b8484610685565b90506107588482856104c2565b91505092915050565b60005b82518110156107be576107ab83828151811061078357610782611dcd565b5b602002602001015183838151811061079e5761079d611dcd565b5b6020026020010151610df1565b80806107b690611e2b565b915050610764565b505050565b60008060006107d18461110f565b935093505050818111801561081457506107e9610658565b60050160008561ffff1661ffff1681526020019081526020016000205482826108129190611ea7565b115b156108245760009250505061082b565b6001925050505b919050565b60008161084b578284106108445782610846565b835b61085b565b828411610858578261085a565b835b5b90509392505050565b60008061086f610658565b60020160008561ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091490611fda565b60405180910390fd5b600080610928610658565b60020160008761ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061203c565b905060005b6109e0610658565b60010160000160109054906101000a900463ffffffff1663ffffffff168169ffffffffffffffffffff161015610cb7578069ffffffffffffffffffff168269ffffffffffffffffffff161115610cb7576000808269ffffffffffffffffffff1603610b48576000610a4f610658565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa919061209f565b905060008113610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690612118565b60405180910390fd5b80915050610c61565b6000610b52610658565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6fc8f58486610bb69190612138565b6040518263ffffffff1660e01b8152600401610bd29190612185565b60a060405180830381865afa158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1391906121b5565b50505091505060008113610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390612118565b60405180910390fd5b809150505b60008403610c725780935050610ca4565b868015610c7e57508381115b15610c8c5780935050610ca4565b86158015610c9957508381105b15610ca2578093505b505b8080610caf90612230565b9150506109d8565b5060008211610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf2906122ae565b60405180910390fd5b6000610d05610658565b60020160008861ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612307565b60ff16905080600a610dc29190612467565b6c0c9f2c9cd04674edea4000000084610ddb9190611edb565b610de59190611f4c565b94505050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16610e11610658565b60020160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110a4576000610e748361125c565b90506000610e80610658565b60040160008561ffff1661ffff168152602001908152602001600020549050600080600080610eae8861110f565b93509350935093506000841115610fd0576000848711610ed9578685610ed49190611ea7565b610ee6565b8487610ee59190611ea7565b5b90506000888711610f02578689610efd9190611ea7565b610f0f565b8887610f0e9190611ea7565b5b9050610f19610658565b600101600001600c9054906101000a900463ffffffff1663ffffffff1642610f419190611f4c565b610f49610658565b600101600001600c9054906101000a900463ffffffff1663ffffffff1686610f719190611f4c565b14610f7f5760009350600092505b856298968083610f8f9190611edb565b610f999190611f4c565b84610fa49190611e73565b9350866298968082610fb69190611edb565b610fc09190611f4c565b83610fcb9190611e73565b925050505b818111801561100d5750610fe2610658565b60050160008961ffff1661ffff16815260200190815260200160002054828261100b9190611ea7565b115b15611052577f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f4388878785856040516110499594939291906124c1565b60405180910390a15b61105e888784846113ab565b7f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f88878785856040516110959594939291906124c1565b60405180910390a15050505050505b806110ad610658565b60040160008461ffff1661ffff168152602001908152602001600020819055508161ffff167ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665143383604051611103929190612523565b60405180910390a25050565b600080600080600061111f610658565b60060160008761ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16816020015163ffffffff16826040015163ffffffff16836060015163ffffffff169450945094509450509193509193565b600080611268836115c5565b9050600061130e611277610658565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611309919061209f565b611744565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6113499190611f4c565b82101561137d57806c0c9f2c9cd04674edea400000008361136a9190611edb565b6113749190611f4c565b925050506113a6565b806c0c9f2c9cd04674edea40000000836113979190611f4c565b6113a19190611edb565b925050505b919050565b73ffffffffffffffffffffffffffffffffffffffff80168310611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90612598565b60405180910390fd5b63ffffffff8016821061144b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114429061262a565b60405180910390fd5b63ffffffff80168110611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a906126bc565b60405180910390fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff1681526020018363ffffffff1681526020018263ffffffff168152506114e4610658565b60060160008661ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505050505050565b6000806115d0610658565b60020160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590611fda565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f4919061209f565b905060008113611739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173090612118565b60405180910390fd5b809350505050919050565b60008082121561178b57816040517fa8ce443200000000000000000000000000000000000000000000000000000000815260040161178291906126eb565b60405180910390fd5b819050919050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b6117be816117a7565b81146117c957600080fd5b50565b6000813590506117db816117b5565b92915050565b6000819050919050565b6117f4816117e1565b81146117ff57600080fd5b50565b600081359050611811816117eb565b92915050565b60008115159050919050565b61182c81611817565b811461183757600080fd5b50565b60008135905061184981611823565b92915050565b6000806000606084860312156118685761186761179d565b5b6000611876868287016117cc565b935050602061188786828701611802565b92505060406118988682870161183a565b9150509250925092565b6118ab816117e1565b82525050565b60006020820190506118c660008301846118a2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118f1576118f06118cc565b5b8235905067ffffffffffffffff81111561190e5761190d6118d1565b5b60208301915083600182028301111561192a576119296118d6565b5b9250929050565b600080602083850312156119485761194761179d565b5b600083013567ffffffffffffffff811115611966576119656117a2565b5b611972858286016118db565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119a98261197e565b9050919050565b6119b98161199e565b81146119c457600080fd5b50565b6000813590506119d6816119b0565b92915050565b6000602082840312156119f2576119f161179d565b5b6000611a00848285016119c7565b91505092915050565b60008060408385031215611a2057611a1f61179d565b5b6000611a2e858286016117cc565b9250506020611a3f8582860161183a565b9150509250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a9282611a49565b810181811067ffffffffffffffff82111715611ab157611ab0611a5a565b5b80604052505050565b6000611ac4611793565b9050611ad08282611a89565b919050565b600067ffffffffffffffff821115611af057611aef611a5a565b5b602082029050602081019050919050565b6000611b14611b0f84611ad5565b611aba565b90508083825260208201905060208402830185811115611b3757611b366118d6565b5b835b81811015611b605780611b4c88826117cc565b845260208401935050602081019050611b39565b5050509392505050565b600082601f830112611b7f57611b7e6118cc565b5b8135611b8f848260208601611b01565b91505092915050565b600067ffffffffffffffff821115611bb357611bb2611a5a565b5b602082029050602081019050919050565b6000611bd7611bd284611b98565b611aba565b90508083825260208201905060208402830185811115611bfa57611bf96118d6565b5b835b81811015611c235780611c0f8882611802565b845260208401935050602081019050611bfc565b5050509392505050565b600082601f830112611c4257611c416118cc565b5b8135611c52848260208601611bc4565b91505092915050565b60008060408385031215611c7257611c7161179d565b5b600083013567ffffffffffffffff811115611c9057611c8f6117a2565b5b611c9c85828601611b6a565b925050602083013567ffffffffffffffff811115611cbd57611cbc6117a2565b5b611cc985828601611c2d565b9150509250929050565b600080fd5b600063ffffffff82169050919050565b611cf181611cd8565b8114611cfc57600080fd5b50565b600081359050611d0e81611ce8565b92915050565b600060a08284031215611d2a57611d29611cd3565b5b611d3460a0611aba565b90506000611d4484828501611cff565b6000830152506020611d5884828501611cff565b6020830152506040611d6c84828501611cff565b6040830152506060611d8084828501611cff565b6060830152506080611d9484828501611cff565b60808301525092915050565b600060a08284031215611db657611db561179d565b5b6000611dc484828501611d14565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e36826117e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e6857611e67611dfc565b5b600182019050919050565b6000611e7e826117e1565b9150611e89836117e1565b9250828201905080821115611ea157611ea0611dfc565b5b92915050565b6000611eb2826117e1565b9150611ebd836117e1565b9250828203905081811115611ed557611ed4611dfc565b5b92915050565b6000611ee6826117e1565b9150611ef1836117e1565b9250828202611eff816117e1565b91508282048414831517611f1657611f15611dfc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f57826117e1565b9150611f62836117e1565b925082611f7257611f71611f1d565b5b828204905092915050565b600082825260208201905092915050565b7f5072696365466565643a20696e76616c69642070726963652066656564000000600082015250565b6000611fc4601d83611f7d565b9150611fcf82611f8e565b602082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b600069ffffffffffffffffffff82169050919050565b61201981611ffa565b811461202457600080fd5b50565b60008151905061203681612010565b92915050565b6000602082840312156120525761205161179d565b5b600061206084828501612027565b91505092915050565b6000819050919050565b61207c81612069565b811461208757600080fd5b50565b60008151905061209981612073565b92915050565b6000602082840312156120b5576120b461179d565b5b60006120c38482850161208a565b91505092915050565b7f5072696365466565643a20696e76616c69642070726963650000000000000000600082015250565b6000612102601883611f7d565b915061210d826120cc565b602082019050919050565b60006020820190508181036000830152612131816120f5565b9050919050565b600061214382611ffa565b915061214e83611ffa565b9250828203905069ffffffffffffffffffff8111156121705761216f611dfc565b5b92915050565b61217f81611ffa565b82525050565b600060208201905061219a6000830184612176565b92915050565b6000815190506121af816117eb565b92915050565b600080600080600060a086880312156121d1576121d061179d565b5b60006121df88828901612027565b95505060206121f08882890161208a565b9450506040612201888289016121a0565b9350506060612212888289016121a0565b925050608061222388828901612027565b9150509295509295909350565b600061223b82611ffa565b915069ffffffffffffffffffff820361225757612256611dfc565b5b600182019050919050565b7f5072696365466565643a20636f756c64206e6f74206665746368207072696365600082015250565b6000612298602083611f7d565b91506122a382612262565b602082019050919050565b600060208201905081810360008301526122c78161228b565b9050919050565b600060ff82169050919050565b6122e4816122ce565b81146122ef57600080fd5b50565b600081519050612301816122db565b92915050565b60006020828403121561231d5761231c61179d565b5b600061232b848285016122f2565b91505092915050565b60008160011c9050919050565b6000808291508390505b600185111561238b5780860481111561236757612366611dfc565b5b60018516156123765780820291505b808102905061238485612334565b945061234b565b94509492505050565b6000826123a45760019050612460565b816123b25760009050612460565b81600181146123c857600281146123d257612401565b6001915050612460565b60ff8411156123e4576123e3611dfc565b5b8360020a9150848211156123fb576123fa611dfc565b5b50612460565b5060208310610133831016604e8410600b84101617156124365782820a90508381111561243157612430611dfc565b5b612460565b6124438484846001612341565b9250905081840481111561245a57612459611dfc565b5b81810290505b9392505050565b6000612472826117e1565b915061247d836117e1565b92506124aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612394565b905092915050565b6124bb816117a7565b82525050565b600060a0820190506124d660008301886124b2565b6124e360208301876118a2565b6124f060408301866118a2565b6124fd60608301856118a2565b61250a60808301846118a2565b9695505050505050565b61251d8161199e565b82525050565b60006040820190506125386000830185612514565b61254560208301846118a2565b9392505050565b7f466173745072696365466565643a20696e76616c696420726566507269636500600082015250565b6000612582601f83611f7d565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b9050919050565b7f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201527f6552656644656c74610000000000000000000000000000000000000000000000602082015250565b6000612614602983611f7d565b915061261f826125b8565b604082019050919050565b6000602082019050818103600083015261264381612607565b9050919050565b7f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201527f654661737444656c746100000000000000000000000000000000000000000000602082015250565b60006126a6602a83611f7d565b91506126b18261264a565b604082019050919050565b600060208201905081810360008301526126d581612699565b9050919050565b6126e581612069565b82525050565b600060208201905061270060008301846126dc565b9291505056fea2646970667358221220f4fcabd7019c69d1d4958f723b06ae31510897fa7ff6ae867b35c07a4f79f7dd64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80632e6e6ea91461007d578063354497aa146100ad57806350c1b923146100c957806364b6db53146100e557806367af1a0314610115578063aa94bda81461011f578063db6112251461013b578063f224f69a1461016b575b600080fd5b6100976004803603810190610092919061184f565b610187565b6040516100a491906118b1565b60405180910390f35b6100c760048036038101906100c29190611931565b61019d565b005b6100e360048036038101906100de91906119dc565b61028d565b005b6100ff60048036038101906100fa9190611a09565b6102e0565b60405161010c91906118b1565b60405180910390f35b61011d6102f4565b005b61013960048036038101906101349190611c5b565b61041f565b005b61015560048036038101906101509190611a09565b6104a0565b60405161016291906118b1565b60405180910390f35b61018560048036038101906101809190611c5b565b6104b4565b005b60006101948484846104c2565b90509392505050565b600082828101906101ae9190611da0565b905060006101ba610658565b9050818160010160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff16021790555090505050505050565b6000610297610658565b9050818160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60006102ec8383610685565b905092915050565b60006040518060a00160405280606463ffffffff16815260200161012c63ffffffff168152602001610e1063ffffffff168152602001603c63ffffffff168152602001600163ffffffff168152509050600061034e610658565b9050818160010160008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060808201518160000160106101000a81548163ffffffff021916908363ffffffff1602179055509050505050565b60005b825181101561049b5781818151811061043e5761043d611dcd565b5b602002602001015161044e610658565b600501600085848151811061046657610465611dcd565b5b602002602001015161ffff1661ffff16815260200190815260200160002081905550808061049390611e2b565b915050610422565b505050565b60006104ac838361073e565b905092915050565b6104be8282610761565b5050565b6000806104cd610658565b60060160008661ffff1661ffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050600061050f610658565b60040160008761ffff1661ffff168152602001908152602001600020549050610536610658565b60010160000160089054906101000a900463ffffffff1663ffffffff168261055e9190611e73565b421180610599575061056e610658565b60010160000160049054906101000a900463ffffffff1663ffffffff16826105969190611e73565b42115b806105a45750600081145b156105b3578492505050610651565b60008186116105cd5785826105c89190611ea7565b6105da565b81866105d99190611ea7565b5b905085612710826105eb9190611edb565b6105f59190611f4c565b9050610600876107c3565b8015610630575061060f610658565b60010160000160009054906101000a900463ffffffff1663ffffffff168111155b1561064057819350505050610651565b61064b868387610830565b93505050505b9392505050565b6000807f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490508091505090565b6000806106928484610864565b905060006106a08585610864565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106db9190611f4c565b82101561070f57806c0c9f2c9cd04674edea40000000836106fc9190611edb565b6107069190611f4c565b92505050610738565b806c0c9f2c9cd04674edea40000000836107299190611f4c565b6107339190611edb565b925050505b92915050565b60008061074b8484610685565b90506107588482856104c2565b91505092915050565b60005b82518110156107be576107ab83828151811061078357610782611dcd565b5b602002602001015183838151811061079e5761079d611dcd565b5b6020026020010151610df1565b80806107b690611e2b565b915050610764565b505050565b60008060006107d18461110f565b935093505050818111801561081457506107e9610658565b60050160008561ffff1661ffff1681526020019081526020016000205482826108129190611ea7565b115b156108245760009250505061082b565b6001925050505b919050565b60008161084b578284106108445782610846565b835b61085b565b828411610858578261085a565b835b5b90509392505050565b60008061086f610658565b60020160008561ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091490611fda565b60405180910390fd5b600080610928610658565b60020160008761ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d3919061203c565b905060005b6109e0610658565b60010160000160109054906101000a900463ffffffff1663ffffffff168169ffffffffffffffffffff161015610cb7578069ffffffffffffffffffff168269ffffffffffffffffffff161115610cb7576000808269ffffffffffffffffffff1603610b48576000610a4f610658565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afa919061209f565b905060008113610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690612118565b60405180910390fd5b80915050610c61565b6000610b52610658565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6fc8f58486610bb69190612138565b6040518263ffffffff1660e01b8152600401610bd29190612185565b60a060405180830381865afa158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1391906121b5565b50505091505060008113610c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5390612118565b60405180910390fd5b809150505b60008403610c725780935050610ca4565b868015610c7e57508381115b15610c8c5780935050610ca4565b86158015610c9957508381105b15610ca2578093505b505b8080610caf90612230565b9150506109d8565b5060008211610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf2906122ae565b60405180910390fd5b6000610d05610658565b60020160008861ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190612307565b60ff16905080600a610dc29190612467565b6c0c9f2c9cd04674edea4000000084610ddb9190611edb565b610de59190611f4c565b94505050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff16610e11610658565b60020160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110a4576000610e748361125c565b90506000610e80610658565b60040160008561ffff1661ffff168152602001908152602001600020549050600080600080610eae8861110f565b93509350935093506000841115610fd0576000848711610ed9578685610ed49190611ea7565b610ee6565b8487610ee59190611ea7565b5b90506000888711610f02578689610efd9190611ea7565b610f0f565b8887610f0e9190611ea7565b5b9050610f19610658565b600101600001600c9054906101000a900463ffffffff1663ffffffff1642610f419190611f4c565b610f49610658565b600101600001600c9054906101000a900463ffffffff1663ffffffff1686610f719190611f4c565b14610f7f5760009350600092505b856298968083610f8f9190611edb565b610f999190611f4c565b84610fa49190611e73565b9350866298968082610fb69190611edb565b610fc09190611f4c565b83610fcb9190611e73565b925050505b818111801561100d5750610fe2610658565b60050160008961ffff1661ffff16815260200190815260200160002054828261100b9190611ea7565b115b15611052577f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f4388878785856040516110499594939291906124c1565b60405180910390a15b61105e888784846113ab565b7f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f88878785856040516110959594939291906124c1565b60405180910390a15050505050505b806110ad610658565b60040160008461ffff1661ffff168152602001908152602001600020819055508161ffff167ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665143383604051611103929190612523565b60405180910390a25050565b600080600080600061111f610658565b60060160008761ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16816020015163ffffffff16826040015163ffffffff16836060015163ffffffff169450945094509450509193509193565b600080611268836115c5565b9050600061130e611277610658565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611309919061209f565b611744565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6113499190611f4c565b82101561137d57806c0c9f2c9cd04674edea400000008361136a9190611edb565b6113749190611f4c565b925050506113a6565b806c0c9f2c9cd04674edea40000000836113979190611f4c565b6113a19190611edb565b925050505b919050565b73ffffffffffffffffffffffffffffffffffffffff80168310611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90612598565b60405180910390fd5b63ffffffff8016821061144b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114429061262a565b60405180910390fd5b63ffffffff80168110611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148a906126bc565b60405180910390fd5b60405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff1681526020018363ffffffff1681526020018263ffffffff168152506114e4610658565b60060160008661ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505050505050565b6000806115d0610658565b60020160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590611fda565b60405180910390fd5b600081905060008173ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f4919061209f565b905060008113611739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173090612118565b60405180910390fd5b809350505050919050565b60008082121561178b57816040517fa8ce443200000000000000000000000000000000000000000000000000000000815260040161178291906126eb565b60405180910390fd5b819050919050565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b6117be816117a7565b81146117c957600080fd5b50565b6000813590506117db816117b5565b92915050565b6000819050919050565b6117f4816117e1565b81146117ff57600080fd5b50565b600081359050611811816117eb565b92915050565b60008115159050919050565b61182c81611817565b811461183757600080fd5b50565b60008135905061184981611823565b92915050565b6000806000606084860312156118685761186761179d565b5b6000611876868287016117cc565b935050602061188786828701611802565b92505060406118988682870161183a565b9150509250925092565b6118ab816117e1565b82525050565b60006020820190506118c660008301846118a2565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126118f1576118f06118cc565b5b8235905067ffffffffffffffff81111561190e5761190d6118d1565b5b60208301915083600182028301111561192a576119296118d6565b5b9250929050565b600080602083850312156119485761194761179d565b5b600083013567ffffffffffffffff811115611966576119656117a2565b5b611972858286016118db565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119a98261197e565b9050919050565b6119b98161199e565b81146119c457600080fd5b50565b6000813590506119d6816119b0565b92915050565b6000602082840312156119f2576119f161179d565b5b6000611a00848285016119c7565b91505092915050565b60008060408385031215611a2057611a1f61179d565b5b6000611a2e858286016117cc565b9250506020611a3f8582860161183a565b9150509250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a9282611a49565b810181811067ffffffffffffffff82111715611ab157611ab0611a5a565b5b80604052505050565b6000611ac4611793565b9050611ad08282611a89565b919050565b600067ffffffffffffffff821115611af057611aef611a5a565b5b602082029050602081019050919050565b6000611b14611b0f84611ad5565b611aba565b90508083825260208201905060208402830185811115611b3757611b366118d6565b5b835b81811015611b605780611b4c88826117cc565b845260208401935050602081019050611b39565b5050509392505050565b600082601f830112611b7f57611b7e6118cc565b5b8135611b8f848260208601611b01565b91505092915050565b600067ffffffffffffffff821115611bb357611bb2611a5a565b5b602082029050602081019050919050565b6000611bd7611bd284611b98565b611aba565b90508083825260208201905060208402830185811115611bfa57611bf96118d6565b5b835b81811015611c235780611c0f8882611802565b845260208401935050602081019050611bfc565b5050509392505050565b600082601f830112611c4257611c416118cc565b5b8135611c52848260208601611bc4565b91505092915050565b60008060408385031215611c7257611c7161179d565b5b600083013567ffffffffffffffff811115611c9057611c8f6117a2565b5b611c9c85828601611b6a565b925050602083013567ffffffffffffffff811115611cbd57611cbc6117a2565b5b611cc985828601611c2d565b9150509250929050565b600080fd5b600063ffffffff82169050919050565b611cf181611cd8565b8114611cfc57600080fd5b50565b600081359050611d0e81611ce8565b92915050565b600060a08284031215611d2a57611d29611cd3565b5b611d3460a0611aba565b90506000611d4484828501611cff565b6000830152506020611d5884828501611cff565b6020830152506040611d6c84828501611cff565b6040830152506060611d8084828501611cff565b6060830152506080611d9484828501611cff565b60808301525092915050565b600060a08284031215611db657611db561179d565b5b6000611dc484828501611d14565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e36826117e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e6857611e67611dfc565b5b600182019050919050565b6000611e7e826117e1565b9150611e89836117e1565b9250828201905080821115611ea157611ea0611dfc565b5b92915050565b6000611eb2826117e1565b9150611ebd836117e1565b9250828203905081811115611ed557611ed4611dfc565b5b92915050565b6000611ee6826117e1565b9150611ef1836117e1565b9250828202611eff816117e1565b91508282048414831517611f1657611f15611dfc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611f57826117e1565b9150611f62836117e1565b925082611f7257611f71611f1d565b5b828204905092915050565b600082825260208201905092915050565b7f5072696365466565643a20696e76616c69642070726963652066656564000000600082015250565b6000611fc4601d83611f7d565b9150611fcf82611f8e565b602082019050919050565b60006020820190508181036000830152611ff381611fb7565b9050919050565b600069ffffffffffffffffffff82169050919050565b61201981611ffa565b811461202457600080fd5b50565b60008151905061203681612010565b92915050565b6000602082840312156120525761205161179d565b5b600061206084828501612027565b91505092915050565b6000819050919050565b61207c81612069565b811461208757600080fd5b50565b60008151905061209981612073565b92915050565b6000602082840312156120b5576120b461179d565b5b60006120c38482850161208a565b91505092915050565b7f5072696365466565643a20696e76616c69642070726963650000000000000000600082015250565b6000612102601883611f7d565b915061210d826120cc565b602082019050919050565b60006020820190508181036000830152612131816120f5565b9050919050565b600061214382611ffa565b915061214e83611ffa565b9250828203905069ffffffffffffffffffff8111156121705761216f611dfc565b5b92915050565b61217f81611ffa565b82525050565b600060208201905061219a6000830184612176565b92915050565b6000815190506121af816117eb565b92915050565b600080600080600060a086880312156121d1576121d061179d565b5b60006121df88828901612027565b95505060206121f08882890161208a565b9450506040612201888289016121a0565b9350506060612212888289016121a0565b925050608061222388828901612027565b9150509295509295909350565b600061223b82611ffa565b915069ffffffffffffffffffff820361225757612256611dfc565b5b600182019050919050565b7f5072696365466565643a20636f756c64206e6f74206665746368207072696365600082015250565b6000612298602083611f7d565b91506122a382612262565b602082019050919050565b600060208201905081810360008301526122c78161228b565b9050919050565b600060ff82169050919050565b6122e4816122ce565b81146122ef57600080fd5b50565b600081519050612301816122db565b92915050565b60006020828403121561231d5761231c61179d565b5b600061232b848285016122f2565b91505092915050565b60008160011c9050919050565b6000808291508390505b600185111561238b5780860481111561236757612366611dfc565b5b60018516156123765780820291505b808102905061238485612334565b945061234b565b94509492505050565b6000826123a45760019050612460565b816123b25760009050612460565b81600181146123c857600281146123d257612401565b6001915050612460565b60ff8411156123e4576123e3611dfc565b5b8360020a9150848211156123fb576123fa611dfc565b5b50612460565b5060208310610133831016604e8410600b84101617156124365782820a90508381111561243157612430611dfc565b5b612460565b6124438484846001612341565b9250905081840481111561245a57612459611dfc565b5b81810290505b9392505050565b6000612472826117e1565b915061247d836117e1565b92506124aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612394565b905092915050565b6124bb816117a7565b82525050565b600060a0820190506124d660008301886124b2565b6124e360208301876118a2565b6124f060408301866118a2565b6124fd60608301856118a2565b61250a60808301846118a2565b9695505050505050565b61251d8161199e565b82525050565b60006040820190506125386000830185612514565b61254560208301846118a2565b9392505050565b7f466173745072696365466565643a20696e76616c696420726566507269636500600082015250565b6000612582601f83611f7d565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b9050919050565b7f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201527f6552656644656c74610000000000000000000000000000000000000000000000602082015250565b6000612614602983611f7d565b915061261f826125b8565b604082019050919050565b6000602082019050818103600083015261264381612607565b9050919050565b7f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201527f654661737444656c746100000000000000000000000000000000000000000000602082015250565b60006126a6602a83611f7d565b91506126b18261264a565b604082019050919050565b600060208201905081810360008301526126d581612699565b9050919050565b6126e581612069565b82525050565b600060208201905061270060008301846126dc565b9291505056fea2646970667358221220f4fcabd7019c69d1d4958f723b06ae31510897fa7ff6ae867b35c07a4f79f7dd64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedIntToUint(int256)": [
        {
          "details": "An int value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}