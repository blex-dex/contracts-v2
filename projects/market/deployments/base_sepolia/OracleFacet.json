{
  "address": "0x279aE2a6C541C8d6402Dc291088b3c48c3797A2e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AccessManagedInvalidAuthority",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "delay",
          "type": "uint32"
        }
      ],
      "name": "AccessManagedRequiredDelay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AccessManagedUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "SafeCastOverflowedIntToUint",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "MaxCumulativeDeltaDiffExceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fastPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeRefDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cumulativeFastDelta",
          "type": "uint256"
        }
      ],
      "name": "PriceData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "UpdatePrice",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getChainPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getFastPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_maximise",
          "type": "bool"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initDefaultOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_market",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxCumulativeDeltaDiffs",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxCumulativeDeltaDiffs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maxDeviationBP",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "priceDuration",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxPriceUpdateDelay",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "priceDataInterval",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sampleSpace",
              "type": "uint32"
            }
          ],
          "internalType": "struct OracleHandler.ConfigStruct",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_markets",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "setUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba5974fa12571fcc815a30cff3294578b115b7d2bb1f3c7783d8ab3a670479f6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x653985cBA14eF0b751bf209fee39De78b4d21676",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "2434937",
    "logsBloom": "0x
    "blockHash": "0x267f8782fdb56697353b6ab59a41275f1f4a81d81326595a5896d908fa3be798",
    "transactionHash": "0xba5974fa12571fcc815a30cff3294578b115b7d2bb1f3c7783d8ab3a670479f6",
    "logs": [],
    "blockNumber": 8359954,
    "cumulativeGasUsed": "2863557",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "ae8e633405c82115b04e4b26f122c4f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"SafeCastOverflowedIntToUint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"MaxCumulativeDeltaDiffExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"PriceData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getChainPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getFastPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDefaultOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_market\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxCumulativeDeltaDiffs\",\"type\":\"uint256[]\"}],\"name\":\"setMaxCumulativeDeltaDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxDeviationBP\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priceDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxPriceUpdateDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"priceDataInterval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sampleSpace\",\"type\":\"uint32\"}],\"internalType\":\"struct OracleHandler.ConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_markets\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"SafeCastOverflowedIntToUint(int256)\":[{\"details\":\"An int value doesn't fit in an uint of `bits` size.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/OracleFacet.sol\":\"OracleFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\",\"keccak256\":\"0xb3875997b0d8705e29aa20fee88e1dfef93df438794ae1ad8ba2eb016a4dd4e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xaba93d42cd70e1418782951132d97b31ddce5f50ad81090884b6d0e41caac9d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0xdabf85e3bab52e7cfade4f77e661bcf7a2f9f95097bfd2ca5ddb193a0c21ee8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x4cc0766bd7fb7b3bafb70afa2a93b6e313a0baec7a35ad1b57505be7861c1030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"src/ac/IAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibAccessManaged} from \\\"./LibAccessManaged.sol\\\";\\nimport {AuthorityUtils} from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\n\\nabstract contract IAccessManaged {\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    modifier restricted() {\\n        //todo\\n        // _checkCanCall(msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        //todo\\n        // require(msg.sender == address(this), \\\"AccessManaged: only self\\\");\\n        _;\\n    }\\n\\n    modifier onlySelfOrRestricted() {\\n        // todo\\n        _;\\n    }\\n\\n    function _authority() internal view returns (address) {\\n        return LibAccessManaged.Storage()._authority;\\n    }\\n\\n    function _checkCanCall(address caller, bytes calldata data) internal {\\n        LibAccessManaged.AccessManagedStorage storage $ = LibAccessManaged.Storage();\\n        (bool immediate, uint32 delay) =\\n            AuthorityUtils.canCallWithDelay(_authority(), caller, address(this), bytes4(data[0:4]));\\n        if (!immediate) {\\n            if (delay > 0) {\\n                $._consumingSchedule = true;\\n                IAccessManager(_authority()).consumeScheduledOp(caller, data);\\n                $._consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x926078f4b7e70567d14fdfcc6d09e3d7baa8abeaf0e388d52ef977d7e6526ec0\",\"license\":\"MIT\"},\"src/ac/LibAccessManaged.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary LibAccessManaged {\\n    struct AccessManagedStorage {\\n        address _authority;\\n        bool _consumingSchedule;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessManaged\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessManagedStorageLocation =\\n        0xf3177357ab46d8af007ab3fdb9af81da189e1068fefdc0073dca88a2cab40a00;\\n\\n    function Storage() internal pure returns (AccessManagedStorage storage fs) {\\n        bytes32 position = AccessManagedStorageLocation;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe8fc43c1b84ea9c7d025060019e7749e4fdf9c9a554df88cbf59a0469d3e3e3\",\"license\":\"BUSL-1.1\"},\"src/facets/OracleFacet.sol\":{\"content\":\"// 1. \\u5916\\u90e8\\u9884\\u8a00\\u673a\\u7684\\u4f9d\\u8d56\\n// 2. \\u5904\\u7406\\u9884\\u8a00\\u673a\\u7cbe\\u5ea6\\n// 3. \\u4ef7\\u683c\\u903b\\u8f91\\u7684\\u65b9\\u6cd5\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IAccessManaged} from \\\"../ac/IAccessManaged.sol\\\";\\nimport {OracleHandler} from \\\"../lib/oracle/OracleHandler.sol\\\";\\nimport {IPrice} from \\\"../interfaces/IPrice.sol\\\";\\n\\ncontract OracleFacet is IAccessManaged, IPrice {\\n    //================================================================\\n    //   ADMIN functions\\n    //================================================================\\n\\n    function initDefaultOracleConfig() external restricted {\\n        OracleHandler.ConfigStruct memory _config = OracleHandler.ConfigStruct({\\n            maxDeviationBP: 100, //\\u8d85\\u8fc7 1% \\u8fdb\\u884c\\u6bd4\\u4ef7\\n            priceDuration: 300, //checked\\n            maxPriceUpdateDelay: 3600, // checked\\n            priceDataInterval: 60, //checked\\n            sampleSpace: 1 //checked\\n        });\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setOracleConfig(OracleHandler.ConfigStruct memory _config) external restricted {\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.config = _config;\\n    }\\n\\n    function setPrices(uint16[] memory _markets, uint256[] memory _prices) external restricted {\\n        OracleHandler.setPrices(_markets, _prices);\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(uint16[] memory _market, uint256[] memory _maxCumulativeDeltaDiffs)\\n        external\\n        restricted\\n    {\\n        for (uint256 i = 0; i < _market.length; i++) {\\n            OracleHandler.Storage().maxCumulativeDeltaDiffs[_market[i]] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setUSDT(address _feed) external restricted {\\n        OracleHandler.StorageStruct storage store = OracleHandler.Storage();\\n        store.USDT = _feed;\\n    }\\n\\n    //========================================================================\\n    //     view functions\\n    //========================================================================\\n\\n    function priceFeed(uint16 market) external view returns (address) {\\n        return OracleHandler.Storage().priceFeeds[market];\\n    }\\n\\n    function usdtFeed() external view returns (address) {\\n        return OracleHandler.Storage().USDT;\\n    }\\n\\n    function getPrice(uint16 market, bool _maximise) external view override returns (uint256) {\\n        return OracleHandler.getPrice(market, _maximise);\\n    }\\n\\n    function getChainPrice(uint16 market, bool _maximise) external view returns (uint256) {\\n        return OracleHandler.getChainPrice(market, _maximise);\\n    }\\n\\n    function getFastPrice(uint16 market, uint256 _referencePrice, bool _maximise) external view returns (uint256) {\\n        return OracleHandler.getFastPrice(market, _referencePrice, _maximise);\\n    }\\n}\\n\",\"keccak256\":\"0x4a4beb883d429e90d164e79137a39856583425ec3c9121c6d8b860439be84a0d\",\"license\":\"MIT\"},\"src/interfaces/IPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPrice {\\n    function getPrice(uint16 market, bool _maximise) external view returns (uint256);\\n    function priceFeed(uint16 market) external view returns (address);\\n    function usdtFeed() external view returns (address);\\n}\\n\",\"keccak256\":\"0x28b03738a70148246f681e6e6287f3f9606b972f59f484749372074df32c118f\",\"license\":\"MIT\"},\"src/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (uint256);\\n\\n    function description() external view returns (string memory);\\n\\n    function aggregator() external view returns (address);\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestRound() external view returns (uint80);\\n\\n    function getRoundData(\\n        uint80 roundId\\n    ) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\",\"keccak256\":\"0x9f509678e2c05dedffbb7a26bf8f36cade173e483423edf691264cd95cd2b546\",\"license\":\"MIT\"},\"src/lib/oracle/OracleHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPriceFeed} from \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OracleHandler {\\n    using SafeCast for int256;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.oracle.storage\\\");\\n    uint256 constant PRICE_PRECISION = 10 ** 30;\\n    uint256 constant ONE_USD = PRICE_PRECISION;\\n    uint256 constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n    uint256 constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n    uint256 constant BP_DIVISOR = 10000;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    struct ConfigStruct {\\n        uint32 maxDeviationBP; // 1000\\n        uint32 priceDuration; // 300\\n        uint32 maxPriceUpdateDelay; // 3600\\n        uint32 priceDataInterval; // 60\\n        uint32 sampleSpace; // 3\\n    }\\n\\n    struct StorageStruct {\\n        address USDT;\\n        ConfigStruct config;\\n        mapping(uint16 => address) priceFeeds;\\n        mapping(uint16 => uint256) spreadBP;\\n        mapping(uint16 => uint256) prices;\\n        mapping(uint16 => uint256) maxCumulativeDeltaDiffs;\\n        mapping(uint16 => PriceDataItem) priceData;\\n    }\\n\\n    event PriceData(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event MaxCumulativeDeltaDiffExceeded(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event UpdatePrice(address feed, uint16 indexed market, uint256 price);\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function config() internal view returns (ConfigStruct memory) {\\n        return Storage().config;\\n    }\\n\\n    function setPrices(uint16[] memory _markets, uint256[] memory _prices) internal {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _setPrice(_markets[i], _prices[i]);\\n        }\\n    }\\n\\n    function setPrice(uint16 _market, uint256 _price) internal {\\n        _setPrice(_market, _price);\\n    }\\n\\n    //==================================================================================================\\n    //================ view    functions================================================================\\n    //==================================================================================================\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBPIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBPIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case the maxDeviationBP between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n\\n    function getPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 chainPrice = getChainPrice(market, _maximise);\\n        return getFastPrice(market, chainPrice, _maximise);\\n    }\\n\\n    function getFastPrice(uint16 market, uint256 _refPrice, bool _maximise) internal view returns (uint256) {\\n        uint256 lastUpdate = uint256(Storage().priceData[market].refTime);\\n        uint256 fastPrice = Storage().prices[market];\\n        if (\\n            block.timestamp > lastUpdate + uint256(Storage().config.maxPriceUpdateDelay)\\n                || block.timestamp > lastUpdate + uint256(Storage().config.priceDuration) || fastPrice == 0\\n        ) {\\n            return _refPrice;\\n        }\\n\\n        uint256 diffBP = _refPrice > fastPrice ? _refPrice - fastPrice : fastPrice - _refPrice;\\n        diffBP = (diffBP * BP_DIVISOR) / _refPrice;\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBP is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        // 1. fastPrice\\n        // 2. fastprice > chainlink, false\\n        // 2. 1%\\n        // 3. fastPricechainlink/, fastPrice\\n\\n        if (favorFastPrice(market) && diffBP <= uint256(Storage().config.maxDeviationBP)) {\\n            return fastPrice;\\n        }\\n\\n        return comparePrices(_refPrice, fastPrice, _maximise);\\n    }\\n\\n    function comparePrices(uint256 price1, uint256 price2, bool maximize) private pure returns (uint256) {\\n        return maximize ? (price1 > price2 ? price1 : price2) : (price1 < price2 ? price1 : price2);\\n    }\\n\\n    function getChainPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 xxxUSD = _getChainPrice(market, _maximise);\\n        uint256 _USDTUSD = _getChainPrice(market, _maximise);\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    //==================================================================================================\\n    //================ private functions================================================================\\n    //==================================================================================================\\n    function _setPrice(uint16 market, uint256 _price) internal {\\n        // check if the market has a price feed\\n        if (Storage().priceFeeds[market] != address(0)) {\\n            uint256 refPrice = _getLatestPriceWithUSDT(market);\\n            uint256 fastPrice = Storage().prices[market];\\n\\n            (uint256 prevRefPrice, uint256 refTime, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) =\\n                _getPriceData(market);\\n\\n            if (prevRefPrice > 0) {\\n                // chainlink\\n                uint256 refDeltaAmount = refPrice > prevRefPrice ? refPrice - prevRefPrice : prevRefPrice - refPrice;\\n                // fastPrice\\n                uint256 fastDeltaAmount = fastPrice > _price ? fastPrice - _price : _price - fastPrice;\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (\\n                    refTime / Storage().config.priceDataInterval != block.timestamp / Storage().config.priceDataInterval\\n                ) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n                //\\n                cumulativeRefDelta = cumulativeRefDelta + (refDeltaAmount * CUMULATIVE_DELTA_PRECISION) / prevRefPrice;\\n                cumulativeFastDelta = cumulativeFastDelta + (fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) / fastPrice;\\n            }\\n\\n            if (\\n                cumulativeFastDelta > cumulativeRefDelta\\n                    && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n            ) {\\n                emit MaxCumulativeDeltaDiffExceeded(\\n                    market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta\\n                );\\n            }\\n\\n            _setPriceData(market, refPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            emit PriceData(market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n        }\\n\\n        Storage().prices[market] = _price;\\n        emit UpdatePrice(msg.sender, market, _price);\\n    }\\n\\n    function _setPriceData(uint16 _market, uint256 _refPrice, uint256 _cumulativeRefDelta, uint256 _cumulativeFastDelta)\\n        private\\n    {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(_cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA, \\\"FastPriceFeed: invalid cumulativeRefDelta\\\");\\n        require(_cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA, \\\"FastPriceFeed: invalid cumulativeFastDelta\\\");\\n\\n        Storage().priceData[_market] = PriceDataItem(\\n            uint160(_refPrice), uint32(block.timestamp), uint32(_cumulativeRefDelta), uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _getLatestPriceWithUSDT(uint16 market) internal view returns (uint256) {\\n        uint256 xxxUSD = _getLatestPrice(market);\\n        uint256 _USDTUSD = (IPriceFeed(Storage().USDT).latestAnswer()).toUint256();\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    function _getLatestPrice(uint16 market) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n        IPriceFeed _priceFeed = IPriceFeed(_feed);\\n        int256 _price = _priceFeed.latestAnswer();\\n        require(_price > 0, \\\"PriceFeed: invalid price\\\");\\n        return uint256(_price);\\n    }\\n\\n    function _getChainPrice(uint16 market, bool _maximise) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n\\n        uint256 _price = 0;\\n        uint80 _id = IPriceFeed(Storage().priceFeeds[market]).latestRound();\\n\\n        for (uint80 i = 0; i < Storage().config.sampleSpace; i++) {\\n            if (_id <= i) {\\n                break;\\n            }\\n            uint256 p;\\n\\n            if (i == 0) {\\n                int256 _p = IPriceFeed(Storage().priceFeeds[market]).latestAnswer();\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p,,,) = IPriceFeed(Storage().priceFeeds[market]).getRoundData(_id - i);\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            }\\n\\n            if (_price == 0) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (_maximise && p > _price) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (!_maximise && p < _price) {\\n                _price = p;\\n            }\\n        }\\n\\n        require(_price > 0, \\\"PriceFeed: could not fetch price\\\");\\n        uint256 _decimals = IPriceFeed(Storage().priceFeeds[market]).decimals();\\n        return (_price * PRICE_PRECISION) / (10 ** _decimals);\\n    }\\n\\n    function _getPriceData(uint16 market) internal view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = Storage().priceData[market];\\n        return (\\n            uint256(data.refPrice),\\n            uint256(data.refTime),\\n            uint256(data.cumulativeRefDelta),\\n            uint256(data.cumulativeFastDelta)\\n        );\\n    }\\n\\n    function favorFastPrice(uint16 market) internal view returns (bool) {\\n        (,, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = _getPriceData(market);\\n        if (\\n            cumulativeFastDelta > cumulativeRefDelta\\n                && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n        ) {\\n            // fast > chainlink, fast-chainlink >\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xad1f5ee47376eb63f8f7d4d7cf81a388db0131dd8009a6334140742d1f16bdc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523461002057610011610025565b612afb620000318239612afb90f35b61002b565b60405190565b600080fdfe60806040526004361015610013575b610750565b61001e6000356100bd565b80632e6e6ea9146100b85780633d58e05c146100b357806350c1b923146100ae57806364b6db53146100a957806367af1a03146100a4578063aa94bda81461009f578063cd5ba3d41461009a578063db61122514610095578063df66914e146100905763f224f69a0361000e5761071c565b6106e7565b6106b1565b61067e565b610582565b610365565b61031f565b6102be565b610240565b6101b1565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b61ffff1690565b6100e8816100d8565b036100ef57565b600080fd5b90503590610101826100df565b565b90565b61010f81610103565b0361011657565b600080fd5b9050359061012882610106565b565b151590565b6101388161012a565b0361013f57565b600080fd5b905035906101518261012f565b565b90916060828403126101895761018661016f84600085016100f4565b9361017d816020860161011b565b93604001610144565b90565b6100ce565b61019790610103565b9052565b91906101af9060006020850194019061018e565b565b346101e2576101de6101cd6101c7366004610153565b9161075a565b6101d56100c3565b9182918261019b565b0390f35b6100c9565b90602082820312610201576101fe916000016100f4565b90565b6100ce565b60018060a01b031690565b61021a90610206565b90565b61022690610211565b9052565b919061023e9060006020850194019061021d565b565b346102705761026c61025b6102563660046101e7565b6107e1565b6102636100c3565b9182918261022a565b0390f35b6100c9565b61027e81610211565b0361028557565b600080fd5b9050359061029782610275565b565b906020828203126102b3576102b09160000161028a565b90565b6100ce565b60000190565b346102ec576102d66102d1366004610299565b6108a2565b6102de6100c3565b806102e8816102b8565b0390f35b6100c9565b919060408382031261031a578061030e61031792600086016100f4565b93602001610144565b90565b6100ce565b346103505761034c61033b6103353660046102f1565b906108ad565b6103436100c3565b9182918261019b565b0390f35b6100c9565b600091031261036057565b6100ce565b3461039357610375366004610355565b61037d610c18565b6103856100c3565b8061038f816102b8565b0390f35b6100c9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906103c79061039d565b810190811060018060401b038211176103df57604052565b6103a7565b906103f76103f06100c3565b92836103bd565b565b60018060401b03811161040f5760208091020190565b6103a7565b600080fd5b9092919261042e610429826103f9565b6103e4565b938185526020808601920283019281841161046b57915b8383106104525750505050565b6020809161046084866100f4565b815201920191610445565b610414565b9080601f8301121561048e5781602061048b93359101610419565b90565b610398565b60018060401b0381116104a95760208091020190565b6103a7565b909291926104c36104be82610493565b6103e4565b938185526020808601920283019281841161050057915b8383106104e75750505050565b602080916104f5848661011b565b8152019201916104da565b610414565b9080601f8301121561052357816020610520933591016104ae565b90565b610398565b91909160408184031261057d57600081013560018060401b0381116105785783610553918301610470565b92602082013560018060401b038111610573576105709201610505565b90565b6100d3565b6100d3565b6100ce565b346105b15761059b610595366004610528565b90610dc6565b6105a36100c3565b806105ad816102b8565b0390f35b6100c9565b600080fd5b63ffffffff1690565b6105cd816105bb565b036105d457565b600080fd5b905035906105e6826105c4565b565b919060a08382031261065a576106539061060260a06103e4565b9361061082600083016105d9565b600086015261062282602083016105d9565b602086015261063482604083016105d9565b604086015261064682606083016105d9565b60608601526080016105d9565b6080830152565b6105b6565b9060a08282031261067957610676916000016105e8565b90565b6100ce565b346106ac5761069661069136600461065f565b610df3565b61069e6100c3565b806106a8816102b8565b0390f35b6100c9565b346106e2576106de6106cd6106c73660046102f1565b90610dfe565b6106d56100c3565b9182918261019b565b0390f35b6100c9565b34610717576106f7366004610355565b610713610702610e14565b61070a6100c3565b9182918261022a565b0390f35b6100c9565b3461074b5761073561072f366004610528565b90610e4b565b61073d6100c3565b80610747816102b8565b0390f35b6100c9565b600080fd5b600090565b9161077092610767610755565b50919091611048565b90565b600090565b90565b61078f61078a610794926100d8565b610778565b6100d8565b90565b906107a19061077b565b600052602052604060002090565b60001c90565b60018060a01b031690565b6107cc6107d1916107af565b6107b5565b90565b6107de90546107c0565b90565b610801610806916107f0610773565b5060026107fb61122f565b01610797565b6107d4565b90565b6108129061088c565b565b60001b90565b9061082b60018060a01b0391610814565b9181191691161790565b61084961084461084e92610206565b610778565b610206565b90565b61085a90610835565b90565b61086690610851565b90565b90565b9061088161087c6108889261085d565b610869565b825461081a565b9055565b6108a090600061089a61122f565b0161086c565b565b6108ab90610809565b565b906108c0916108ba610755565b50611290565b90565b6108cb610b77565b565b6108d760a06103e4565b90565b90565b6108f16108ec6108f6926108da565b610778565b6105bb565b90565b90610903906105bb565b9052565b90565b61091e61091961092392610907565b610778565b6105bb565b90565b90565b61093d61093861094292610926565b610778565b6105bb565b90565b90565b61095c61095761096192610945565b610778565b6105bb565b90565b90565b61097b61097661098092610964565b610778565b6105bb565b90565b61098d90516105bb565b90565b9061099f63ffffffff91610814565b9181191691161790565b6109bd6109b86109c2926105bb565b610778565b6105bb565b90565b90565b906109dd6109d86109e4926109a9565b6109c5565b8254610990565b9055565b60201b90565b90610a0063ffffffff60201b916109e8565b9181191691161790565b90610a1f610a1a610a26926109a9565b6109c5565b82546109ee565b9055565b60401b90565b90610a4263ffffffff60401b91610a2a565b9181191691161790565b90610a61610a5c610a68926109a9565b6109c5565b8254610a30565b9055565b60601b90565b90610a8463ffffffff60601b91610a6c565b9181191691161790565b90610aa3610a9e610aaa926109a9565b6109c5565b8254610a72565b9055565b60801b90565b90610ac663ffffffff60801b91610aae565b9181191691161790565b90610ae5610ae0610aec926109a9565b6109c5565b8254610ab4565b9055565b90610b6360806000610b6994610b13828201610b0d848801610983565b906109c8565b610b2b828201610b2560208801610983565b90610a0a565b610b43828201610b3d60408801610983565b90610a4c565b610b5b828201610b5560608801610983565b90610a8e565b019201610983565b90610ad0565b565b90610b7591610af0565b565b606461012c610e10603c90600192610b8d6108cd565b94610b97906108dd565b6000860190610ba5916108f9565b610bae9061090a565b6020850190610bbc916108f9565b610bc590610929565b6040840190610bd3916108f9565b610bdc90610948565b6060830190610bea916108f9565b610bf390610967565b6080820190610c01916108f9565b610c0961122f565b60010190610c1691610b6b565b565b610c206108c3565b565b90610c2c91610d42565b565b90565b610c45610c40610c4a92610c2e565b610778565b610103565b90565b6001610c599101610103565b90565b5190565b634e487b7160e01b600052603260045260246000fd5b5190565b90610c8482610c76565b811015610c95576020809102010190565b610c60565b610ca49051610103565b90565b90610cb182610c5c565b811015610cc2576020809102010190565b610c60565b610cd190516100d8565b90565b90610cde9061077b565b600052602052604060002090565b90610cf960001991610814565b9181191691161790565b610d17610d12610d1c92610103565b610778565b610103565b90565b90565b90610d37610d32610d3e92610d03565b610d1f565b8254610cec565b9055565b9190610d4e6000610c31565b5b80610d6a610d64610d5f87610c5c565b610103565b91610103565b1015610dc057610dbb90610db6610d8a610d85858490610c7a565b610c9a565b610db16005610d9761122f565b01610dab610da68a8790610ca7565b610cc7565b90610cd4565b610d22565b610c4d565b610d4f565b50509050565b90610dd091610c22565b565b610ddb90610ddd565b565b610df1906001610deb61122f565b01610b6b565b565b610dfc90610dd2565b565b90610e1191610e0b610755565b5061131c565b90565b610e1c610773565b50610e306000610e2a61122f565b016107d4565b90565b90610e3d91610e3f565b565b90610e499161133e565b565b90610e5591610e33565b565b90610e619061077b565b600052602052604060002090565b60a01c90565b63ffffffff1690565b610e8a610e8f91610e6f565b610e75565b90565b610e9c9054610e7e565b90565b610eb3610eae610eb8926105bb565b610778565b610103565b90565b90565b610eca610ecf916107af565b610ebb565b90565b610edc9054610ebe565b90565b60401c90565b610ef1610ef691610edf565b610e75565b90565b610f039054610ee5565b90565b634e487b7160e01b600052601160045260246000fd5b610f2b610f3191939293610103565b92610103565b8201809211610f3c57565b610f06565b60201c90565b610f53610f5891610f41565b610e75565b90565b610f659054610f47565b90565b610f77610f7d91939293610103565b92610103565b8203918211610f8857565b610f06565b90565b610fa4610f9f610fa992610f8d565b610778565b610103565b90565b610fb7612710610f90565b90565b610fc9610fcf91939293610103565b92610103565b91610fdb838202610103565b928184041490151715610fea57565b610f06565b634e487b7160e01b600052601260045260246000fd5b61101161101791610103565b91610103565b908115611022570490565b610fef565b611033611038916107af565b610e75565b90565b6110459054611027565b90565b9091611052610755565b5061107b6110766000611070600661106861122f565b018690610e57565b01610e92565b610e9f565b91611099611094600461108c61122f565b018390610cd4565b610ed2565b92426110d46110ce6110c9846110c36110be600060016110b761122f565b0101610ef9565b610e9f565b90610f1c565b610103565b91610103565b119081156111c8575b5080156111ad575b6111a757836110fc6110f685610103565b91610103565b1160001461118e5761113461112e611127611118878790610f68565b5b611121610fac565b90610fba565b8690611005565b916113b5565b9081611155575b5061114f5761114c9291909161143b565b90565b50905090565b905061118661118061117b6111766000600161116f61122f565b010161103b565b610e9f565b610103565b91610103565b11153861113b565b61113461112e6111276111a2868890610f68565b611119565b50505090565b50826111c26111bc6000610c31565b91610103565b146110e5565b90506112046111fe6111f942936111f36111ee600060016111e761122f565b0101610f5b565b610e9f565b90610f1c565b610103565b91610103565b11386110dd565b7f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490565b61123761120b565b90565b90565b61125161124c6112569261123a565b610778565b610103565b90565b61126e68327cb2734119d3b7a9601e1b61123d565b90565b90565b61128861128361128d92611271565b610778565b610103565b90565b906112af9061129d610755565b506112a9838290611901565b92611901565b816112dd6112d76112d26000196112cd6112c7611259565b91611274565b611005565b610103565b91610103565b106112ff576112f76112fc926112f1611259565b90611005565b610fba565b90565b6113146113199261130e611259565b90610fba565b611005565b90565b61133b91611328610755565b50611334828290611290565b9091611048565b90565b91909161134b6000610c31565b5b8061136761136161135c85610c5c565b610103565b91610103565b10156113aa576113a5906113a0611387611382858490610ca7565b610cc7565b61139a611395888590610c7a565b610c9a565b90611e94565b610c4d565b61134c565b50509050565b600090565b6113bd6113b0565b506113c78161231d565b9392509050826113df6113d983610103565b91610103565b1192836113f8575b5050506113f357600190565b600090565b61143292935061142261141161142c9361142793610f68565b94600561141c61122f565b01610cd4565b610ed2565b610103565b91610103565b113880806113e7565b91611444610755565b50600014611474578161145f61145983610103565b91610103565b1160001461146d57505b5b90565b9050611469565b8161148761148183610103565b91610103565b1060001461149657505b61146a565b9050611491565b6114b16114ac6114b692610c2e565b610778565b610206565b90565b6114c29061149d565b90565b60209181520190565b60007f5072696365466565643a20696e76616c69642070726963652066656564000000910152565b611503601d6020926114c5565b61150c816114ce565b0190565b61152690602081019060008183039101526114f6565b90565b1561153057565b6115386100c3565b62461bcd60e51b81528061154e60048201611510565b0390fd5b61155b90610835565b90565b61156790611552565b90565b61157390610851565b90565b60e01b90565b60018060501b031690565b6115908161157c565b0361159757565b600080fd5b905051906115a982611587565b565b906020828203126115c5576115c29160000161159c565b90565b6100ce565b6115d26100c3565b3d6000823e3d90fd5b6115ef6115ea6115f492610c2e565b610778565b61157c565b90565b6001611603910161157c565b90565b60801c90565b61161861161d91611606565b610e75565b90565b61162a905461160c565b90565b61164161163c611646926105bb565b610778565b61157c565b90565b61165561165b9161157c565b9161157c565b90039060018060501b03821161166d57565b610f06565b90565b61167e81611672565b0361168557565b600080fd5b9050519061169782611675565b565b905051906116a682610106565b565b919060a0838203126116fa576116c1816000850161159c565b926116cf826020830161168a565b926116f76116e08460408501611699565b936116ee8160608601611699565b9360800161159c565b90565b6100ce565b6117089061157c565b9052565b9190611720906000602085019401906116ff565b565b61173661173161173b92610c2e565b610778565b611672565b90565b60007f5072696365466565643a20696e76616c69642070726963650000000000000000910152565b61177360186020926114c5565b61177c8161173e565b0190565b6117969060208101906000818303910152611766565b90565b156117a057565b6117a86100c3565b62461bcd60e51b8152806117be60048201611780565b0390fd5b6117d66117d16117db92611672565b610778565b610103565b90565b906020828203126117f8576117f59160000161168a565b90565b6100ce565b60007f5072696365466565643a20636f756c64206e6f74206665746368207072696365910152565b611831602080926114c5565b61183a816117fd565b0190565b6118549060208101906000818303910152611825565b90565b1561185e57565b6118666100c3565b62461bcd60e51b81528061187c6004820161183e565b0390fd5b60ff1690565b61188f81611880565b0361189657565b600080fd5b905051906118a882611886565b565b906020828203126118c4576118c19160000161189b565b90565b6100ce565b6118dd6118d86118e292611880565b610778565b610103565b90565b6118ee90610103565b604d81116118fc57600a0a90565b610f06565b919061190b610755565b5061194e61192c611927600261191f61122f565b018690610797565b6107d4565b61194761194161193c60006114b9565b610211565b91610211565b1415611529565b6119586000610c31565b6119a0602061198a61198561198061197b600261197361122f565b018a90610797565b6107d4565b61155e565b61156a565b63668a0f02906119986100c3565b938492611576565b825281806119b0600482016102b8565b03915afa908115611dbb57600091611d8d575b506119ce60006115db565b5b806119f76119f16119ec600060016119e561122f565b0101611620565b61162d565b9161157c565b1015611d715781611a10611a0a8361157c565b9161157c565b1115611c7f57611a1e610755565b5080611a33611a2d60006115db565b9161157c565b14600014611ba257611a836020611a6d611a68611a63611a5e6002611a5661122f565b018c90610797565b6107d4565b61155e565b61156a565b6350d25bcd90611a7b6100c3565b938492611576565b82528180611a93600482016102b8565b03915afa8015611b9d57611acc91600091611b6f575b50611ac781611ac1611abb6000611722565b91611672565b13611799565b6117c2565b5b83611ae1611adb6000610c31565b91610103565b14611b63578480611b49575b611b3d57611afb851561012a565b80611b23575b611b16575b50611b11905b6115f7565b6119cf565b611b119193509290611b06565b5080611b37611b3186610103565b91610103565b10611b01565b611b1191935092611b0c565b5080611b5d611b5786610103565b91610103565b11611aed565b611b1191935092611b0c565b611b90915060203d8111611b96575b611b8881836103bd565b8101906117de565b38611aa9565b503d611b7e565b6115ca565b611c0860a0611bd4611bcf611bca611bc56002611bbd61122f565b018c90610797565b6107d4565b61155e565b61156a565b639a6fc8f590611bfd611be8878790611649565b92611bf16100c3565b95869485938493611576565b83526004830161170c565b03915afa8015611c7a57611c4491600080929050611c49575b50611c3f81611c39611c336000611722565b91611672565b13611799565b6117c2565b611acd565b611c6a915060a03d8111611c73575b611c6281836103bd565b8101906116a8565b50505090611c21565b503d611c58565b6115ca565b505090506020611cd3611cce611cc9611cc4611ce996975b611cb487611cae611ca86000610c31565b91610103565b11611857565b6002611cbe61122f565b01610797565b6107d4565b61155e565b61156a565b63313ce56790611ce16100c3565b948592611576565b82528180611cf9600482016102b8565b03915afa918215611d6c57611d2f611d20611d3b94611d3593600091611d3e575b506118c9565b92611d29611259565b90610fba565b916118e5565b90611005565b90565b611d5f915060203d8111611d65575b611d5781836103bd565b8101906118aa565b38611d1a565b503d611d4d565b6115ca565b505090506020611cd3611cce611cc9611cc4611ce99697611c97565b611dae915060203d8111611db4575b611da681836103bd565b8101906115ab565b386119c3565b503d611d9c565b6115ca565b60601c90565b611dd2611dd791611dc0565b610e75565b90565b611de49054611dc6565b90565b90565b611dfe611df9611e0392611de7565b610778565b610103565b90565b611e1262989680611dea565b90565b611e1e906100d8565b9052565b90959492611e6e94611e5d611e6792611e53608096611e4960a088019c6000890190611e15565b602087019061018e565b604085019061018e565b606083019061018e565b019061018e565b565b916020611e92929493611e8b6040820196600083019061021d565b019061018e565b565b90611eb2611ead6002611ea561122f565b018490610797565b6107d4565b611ecd611ec7611ec260006114b9565b610211565b91610211565b03611f38575b611ef181611eec6004611ee461122f565b018590610cd4565b610d22565b339190611f1e7ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665149261077b565b92611f33611f2a6100c3565b92839283611e70565b0390a2565b611f41826123b5565b611f5e611f596004611f5161122f565b018590610cd4565b610ed2565b611f678461231d565b94929190949180611f81611f7b6000610c31565b91610103565b1161207e575b505080611ff191611fa0611f9a87610103565b91610103565b118061203e575b611ff9575b611fba878487908492612872565b869293947f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f95611fe86100c3565b95869586611e22565b0390a1611ed3565b868385916120368885907f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f439561202d6100c3565b95869586611e22565b0390a1611fac565b5061204a818690610f68565b61207861207261206d612068600561206061122f565b018c90610cd4565b610ed2565b610103565b91610103565b11611fa7565b839591929561209561208f83610103565b91610103565b116000146121e2576120a8848290610f68565b5b91856120bd6120b78a610103565b91610103565b116000146121cf576120f96120d3878a90610f68565b5b946120f36120ee600060016120e761122f565b0101611dda565b610e9f565b90611005565b61213261212c6121274261212161211c6000600161211561122f565b0101611dda565b610e9f565b90611005565b610103565b91610103565b0361218f575b61217b61216b61218894612165611ff19795612160612182969361215a611e06565b90610fba565b611005565b90610f1c565b9792612175611e06565b90610fba565b8690611005565b90610f1c565b9038611f87565b509450611ff19161218261217b61216b612188946121656121b06000610c31565b9a6121606121be6000610c31565b9c9650509597505094505050612138565b6120f96121dd898890610f68565b6120d4565b6121ed818590610f68565b6120a9565b60018060a01b031690565b61220961220e916107af565b6121f2565b90565b61221b90546121fd565b90565b9061222890610206565b9052565b60c01c90565b61223e6122439161222c565b610e75565b90565b6122509054612232565b90565b61225f612264916100bd565b610e75565b90565b6122719054612253565b90565b61227e60806103e4565b90565b906122e66122dd6000612292612274565b946122a96122a1838301612211565b83880161221e565b6122c06122b7838301610e92565b602088016108f9565b6122d76122ce838301612246565b604088016108f9565b01612267565b606084016108f9565b565b6122f190612281565b90565b6122fe9051610206565b90565b61231561231061231a92610206565b610778565b610103565b90565b61235861235d9161232c610755565b50612335610755565b5061233e610755565b50612347610755565b50600661235261122f565b01610e57565b6122e8565b61237161236c600083016122f4565b612301565b61238561238060208401610983565b610e9f565b926123ae6123a960606123a261239d60408801610983565b610e9f565b9501610983565b610e9f565b9193929190565b6123c7906123c1610755565b50612959565b61240560206123ef6123ea6123e560006123df61122f565b016107d4565b61155e565b61156a565b6350d25bcd906123fd6100c3565b938492611576565b82528180612415600482016102b8565b03915afa80156124cc576124319160009161249e575b50612a71565b8161245f61245961245460001961244f612449611259565b91611274565b611005565b610103565b91610103565b106124815761247961247e92612473611259565b90611005565b610fba565b90565b61249661249b92612490611259565b90610fba565b611005565b90565b6124bf915060203d81116124c5575b6124b781836103bd565b8101906117de565b3861242b565b503d6124ad565b6115ca565b6124e060018060a01b03612301565b90565b60007f466173745072696365466565643a20696e76616c696420726566507269636500910152565b612518601f6020926114c5565b612521816124e3565b0190565b61253b906020810190600081830391015261250b565b90565b1561254557565b61254d6100c3565b62461bcd60e51b81528061256360048201612525565b0390fd5b61257463ffffffff610e9f565b90565b60207f6552656644656c74610000000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6125d260296040926114c5565b6125db81612577565b0190565b6125f590602081019060008183039101526125c5565b90565b156125ff57565b6126076100c3565b62461bcd60e51b81528061261d600482016125df565b0390fd5b61262e63ffffffff610e9f565b90565b60207f654661737444656c746100000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b61268c602a6040926114c5565b61269581612631565b0190565b6126af906020810190600081830391015261267f565b90565b156126b957565b6126c16100c3565b62461bcd60e51b8152806126d760048201612699565b0390fd5b6126ef6126ea6126f492610103565b610778565b610206565b90565b61270b61270661271092610103565b610778565b6105bb565b90565b61271d60806103e4565b90565b90565b9061273861273361273f92610835565b612720565b825461081a565b9055565b60a01b90565b9061275b63ffffffff60a01b91612743565b9181191691161790565b9061277a612775612781926109a9565b6109c5565b8254612749565b9055565b60c01b90565b9061279d63ffffffff60c01b91612785565b9181191691161790565b906127bc6127b76127c3926109a9565b6109c5565b825461278b565b9055565b906127d963ffffffff60e01b91611576565b9181191691161790565b906127f86127f36127ff926109a9565b6109c5565b82546127c7565b9055565b9061285e60606000612864946128268282016128208488016122f4565b90612723565b61283e82820161283860208801610983565b90612765565b61285682820161285060408801610983565b906127a7565b019201610983565b906127e3565b565b9061287091612803565b565b61294261295794936129396128f2612952956128a7816128a161289b6128966124d1565b610103565b91610103565b1061253e565b6128ca846128c46128be6128b9612567565b610103565b91610103565b106125f8565b6128ed886128e76128e16128dc612621565b610103565b91610103565b106126b2565b6126db565b9561293061291161290b612905426126f7565b956126f7565b926126f7565b9361292761291d612713565b9960008b0161221e565b602089016108f9565b604087016108f9565b606085016108f9565b600661294c61122f565b01610e57565b612866565b565b60206129b96129b46129896129846129cf95612973610755565b50600261297e61122f565b01610797565b6107d4565b6129af816129a86129a261299d60006114b9565b610211565b91610211565b1415611529565b61155e565b61156a565b6350d25bcd906129c76100c3565b938492611576565b825281806129df600482016102b8565b03915afa8015612a4957612a1891600091612a1b575b50612a1381612a0d612a076000611722565b91611672565b13611799565b6117c2565b90565b612a3c915060203d8111612a42575b612a3481836103bd565b8101906117de565b386129f5565b503d612a2a565b6115ca565b612a5790611672565b9052565b9190612a6f90600060208501940190612a4e565b565b612a79610755565b5080612a8e612a886000611722565b91611672565b12612a9f57612a9c906117c2565b90565b612ac190612aab6100c3565b918291635467221960e11b835260048301612a5b565b0390fdfea2646970667358221220693442d128676a7883912b8acdfb556b1c7ff85cfba91065715647353b70902564736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361015610013575b610750565b61001e6000356100bd565b80632e6e6ea9146100b85780633d58e05c146100b357806350c1b923146100ae57806364b6db53146100a957806367af1a03146100a4578063aa94bda81461009f578063cd5ba3d41461009a578063db61122514610095578063df66914e146100905763f224f69a0361000e5761071c565b6106e7565b6106b1565b61067e565b610582565b610365565b61031f565b6102be565b610240565b6101b1565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b61ffff1690565b6100e8816100d8565b036100ef57565b600080fd5b90503590610101826100df565b565b90565b61010f81610103565b0361011657565b600080fd5b9050359061012882610106565b565b151590565b6101388161012a565b0361013f57565b600080fd5b905035906101518261012f565b565b90916060828403126101895761018661016f84600085016100f4565b9361017d816020860161011b565b93604001610144565b90565b6100ce565b61019790610103565b9052565b91906101af9060006020850194019061018e565b565b346101e2576101de6101cd6101c7366004610153565b9161075a565b6101d56100c3565b9182918261019b565b0390f35b6100c9565b90602082820312610201576101fe916000016100f4565b90565b6100ce565b60018060a01b031690565b61021a90610206565b90565b61022690610211565b9052565b919061023e9060006020850194019061021d565b565b346102705761026c61025b6102563660046101e7565b6107e1565b6102636100c3565b9182918261022a565b0390f35b6100c9565b61027e81610211565b0361028557565b600080fd5b9050359061029782610275565b565b906020828203126102b3576102b09160000161028a565b90565b6100ce565b60000190565b346102ec576102d66102d1366004610299565b6108a2565b6102de6100c3565b806102e8816102b8565b0390f35b6100c9565b919060408382031261031a578061030e61031792600086016100f4565b93602001610144565b90565b6100ce565b346103505761034c61033b6103353660046102f1565b906108ad565b6103436100c3565b9182918261019b565b0390f35b6100c9565b600091031261036057565b6100ce565b3461039357610375366004610355565b61037d610c18565b6103856100c3565b8061038f816102b8565b0390f35b6100c9565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906103c79061039d565b810190811060018060401b038211176103df57604052565b6103a7565b906103f76103f06100c3565b92836103bd565b565b60018060401b03811161040f5760208091020190565b6103a7565b600080fd5b9092919261042e610429826103f9565b6103e4565b938185526020808601920283019281841161046b57915b8383106104525750505050565b6020809161046084866100f4565b815201920191610445565b610414565b9080601f8301121561048e5781602061048b93359101610419565b90565b610398565b60018060401b0381116104a95760208091020190565b6103a7565b909291926104c36104be82610493565b6103e4565b938185526020808601920283019281841161050057915b8383106104e75750505050565b602080916104f5848661011b565b8152019201916104da565b610414565b9080601f8301121561052357816020610520933591016104ae565b90565b610398565b91909160408184031261057d57600081013560018060401b0381116105785783610553918301610470565b92602082013560018060401b038111610573576105709201610505565b90565b6100d3565b6100d3565b6100ce565b346105b15761059b610595366004610528565b90610dc6565b6105a36100c3565b806105ad816102b8565b0390f35b6100c9565b600080fd5b63ffffffff1690565b6105cd816105bb565b036105d457565b600080fd5b905035906105e6826105c4565b565b919060a08382031261065a576106539061060260a06103e4565b9361061082600083016105d9565b600086015261062282602083016105d9565b602086015261063482604083016105d9565b604086015261064682606083016105d9565b60608601526080016105d9565b6080830152565b6105b6565b9060a08282031261067957610676916000016105e8565b90565b6100ce565b346106ac5761069661069136600461065f565b610df3565b61069e6100c3565b806106a8816102b8565b0390f35b6100c9565b346106e2576106de6106cd6106c73660046102f1565b90610dfe565b6106d56100c3565b9182918261019b565b0390f35b6100c9565b34610717576106f7366004610355565b610713610702610e14565b61070a6100c3565b9182918261022a565b0390f35b6100c9565b3461074b5761073561072f366004610528565b90610e4b565b61073d6100c3565b80610747816102b8565b0390f35b6100c9565b600080fd5b600090565b9161077092610767610755565b50919091611048565b90565b600090565b90565b61078f61078a610794926100d8565b610778565b6100d8565b90565b906107a19061077b565b600052602052604060002090565b60001c90565b60018060a01b031690565b6107cc6107d1916107af565b6107b5565b90565b6107de90546107c0565b90565b610801610806916107f0610773565b5060026107fb61122f565b01610797565b6107d4565b90565b6108129061088c565b565b60001b90565b9061082b60018060a01b0391610814565b9181191691161790565b61084961084461084e92610206565b610778565b610206565b90565b61085a90610835565b90565b61086690610851565b90565b90565b9061088161087c6108889261085d565b610869565b825461081a565b9055565b6108a090600061089a61122f565b0161086c565b565b6108ab90610809565b565b906108c0916108ba610755565b50611290565b90565b6108cb610b77565b565b6108d760a06103e4565b90565b90565b6108f16108ec6108f6926108da565b610778565b6105bb565b90565b90610903906105bb565b9052565b90565b61091e61091961092392610907565b610778565b6105bb565b90565b90565b61093d61093861094292610926565b610778565b6105bb565b90565b90565b61095c61095761096192610945565b610778565b6105bb565b90565b90565b61097b61097661098092610964565b610778565b6105bb565b90565b61098d90516105bb565b90565b9061099f63ffffffff91610814565b9181191691161790565b6109bd6109b86109c2926105bb565b610778565b6105bb565b90565b90565b906109dd6109d86109e4926109a9565b6109c5565b8254610990565b9055565b60201b90565b90610a0063ffffffff60201b916109e8565b9181191691161790565b90610a1f610a1a610a26926109a9565b6109c5565b82546109ee565b9055565b60401b90565b90610a4263ffffffff60401b91610a2a565b9181191691161790565b90610a61610a5c610a68926109a9565b6109c5565b8254610a30565b9055565b60601b90565b90610a8463ffffffff60601b91610a6c565b9181191691161790565b90610aa3610a9e610aaa926109a9565b6109c5565b8254610a72565b9055565b60801b90565b90610ac663ffffffff60801b91610aae565b9181191691161790565b90610ae5610ae0610aec926109a9565b6109c5565b8254610ab4565b9055565b90610b6360806000610b6994610b13828201610b0d848801610983565b906109c8565b610b2b828201610b2560208801610983565b90610a0a565b610b43828201610b3d60408801610983565b90610a4c565b610b5b828201610b5560608801610983565b90610a8e565b019201610983565b90610ad0565b565b90610b7591610af0565b565b606461012c610e10603c90600192610b8d6108cd565b94610b97906108dd565b6000860190610ba5916108f9565b610bae9061090a565b6020850190610bbc916108f9565b610bc590610929565b6040840190610bd3916108f9565b610bdc90610948565b6060830190610bea916108f9565b610bf390610967565b6080820190610c01916108f9565b610c0961122f565b60010190610c1691610b6b565b565b610c206108c3565b565b90610c2c91610d42565b565b90565b610c45610c40610c4a92610c2e565b610778565b610103565b90565b6001610c599101610103565b90565b5190565b634e487b7160e01b600052603260045260246000fd5b5190565b90610c8482610c76565b811015610c95576020809102010190565b610c60565b610ca49051610103565b90565b90610cb182610c5c565b811015610cc2576020809102010190565b610c60565b610cd190516100d8565b90565b90610cde9061077b565b600052602052604060002090565b90610cf960001991610814565b9181191691161790565b610d17610d12610d1c92610103565b610778565b610103565b90565b90565b90610d37610d32610d3e92610d03565b610d1f565b8254610cec565b9055565b9190610d4e6000610c31565b5b80610d6a610d64610d5f87610c5c565b610103565b91610103565b1015610dc057610dbb90610db6610d8a610d85858490610c7a565b610c9a565b610db16005610d9761122f565b01610dab610da68a8790610ca7565b610cc7565b90610cd4565b610d22565b610c4d565b610d4f565b50509050565b90610dd091610c22565b565b610ddb90610ddd565b565b610df1906001610deb61122f565b01610b6b565b565b610dfc90610dd2565b565b90610e1191610e0b610755565b5061131c565b90565b610e1c610773565b50610e306000610e2a61122f565b016107d4565b90565b90610e3d91610e3f565b565b90610e499161133e565b565b90610e5591610e33565b565b90610e619061077b565b600052602052604060002090565b60a01c90565b63ffffffff1690565b610e8a610e8f91610e6f565b610e75565b90565b610e9c9054610e7e565b90565b610eb3610eae610eb8926105bb565b610778565b610103565b90565b90565b610eca610ecf916107af565b610ebb565b90565b610edc9054610ebe565b90565b60401c90565b610ef1610ef691610edf565b610e75565b90565b610f039054610ee5565b90565b634e487b7160e01b600052601160045260246000fd5b610f2b610f3191939293610103565b92610103565b8201809211610f3c57565b610f06565b60201c90565b610f53610f5891610f41565b610e75565b90565b610f659054610f47565b90565b610f77610f7d91939293610103565b92610103565b8203918211610f8857565b610f06565b90565b610fa4610f9f610fa992610f8d565b610778565b610103565b90565b610fb7612710610f90565b90565b610fc9610fcf91939293610103565b92610103565b91610fdb838202610103565b928184041490151715610fea57565b610f06565b634e487b7160e01b600052601260045260246000fd5b61101161101791610103565b91610103565b908115611022570490565b610fef565b611033611038916107af565b610e75565b90565b6110459054611027565b90565b9091611052610755565b5061107b6110766000611070600661106861122f565b018690610e57565b01610e92565b610e9f565b91611099611094600461108c61122f565b018390610cd4565b610ed2565b92426110d46110ce6110c9846110c36110be600060016110b761122f565b0101610ef9565b610e9f565b90610f1c565b610103565b91610103565b119081156111c8575b5080156111ad575b6111a757836110fc6110f685610103565b91610103565b1160001461118e5761113461112e611127611118878790610f68565b5b611121610fac565b90610fba565b8690611005565b916113b5565b9081611155575b5061114f5761114c9291909161143b565b90565b50905090565b905061118661118061117b6111766000600161116f61122f565b010161103b565b610e9f565b610103565b91610103565b11153861113b565b61113461112e6111276111a2868890610f68565b611119565b50505090565b50826111c26111bc6000610c31565b91610103565b146110e5565b90506112046111fe6111f942936111f36111ee600060016111e761122f565b0101610f5b565b610e9f565b90610f1c565b610103565b91610103565b11386110dd565b7f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490565b61123761120b565b90565b90565b61125161124c6112569261123a565b610778565b610103565b90565b61126e68327cb2734119d3b7a9601e1b61123d565b90565b90565b61128861128361128d92611271565b610778565b610103565b90565b906112af9061129d610755565b506112a9838290611901565b92611901565b816112dd6112d76112d26000196112cd6112c7611259565b91611274565b611005565b610103565b91610103565b106112ff576112f76112fc926112f1611259565b90611005565b610fba565b90565b6113146113199261130e611259565b90610fba565b611005565b90565b61133b91611328610755565b50611334828290611290565b9091611048565b90565b91909161134b6000610c31565b5b8061136761136161135c85610c5c565b610103565b91610103565b10156113aa576113a5906113a0611387611382858490610ca7565b610cc7565b61139a611395888590610c7a565b610c9a565b90611e94565b610c4d565b61134c565b50509050565b600090565b6113bd6113b0565b506113c78161231d565b9392509050826113df6113d983610103565b91610103565b1192836113f8575b5050506113f357600190565b600090565b61143292935061142261141161142c9361142793610f68565b94600561141c61122f565b01610cd4565b610ed2565b610103565b91610103565b113880806113e7565b91611444610755565b50600014611474578161145f61145983610103565b91610103565b1160001461146d57505b5b90565b9050611469565b8161148761148183610103565b91610103565b1060001461149657505b61146a565b9050611491565b6114b16114ac6114b692610c2e565b610778565b610206565b90565b6114c29061149d565b90565b60209181520190565b60007f5072696365466565643a20696e76616c69642070726963652066656564000000910152565b611503601d6020926114c5565b61150c816114ce565b0190565b61152690602081019060008183039101526114f6565b90565b1561153057565b6115386100c3565b62461bcd60e51b81528061154e60048201611510565b0390fd5b61155b90610835565b90565b61156790611552565b90565b61157390610851565b90565b60e01b90565b60018060501b031690565b6115908161157c565b0361159757565b600080fd5b905051906115a982611587565b565b906020828203126115c5576115c29160000161159c565b90565b6100ce565b6115d26100c3565b3d6000823e3d90fd5b6115ef6115ea6115f492610c2e565b610778565b61157c565b90565b6001611603910161157c565b90565b60801c90565b61161861161d91611606565b610e75565b90565b61162a905461160c565b90565b61164161163c611646926105bb565b610778565b61157c565b90565b61165561165b9161157c565b9161157c565b90039060018060501b03821161166d57565b610f06565b90565b61167e81611672565b0361168557565b600080fd5b9050519061169782611675565b565b905051906116a682610106565b565b919060a0838203126116fa576116c1816000850161159c565b926116cf826020830161168a565b926116f76116e08460408501611699565b936116ee8160608601611699565b9360800161159c565b90565b6100ce565b6117089061157c565b9052565b9190611720906000602085019401906116ff565b565b61173661173161173b92610c2e565b610778565b611672565b90565b60007f5072696365466565643a20696e76616c69642070726963650000000000000000910152565b61177360186020926114c5565b61177c8161173e565b0190565b6117969060208101906000818303910152611766565b90565b156117a057565b6117a86100c3565b62461bcd60e51b8152806117be60048201611780565b0390fd5b6117d66117d16117db92611672565b610778565b610103565b90565b906020828203126117f8576117f59160000161168a565b90565b6100ce565b60007f5072696365466565643a20636f756c64206e6f74206665746368207072696365910152565b611831602080926114c5565b61183a816117fd565b0190565b6118549060208101906000818303910152611825565b90565b1561185e57565b6118666100c3565b62461bcd60e51b81528061187c6004820161183e565b0390fd5b60ff1690565b61188f81611880565b0361189657565b600080fd5b905051906118a882611886565b565b906020828203126118c4576118c19160000161189b565b90565b6100ce565b6118dd6118d86118e292611880565b610778565b610103565b90565b6118ee90610103565b604d81116118fc57600a0a90565b610f06565b919061190b610755565b5061194e61192c611927600261191f61122f565b018690610797565b6107d4565b61194761194161193c60006114b9565b610211565b91610211565b1415611529565b6119586000610c31565b6119a0602061198a61198561198061197b600261197361122f565b018a90610797565b6107d4565b61155e565b61156a565b63668a0f02906119986100c3565b938492611576565b825281806119b0600482016102b8565b03915afa908115611dbb57600091611d8d575b506119ce60006115db565b5b806119f76119f16119ec600060016119e561122f565b0101611620565b61162d565b9161157c565b1015611d715781611a10611a0a8361157c565b9161157c565b1115611c7f57611a1e610755565b5080611a33611a2d60006115db565b9161157c565b14600014611ba257611a836020611a6d611a68611a63611a5e6002611a5661122f565b018c90610797565b6107d4565b61155e565b61156a565b6350d25bcd90611a7b6100c3565b938492611576565b82528180611a93600482016102b8565b03915afa8015611b9d57611acc91600091611b6f575b50611ac781611ac1611abb6000611722565b91611672565b13611799565b6117c2565b5b83611ae1611adb6000610c31565b91610103565b14611b63578480611b49575b611b3d57611afb851561012a565b80611b23575b611b16575b50611b11905b6115f7565b6119cf565b611b119193509290611b06565b5080611b37611b3186610103565b91610103565b10611b01565b611b1191935092611b0c565b5080611b5d611b5786610103565b91610103565b11611aed565b611b1191935092611b0c565b611b90915060203d8111611b96575b611b8881836103bd565b8101906117de565b38611aa9565b503d611b7e565b6115ca565b611c0860a0611bd4611bcf611bca611bc56002611bbd61122f565b018c90610797565b6107d4565b61155e565b61156a565b639a6fc8f590611bfd611be8878790611649565b92611bf16100c3565b95869485938493611576565b83526004830161170c565b03915afa8015611c7a57611c4491600080929050611c49575b50611c3f81611c39611c336000611722565b91611672565b13611799565b6117c2565b611acd565b611c6a915060a03d8111611c73575b611c6281836103bd565b8101906116a8565b50505090611c21565b503d611c58565b6115ca565b505090506020611cd3611cce611cc9611cc4611ce996975b611cb487611cae611ca86000610c31565b91610103565b11611857565b6002611cbe61122f565b01610797565b6107d4565b61155e565b61156a565b63313ce56790611ce16100c3565b948592611576565b82528180611cf9600482016102b8565b03915afa918215611d6c57611d2f611d20611d3b94611d3593600091611d3e575b506118c9565b92611d29611259565b90610fba565b916118e5565b90611005565b90565b611d5f915060203d8111611d65575b611d5781836103bd565b8101906118aa565b38611d1a565b503d611d4d565b6115ca565b505090506020611cd3611cce611cc9611cc4611ce99697611c97565b611dae915060203d8111611db4575b611da681836103bd565b8101906115ab565b386119c3565b503d611d9c565b6115ca565b60601c90565b611dd2611dd791611dc0565b610e75565b90565b611de49054611dc6565b90565b90565b611dfe611df9611e0392611de7565b610778565b610103565b90565b611e1262989680611dea565b90565b611e1e906100d8565b9052565b90959492611e6e94611e5d611e6792611e53608096611e4960a088019c6000890190611e15565b602087019061018e565b604085019061018e565b606083019061018e565b019061018e565b565b916020611e92929493611e8b6040820196600083019061021d565b019061018e565b565b90611eb2611ead6002611ea561122f565b018490610797565b6107d4565b611ecd611ec7611ec260006114b9565b610211565b91610211565b03611f38575b611ef181611eec6004611ee461122f565b018590610cd4565b610d22565b339190611f1e7ff653c98010ec108e873f9d5638c10569732da12002329d3774f0d71d8e8665149261077b565b92611f33611f2a6100c3565b92839283611e70565b0390a2565b611f41826123b5565b611f5e611f596004611f5161122f565b018590610cd4565b610ed2565b611f678461231d565b94929190949180611f81611f7b6000610c31565b91610103565b1161207e575b505080611ff191611fa0611f9a87610103565b91610103565b118061203e575b611ff9575b611fba878487908492612872565b869293947f42c806f38e7c76d89b3ad48a1519c8ba45071b5c990c34328b7f97e342781c1f95611fe86100c3565b95869586611e22565b0390a1611ed3565b868385916120368885907f47cda1c6d4dcb5355efae6dfde16ddf80dbe6f35912baa2068348a0fd49f5f439561202d6100c3565b95869586611e22565b0390a1611fac565b5061204a818690610f68565b61207861207261206d612068600561206061122f565b018c90610cd4565b610ed2565b610103565b91610103565b11611fa7565b839591929561209561208f83610103565b91610103565b116000146121e2576120a8848290610f68565b5b91856120bd6120b78a610103565b91610103565b116000146121cf576120f96120d3878a90610f68565b5b946120f36120ee600060016120e761122f565b0101611dda565b610e9f565b90611005565b61213261212c6121274261212161211c6000600161211561122f565b0101611dda565b610e9f565b90611005565b610103565b91610103565b0361218f575b61217b61216b61218894612165611ff19795612160612182969361215a611e06565b90610fba565b611005565b90610f1c565b9792612175611e06565b90610fba565b8690611005565b90610f1c565b9038611f87565b509450611ff19161218261217b61216b612188946121656121b06000610c31565b9a6121606121be6000610c31565b9c9650509597505094505050612138565b6120f96121dd898890610f68565b6120d4565b6121ed818590610f68565b6120a9565b60018060a01b031690565b61220961220e916107af565b6121f2565b90565b61221b90546121fd565b90565b9061222890610206565b9052565b60c01c90565b61223e6122439161222c565b610e75565b90565b6122509054612232565b90565b61225f612264916100bd565b610e75565b90565b6122719054612253565b90565b61227e60806103e4565b90565b906122e66122dd6000612292612274565b946122a96122a1838301612211565b83880161221e565b6122c06122b7838301610e92565b602088016108f9565b6122d76122ce838301612246565b604088016108f9565b01612267565b606084016108f9565b565b6122f190612281565b90565b6122fe9051610206565b90565b61231561231061231a92610206565b610778565b610103565b90565b61235861235d9161232c610755565b50612335610755565b5061233e610755565b50612347610755565b50600661235261122f565b01610e57565b6122e8565b61237161236c600083016122f4565b612301565b61238561238060208401610983565b610e9f565b926123ae6123a960606123a261239d60408801610983565b610e9f565b9501610983565b610e9f565b9193929190565b6123c7906123c1610755565b50612959565b61240560206123ef6123ea6123e560006123df61122f565b016107d4565b61155e565b61156a565b6350d25bcd906123fd6100c3565b938492611576565b82528180612415600482016102b8565b03915afa80156124cc576124319160009161249e575b50612a71565b8161245f61245961245460001961244f612449611259565b91611274565b611005565b610103565b91610103565b106124815761247961247e92612473611259565b90611005565b610fba565b90565b61249661249b92612490611259565b90610fba565b611005565b90565b6124bf915060203d81116124c5575b6124b781836103bd565b8101906117de565b3861242b565b503d6124ad565b6115ca565b6124e060018060a01b03612301565b90565b60007f466173745072696365466565643a20696e76616c696420726566507269636500910152565b612518601f6020926114c5565b612521816124e3565b0190565b61253b906020810190600081830391015261250b565b90565b1561254557565b61254d6100c3565b62461bcd60e51b81528061256360048201612525565b0390fd5b61257463ffffffff610e9f565b90565b60207f6552656644656c74610000000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b6125d260296040926114c5565b6125db81612577565b0190565b6125f590602081019060008183039101526125c5565b90565b156125ff57565b6126076100c3565b62461bcd60e51b81528061261d600482016125df565b0390fd5b61262e63ffffffff610e9f565b90565b60207f654661737444656c746100000000000000000000000000000000000000000000917f466173745072696365466565643a20696e76616c69642063756d756c6174697660008201520152565b61268c602a6040926114c5565b61269581612631565b0190565b6126af906020810190600081830391015261267f565b90565b156126b957565b6126c16100c3565b62461bcd60e51b8152806126d760048201612699565b0390fd5b6126ef6126ea6126f492610103565b610778565b610206565b90565b61270b61270661271092610103565b610778565b6105bb565b90565b61271d60806103e4565b90565b90565b9061273861273361273f92610835565b612720565b825461081a565b9055565b60a01b90565b9061275b63ffffffff60a01b91612743565b9181191691161790565b9061277a612775612781926109a9565b6109c5565b8254612749565b9055565b60c01b90565b9061279d63ffffffff60c01b91612785565b9181191691161790565b906127bc6127b76127c3926109a9565b6109c5565b825461278b565b9055565b906127d963ffffffff60e01b91611576565b9181191691161790565b906127f86127f36127ff926109a9565b6109c5565b82546127c7565b9055565b9061285e60606000612864946128268282016128208488016122f4565b90612723565b61283e82820161283860208801610983565b90612765565b61285682820161285060408801610983565b906127a7565b019201610983565b906127e3565b565b9061287091612803565b565b61294261295794936129396128f2612952956128a7816128a161289b6128966124d1565b610103565b91610103565b1061253e565b6128ca846128c46128be6128b9612567565b610103565b91610103565b106125f8565b6128ed886128e76128e16128dc612621565b610103565b91610103565b106126b2565b6126db565b9561293061291161290b612905426126f7565b956126f7565b926126f7565b9361292761291d612713565b9960008b0161221e565b602089016108f9565b604087016108f9565b606085016108f9565b600661294c61122f565b01610e57565b612866565b565b60206129b96129b46129896129846129cf95612973610755565b50600261297e61122f565b01610797565b6107d4565b6129af816129a86129a261299d60006114b9565b610211565b91610211565b1415611529565b61155e565b61156a565b6350d25bcd906129c76100c3565b938492611576565b825281806129df600482016102b8565b03915afa8015612a4957612a1891600091612a1b575b50612a1381612a0d612a076000611722565b91611672565b13611799565b6117c2565b90565b612a3c915060203d8111612a42575b612a3481836103bd565b8101906117de565b386129f5565b503d612a2a565b6115ca565b612a5790611672565b9052565b9190612a6f90600060208501940190612a4e565b565b612a79610755565b5080612a8e612a886000611722565b91611672565b12612a9f57612a9c906117c2565b90565b612ac190612aab6100c3565b918291635467221960e11b835260048301612a5b565b0390fdfea2646970667358221220693442d128676a7883912b8acdfb556b1c7ff85cfba91065715647353b70902564736f6c63430008180033",
  "devdoc": {
    "errors": {
      "SafeCastOverflowedIntToUint(int256)": [
        {
          "details": "An int value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}