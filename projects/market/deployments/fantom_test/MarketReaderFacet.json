{
  "address": "0xF28E47AF55843Af75063f6E7735C4e315bf5Eab6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "availableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "feeAndRates",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "internalType": "int256[]",
          "name": "fundingRates",
          "type": "int256[]"
        },
        {
          "internalType": "int256[]",
          "name": "_cumulativeFundingRates",
          "type": "int256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "getGlobalOpenInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_globalSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "getGlobalPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getGlobalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "lastTime",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "market",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "extra0",
              "type": "uint72"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "getMarketSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "markPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getPNL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "getPNL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "markPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "lastTime",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "market",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "extra0",
              "type": "uint72"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "getPositionKeys",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPositions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "lastTime",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "market",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "extra0",
              "type": "uint72"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "posLong",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "entryFundingRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "realisedPnl",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "lastTime",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "market",
              "type": "uint16"
            },
            {
              "internalType": "uint72",
              "name": "extra0",
              "type": "uint72"
            }
          ],
          "internalType": "struct Position.Props",
          "name": "posShort",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        }
      ],
      "name": "isLiquidate",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "market",
          "type": "uint16"
        }
      ],
      "name": "markeConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSuspended",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowOpen",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "allowClose",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "validDecrease",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "minSlippage",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxSlippage",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minLeverage",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maxLeverage",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minPayment",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "minCollateral",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "decreaseNumLimit",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "maxTradeAmount",
              "type": "uint32"
            }
          ],
          "internalType": "struct MarketHandler.Props",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57904ab1bc1afe9917b5878324fb1b74df9c8fab5fb673af0b0f17e0c00c6c4e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x653985cBA14eF0b751bf209fee39De78b4d21676",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2997363",
    "logsBloom": "0x
    "blockHash": "0x000061bd00001ea2ff7cd63c3723fab8310f54ccd737a8296ba8ceeb4f60fce3",
    "transactionHash": "0x57904ab1bc1afe9917b5878324fb1b74df9c8fab5fb673af0b0f17e0c00c6c4e",
    "logs": [],
    "blockNumber": 25055994,
    "cumulativeGasUsed": "2997363",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5611c5c87ae95ca3b689d6aa1111e5c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"availableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"feeAndRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"fundingRates\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_cumulativeFundingRates\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"getGlobalOpenInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_globalSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getGlobalPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getGlobalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"extra0\",\"type\":\"uint72\"}],\"internalType\":\"struct Position.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"getMarket\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"getMarketSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getPNL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"getPNL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"markPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"extra0\",\"type\":\"uint72\"}],\"internalType\":\"struct Position.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getPositionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"getPositionKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"extra0\",\"type\":\"uint72\"}],\"internalType\":\"struct Position.Props\",\"name\":\"posLong\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"realisedPnl\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"lastTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"extra0\",\"type\":\"uint72\"}],\"internalType\":\"struct Position.Props\",\"name\":\"posShort\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"name\":\"isLiquidate\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"market\",\"type\":\"uint16\"}],\"name\":\"markeConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSuspended\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allowClose\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"validDecrease\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"minSlippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSlippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minLeverage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxLeverage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minPayment\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"minCollateral\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"decreaseNumLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxTradeAmount\",\"type\":\"uint32\"}],\"internalType\":\"struct MarketHandler.Props\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/reader/MarketReaderFacet.sol\":\"MarketReaderFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"src/facets/reader/MarketReaderFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/utils/EnumerableValues.sol\\\";\\nimport {Position} from \\\"../../lib/types/PositionStruct.sol\\\";\\nimport {IPrice} from \\\"../../interfaces/IPrice.sol\\\";\\n\\nimport {MarketHandler} from \\\"../../lib/market/MarketHandler.sol\\\";\\nimport {PositionHandler} from \\\"../../lib/position/PositionHandler.sol\\\";\\nimport {OracleHandler} from \\\"../../lib/oracle/OracleHandler.sol\\\";\\nimport {FeeHandler} from \\\"../../lib/fee/FeeHandler.sol\\\";\\nimport {FeeType} from \\\"../../lib/types/FeeType.sol\\\";\\nimport {IFee} from \\\"../../interfaces/IMarket.sol\\\";\\n\\ncontract MarketReaderFacet is IFee {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.UintSet;\\n\\n    //================================================================\\n    //   view functions\\n    //================================================================\\n    function isLiquidate(uint16 market, address account, bool isLong) external view {\\n        // LibMarketValid.validateLiquidation(market, pnl, fees, liquidateFee, collateral, size, raise);\\n    }\\n\\n    function markeConfig(uint16 market) external view returns (MarketHandler.Props memory _config) {\\n        _config = MarketHandler.Storage().config[market];\\n    }\\n\\n    function getGlobalPnl(address vault) public view returns (int256) {\\n        EnumerableSet.UintSet storage marketIds = MarketHandler.Storage().marketIds[vault];\\n        uint256[] memory _markets = marketIds.values();\\n        int256 pnl = 0;\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            uint16 market = uint16(_markets[i]);\\n            pnl = pnl\\n                + PositionHandler.getMarketPNL(\\n                    market, OracleHandler.getPrice(market, true), OracleHandler.getPrice(market, false)\\n                );\\n        }\\n        return pnl;\\n    }\\n\\n    function availableLiquidity(address market, address account, bool isLong) external view returns (uint256) {}\\n\\n    function getMarket(uint16 market) external view returns (bytes memory result) {}\\n\\n    function getMarkets() external view returns (bytes memory result) {}\\n\\n    function getMarketSizes(uint16 market) external view returns (uint256, uint256) {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return (\\n            ps.globalPositions[PositionHandler.storageKey(market, true)].size,\\n            ps.globalPositions[PositionHandler.storageKey(market, false)].size\\n        );\\n    }\\n\\n    function getAccountSize(uint16 market, address account) external view returns (uint256, uint256) {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return (\\n            ps.positions[PositionHandler.storageKey(market, true)][account].size,\\n            ps.positions[PositionHandler.storageKey(market, false)][account].size\\n        );\\n    }\\n\\n    function getPosition(uint16 market, address account, uint256 markPrice, bool isLong)\\n        public\\n        view\\n        returns (Position.Props memory)\\n    {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        // TODO\\n        return ps.positions[PositionHandler.storageKey(market, isLong)][account];\\n    }\\n\\n    function getPositions(uint16 market, address account)\\n        external\\n        view\\n        returns (Position.Props memory posLong, Position.Props memory posShort)\\n    {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        posLong = ps.positions[PositionHandler.storageKey(market, true)][account];\\n        posShort = ps.positions[PositionHandler.storageKey(market, false)][account];\\n    }\\n\\n    function getGlobalPosition(uint16 market, bool isLong) external view returns (Position.Props memory) {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return ps.globalPositions[PositionHandler.storageKey(market, isLong)];\\n    }\\n\\n    function contains(uint16 market, address account) external view returns (bool) {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return ps.positions[PositionHandler.storageKey(market, true)][account].size > 0\\n            || ps.positions[PositionHandler.storageKey(market, false)][account].size > 0;\\n    }\\n\\n    function getPositionKeys(uint16 market, uint256 start, uint256 end, bool isLong)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return ps.positionKeys[PositionHandler.storageKey(market, isLong)].valuesAt(start, end);\\n    }\\n\\n    function getPositionCount(uint16 market, bool isLong) external view returns (uint256) {\\n        PositionHandler.PositionStorage storage ps = PositionHandler.Storage();\\n        return ps.positionKeys[PositionHandler.storageKey(market, isLong)].length();\\n    }\\n\\n    function getPNL(uint16 market, address account, uint256 sizeDelta, uint256 markPrice, bool isLong)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        // TODO\\n        // Position.Props memory _position = getPosition(market, account, markPrice, isLong);\\n        // return PositionHandler.getPNL(_position, sizeDelta, markPrice);\\n    }\\n\\n    function getPNL(uint16 market) external view returns (int256 pnl) {\\n        // TODO\\n        // uint256 longPrice = IPrice(this).getPrice(market, false);\\n        // uint256 shortPrice = IPrice(this).getPrice(market, true);\\n        // pnl = TransferHelper.parseVaultAssetSigned(\\n        //     PositionHandler.getMarketPNL(market, longPrice, shortPrice), collateralTokenDigits\\n        // );\\n    }\\n\\n    function getGlobalOpenInterest(uint16 market) public view returns (uint256 _globalSize) {\\n        // TODO\\n        // return MarketHandler.getGlobalOpenInterest(market);\\n    }\\n\\n    // =================================================================================\\n    // read only\\n    // =================================================================================\\n\\n    function feeAndRates(uint16 market)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory fees, int256[] memory fundingRates, int256[] memory _cumulativeFundingRates)\\n    {\\n        fees = new uint256[](uint8(FeeType.T.Counter));\\n        for (uint8 i = 0; i < uint8(FeeType.T.Counter); i++) {\\n            fees[i] = FeeHandler.Storage().feeAndRates[market][i];\\n        }\\n        fundingRates = new int256[](2);\\n        fundingRates[0] = FeeHandler.Storage().fundingRates[market][true];\\n        fundingRates[1] = FeeHandler.Storage().fundingRates[market][false];\\n        _cumulativeFundingRates = new int256[](2);\\n        _cumulativeFundingRates[0] = FeeHandler.Storage().cumulativeFundingRates[market][true];\\n        _cumulativeFundingRates[1] = FeeHandler.Storage().cumulativeFundingRates[market][false];\\n    }\\n}\\n\",\"keccak256\":\"0xef5615882e512aeb70abb536250706153e87c41f6d58eff87a1348519c63a800\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMarketExternal {\\n    function collectFees(bytes calldata _data) external;\\n    function getGlobalPnl(address vault) external view returns (int256);\\n}\\n\\ninterface IFee {\\n    function feeAndRates(uint16 market)\\n        external\\n        view\\n        returns (uint256[] memory fees, int256[] memory fundingRates, int256[] memory _cumulativeFundingRates);\\n}\\n\\ninterface IMarket is IMarketExternal {\\n    //================================================================================================\\n    // market view only\\n    //================================================================================================\\n\\n    function getGlobalOpenInterest() external view returns (uint256 _globalSize);\\n    function availableLiquidity(address market, address account, bool isLong) external view returns (uint256);\\n\\n    // =================================================================================\\n    // fee view only\\n    // =================================================================================\\n\\n    //================================================================================================\\n    // position view only\\n    //================================================================================================\\n\\n    function getAccountSize(uint16 market, address account) external view returns (uint256, uint256);\\n    function getPositionsWithFees(address account) external view returns (bytes memory);\\n    function getPositions() external view returns (bytes memory);\\n    function getPositions(uint16 market) external view returns (bytes memory);\\n    function getPositions(address account) external view returns (bytes memory);\\n    function getPositions(uint16 market, address account) external view returns (bytes memory);\\n    function getPosition(uint16 market, address account, bool isLong, uint256 markPrice)\\n        external\\n        view\\n        returns (bytes memory);\\n    function getPositionCount(uint16 market, bool isLong) external view returns (uint256);\\n    function getPositionKeys(uint16 market, uint256 start, uint256 end, bool isLong) external view returns (uint256);\\n    function getPNL(uint16 market, address account, uint256 sizeDelta, uint256 markPrice, bool isLong)\\n        external\\n        view\\n        returns (int256);\\n    function getMarketPNL(uint16 market, uint256 longPrice, uint256 shortPrice) external view returns (int256);\\n    function getMarketSizes(uint16 market) external view returns (uint256, uint256);\\n\\n    //================================================================================================\\n    // order view only\\n    //================================================================================================\\n\\n    function getOrderByAccount(address account) external view returns (bytes memory returnData);\\n    function getByIndex(uint256 index) external view returns (bytes memory returnData);\\n    function containsKey(bytes32 key) external view returns (bool);\\n    function getCount() external view returns (uint256);\\n    function getKey(bytes calldata data) external view returns (bytes32);\\n    function getKeys(bytes calldata data) external view returns (bytes32[] memory);\\n    function getExecutableOrdersByPrice(bytes calldata data) external view returns (bytes memory returnData);\\n\\n    //================================================================================================\\n    // order actions\\n    //================================================================================================\\n\\n    function addOrder(bytes calldata data) external returns (bytes memory returnData);\\n    function updateOrder(bytes calldata data) external returns (bytes memory returnData);\\n    function removeOrder(bytes calldata data) external returns (bytes memory returnData);\\n\\n    //================================================================================================\\n    // fee actions\\n    //================================================================================================\\n\\n    function addSkipTime(uint256 start, uint256 end) external;\\n    function feeVaultWithdraw(address token, address to, uint256 amount) external;\\n\\n    //================================================================================================\\n    // market actions\\n    //================================================================================================\\n\\n    function liquidatePositions(bytes calldata) external;\\n    function execOrder(bytes calldata) external;\\n    function isLiquidate(uint16 market, address account, bool isLong) external view;\\n}\\n\",\"keccak256\":\"0xb576d5a4a9068c5032dc1ce536e360724801844988415b09693e089f193d8479\",\"license\":\"MIT\"},\"src/interfaces/IPrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPrice {\\n    function getPrice(address _token, bool _maximise) external view returns (uint256);\\n\\n    function fastPriceFeed() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdaae8a6f21580d277c8e87f4f06d84abb3ce5ade3140e28672a8c25a3a31163d\",\"license\":\"MIT\"},\"src/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceFeed {\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (uint256);\\n\\n    function description() external view returns (string memory);\\n\\n    function aggregator() external view returns (address);\\n\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestRound() external view returns (uint80);\\n\\n    function getRoundData(\\n        uint80 roundId\\n    ) external view returns (uint80, int256, uint256, uint256, uint80);\\n}\\n\",\"keccak256\":\"0x9f509678e2c05dedffbb7a26bf8f36cade173e483423edf691264cd95cd2b546\",\"license\":\"MIT\"},\"src/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n    function withdrawFromVault(address to, uint256 amount) external; //transferToVault\\n\\n    function borrowFromVault(uint16 market, uint256 amount) external;\\n\\n    function repayToVault(uint16 market, uint256 amount) external;\\n\\n    //=======================view==============\\n\\n    function sellLpFee() external view returns (uint256);\\n\\n    function buyLpFee() external view returns (uint256);\\n\\n    function computationalCosts(bool isBuy, uint256 amount) external view returns (uint256);\\n\\n    function getLPFee(bool isBuy) external view returns (uint256);\\n\\n    function getUSDBalance() external view returns (uint256);\\n\\n    function getAUM() external view returns (uint256);\\n\\n    function fundsUsed(uint16 market) external view returns (uint256);\\n\\n    function priceDecimals() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x89e06ca34ecd74d763d31d97e9c7b7288e7558e15afc321a9539f86ba7a43d85\",\"license\":\"MIT\"},\"src/lib/balance/BalanceHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IVault} from \\\"../../interfaces/IVault.sol\\\";\\n\\nlibrary BalanceHandler {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.balance.storage\\\");\\n\\n    enum Type {\\n        FeeToMarket,\\n        MarketToFee,\\n        MarketToUser,\\n        UserToMarket,\\n        MarketToVault,\\n        VaultToMarket,\\n        FeeToReward\\n    }\\n\\n    struct StorageStruct {\\n        mapping(uint16 => uint256) feeBalance;\\n        mapping(uint16 => uint256) marketBalance;\\n    }\\n\\n    event Transfer(\\n        uint16 indexed market, uint8 indexed transferType, address indexed account, uint256 value, bytes extra\\n    );\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    // DONE-----------\\n    function vaultToMarket(address vault, uint16 market, address account, uint256 value) internal {\\n        IVault(vault).withdrawFromVault(account, value);\\n        Storage().marketBalance[market] += value;\\n        emit Transfer(market, uint8(Type.VaultToMarket), account, value, bytes(\\\"\\\"));\\n    }\\n\\n    function marketToFee(uint16 market, address account, uint256 value) internal {\\n        Storage().marketBalance[market] -= value;\\n        Storage().feeBalance[market] += value;\\n        emit Transfer(market, uint8(Type.MarketToFee), account, value, bytes(\\\"\\\"));\\n    }\\n\\n    function feeToMarket(uint16 market, address account, int256[] memory fees, uint256 value) internal {\\n        // in case the balance is not enough, transfer the remaining balance\\n        uint256 _amount = Storage().feeBalance[market];\\n        if (value > _amount) value = _amount;\\n\\n        Storage().feeBalance[market] -= value;\\n        Storage().marketBalance[market] += value;\\n        emit Transfer(market, uint8(Type.FeeToMarket), account, value, abi.encode(fees));\\n    }\\n    // TODO-------------\\n\\n    function marketToVault(address vault, uint16 market, address account, uint256 value) internal {\\n        revert(\\\"TODO decimal convertion for pnl\\\");\\n        Storage().marketBalance[market] -= value;\\n        emit Transfer(market, uint8(Type.MarketToVault), account, value, bytes(\\\"\\\"));\\n    }\\n\\n    function marketToUser(address token, uint16 market, address account, uint256 value) internal {\\n        Storage().marketBalance[market] -= value;\\n        IERC20(token).safeTransfer(account, value);\\n        emit Transfer(market, uint8(Type.MarketToUser), account, value, bytes(\\\"\\\"));\\n    }\\n\\n    function userToMarket(uint16 market, address account, uint256 value) internal {\\n        Storage().marketBalance[market] += value;\\n        emit Transfer(market, uint8(Type.UserToMarket), account, value, bytes(\\\"\\\"));\\n    }\\n\\n    function feeToReward(address token, uint16 market, address to, uint256 value) internal {\\n        Storage().feeBalance[market] -= value;\\n        IERC20(token).safeTransfer(to, value);\\n        emit Transfer(market, uint8(Type.FeeToReward), to, value, bytes(\\\"\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xe0b2e87a2edebabe197a1f975dec12c2e0b53225b18213189048d533d814802a\",\"license\":\"MIT\"},\"src/lib/fee/FeeHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {BalanceHandler} from \\\"../balance/BalanceHandler.sol\\\";\\nimport {MarketDataTypes} from \\\"../types/MarketDataTypes.sol\\\";\\nimport {FeeType} from \\\"../types/FeeType.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {FundingRateCalculator} from \\\"./FundingRateCalculator.sol\\\";\\n\\nlibrary FeeHandler {\\n    using SafeCast for int256;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 constant FEE_STORAGE_POSITION = keccak256(\\\"blex.fee.storage\\\");\\n    uint256 constant PRECISION = 10 ** 18;\\n\\n    enum ConfigType {\\n        SkipTime,\\n        MaxFRatePerDay,\\n        FRateFactor,\\n        MaxFRate,\\n        MinFRate,\\n        FeeLoss,\\n        MinFundingInterval,\\n        MinorityFRate,\\n        MinCFRate,\\n        FundingFeeLossOffLimit,\\n        Counter\\n    }\\n\\n    struct FeeStorage {\\n        // =========================================================================\\n        //                            FundFeeStore & FundFee\\n        // =========================================================================\\n        mapping(uint16 market => uint256 interval) fundingIntervals;\\n        mapping(uint16 market => mapping(uint8 configType => uint256 value)) configs;\\n        mapping(uint16 market => uint256 calInterval) calIntervals;\\n        mapping(uint16 market => uint256 lastCalTime) lastCalTimes;\\n        mapping(uint16 market => mapping(bool isLong => int256 calFundingRate)) calFundingRates;\\n        mapping(uint16 market => uint256 loss) fundFeeLoss;\\n        // =========================================================================\\n        //                            FeeRouter\\n        // =========================================================================\\n        // market's feeRate and fee\\n        mapping(uint16 market => mapping(uint8 feeType => uint256 feeAndRate)) feeAndRates;\\n        // FeeVault-storage\\n        // cumulativeFundingRates tracks the funding rates based on utilization\\n        mapping(uint16 market => mapping(bool isLong => int256)) cumulativeFundingRates;\\n        // fundingRates tracks the funding rates based on position size\\n        mapping(uint16 market => mapping(bool isLong => int256)) fundingRates;\\n        // lastFundingTimes tracks the last time funding was updated for a token\\n        mapping(uint16 market => uint256) lastFundingTimes;\\n    }\\n\\n    event UpdateFundInterval(uint16 indexed market, uint256 interval);\\n    event UpdateCalInterval(uint16 indexed market, uint256 interval);\\n    event AddSkipTime(uint256 indexed startTime, uint256 indexed endTime);\\n    event UpdateConfig(uint256 index, uint256 oldFRate, uint256 newFRate);\\n    event UpdateFee(address indexed account, uint16 indexed market, int256[] fees, uint256 amount);\\n    event UpdateFeeAndRates(uint16 indexed market, uint8 kind, uint256 oldFeeOrRate, uint256 feeOrRate);\\n    event UpdateCumulativeFundRate(uint16 indexed market, int256 longRate, int256 shortRate);\\n    event UpdateFundRate(uint16 indexed market, int256 longRate, int256 shortRate);\\n    event UpdateLastFundTime(uint16 indexed market, uint256 timestamp);\\n    event AddNegativeFeeLoss(\\n        uint16 indexed market, address account, uint256 amount, uint256 lossBefore, uint256 lossAfter\\n    );\\n\\n    function initialize(uint16 market) internal {\\n        FeeStorage storage fs = Storage();\\n        fs.configs[market][uint8(ConfigType.MaxFRatePerDay)] = PRECISION;\\n        fs.configs[market][uint8(ConfigType.FRateFactor)] = PRECISION;\\n        fs.configs[market][uint8(ConfigType.MinFRate)] = 1250;\\n        fs.configs[market][uint8(ConfigType.MinFundingInterval)] = 1 hours;\\n        fs.configs[market][uint8(ConfigType.FundingFeeLossOffLimit)] = 1e7;\\n    }\\n\\n    function Storage() internal pure returns (FeeStorage storage fs) {\\n        bytes32 position = FEE_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function collectFees(uint16 market, address account, address token, int256[] memory fees, uint256 fundfeeLoss)\\n        internal\\n    {\\n        uint256 _amount = IERC20(token).allowance(msg.sender, address(this));\\n        // todo \\u4f1a\\u5b58\\u5728\\u8fd9\\u79cd\\u73b0\\u8c61\\u561b \\u5982\\u679c\\u5b58\\u5728\\u8981\\u4e0d\\u8981\\u66f4\\u65b0event\\n        //if (_amount == 0 && fundfeeLoss == 0) return;\\n        if (_amount != 0) {\\n            BalanceHandler.marketToFee(market, account, _amount);\\n        }\\n        if (fundfeeLoss > 0) {\\n            uint256 _before = Storage().fundFeeLoss[market];\\n            Storage().fundFeeLoss[market] += fundfeeLoss;\\n            BalanceHandler.feeToMarket(market, account, fees, fundfeeLoss);\\n            // emit AddNegativeFeeLoss(market, account, _before, Storage().fundFeeLoss[market]);\\n        }\\n        emit UpdateFee(account, market, fees, _amount);\\n    }\\n\\n    function updateCumulativeFundingRate(uint16 market, uint256 longSize, uint256 shortSize) internal {\\n        // TODO too much to do\\n    }\\n\\n    /**\\n     * \\u53ea\\u662f\\u83b7\\u53d6\\u6839\\u636e\\u5f53\\u524d\\u4ed3\\u4f4d\\u83b7\\u53d6\\u5404\\u79cd\\u8d39\\u7528\\u5e94\\u8be5\\u6536\\u53d6\\u591a\\u5c11, \\u5e76\\u4e0d\\u5305\\u542b\\u6536\\u8d39\\u987a\\u5e8f\\u548c\\u662f\\u5426\\u80fd\\u6536\\u5f97\\u5230\\n     */\\n\\n    function getFees(MarketDataTypes.Cache memory params, int256 _fundFee)\\n        internal\\n        view\\n        returns (int256[] memory fees)\\n    {\\n        fees = new int256[](uint8(FeeType.T.Counter));\\n\\n        fees[uint8(FeeType.T.FundFee)] = _fundFee;\\n\\n        if (params.sizeDelta == 0 && params.collateralDelta != 0) {\\n            return fees;\\n        }\\n\\n        // open position\\n        if (params.isOpen) {\\n            fees[uint8(FeeType.T.OpenFee)] = int256(getFee(params.market, params.sizeDelta, uint8(FeeType.T.OpenFee)));\\n        } else {\\n            // close position\\n            fees[uint8(FeeType.T.CloseFee)] = int256(getFee(params.market, params.sizeDelta, uint8(FeeType.T.CloseFee)));\\n\\n            // liquidate position\\n            if (params.liqState == 1) {\\n                uint256 _fee = Storage().feeAndRates[params.market][uint8(FeeType.T.LiqFee)];\\n                fees[uint8(FeeType.T.LiqFee)] = int256(_fee);\\n            }\\n        }\\n        if (params.execNum > 0) {\\n            // exec fee\\n            uint256 _fee = Storage().feeAndRates[params.market][uint8(FeeType.T.ExecFee)];\\n            _fee = _fee * params.execNum;\\n\\n            fees[uint8(FeeType.T.ExecFee)] = int256(_fee);\\n        }\\n        return fees;\\n    }\\n\\n    /**\\n     * @dev Calculates the fee for a given size delta and fee kind.\\n     * @param market The address of the market.\\n     * @param sizeDelta The change in position size.\\n     * @param kind The fee kind.\\n     * @return The fee amount.\\n     */\\n    function getFee(uint16 market, uint256 sizeDelta, uint8 kind) internal view returns (uint256) {\\n        if (sizeDelta == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _point = Storage().feeAndRates[market][kind];\\n        if (_point == 0) {\\n            _point = PRECISION;\\n        }\\n\\n        uint256 _size = (sizeDelta * (PRECISION - _point)) / PRECISION;\\n        return sizeDelta - _size;\\n    }\\n\\n    //==========================================================================================\\n    //        private functions\\n    //==========================================================================================\\n\\n    function _updateGlobalFundingRate(\\n        uint16 market,\\n        int256 longRate,\\n        int256 shortRate,\\n        int256 longRateDelta,\\n        int256 shortRateDelta,\\n        uint256 timestamp\\n    ) private {\\n        // DONE\\n        Storage().cumulativeFundingRates[market][true] += longRateDelta;\\n        Storage().cumulativeFundingRates[market][false] += shortRateDelta;\\n        Storage().fundingRates[market][true] = longRate;\\n        Storage().fundingRates[market][false] = shortRate;\\n        Storage().lastFundingTimes[market] = timestamp;\\n\\n        emit UpdateCumulativeFundRate(market, longRateDelta, shortRateDelta);\\n        emit UpdateFundRate(market, longRate, shortRate);\\n        emit UpdateLastFundTime(market, timestamp);\\n    }\\n\\n    function _getLastCollectTimes(uint16 market) private view returns (uint256) {\\n        return Storage().lastFundingTimes[market];\\n    }\\n\\n    function _calFeeRate(uint16 _market, uint256 _longSize, uint256 _shortSize) private view returns (uint256) {}\\n\\n    function _getMaxFRate(uint16 market, uint256 openInterest, uint256 aum) internal view returns (uint256) {\\n        uint256 fundingInterval = _getCalInterval(market);\\n        return FundingRateCalculator.calculateMaxFundingRate(openInterest, aum, maxFRatePerDay(market), fundingInterval);\\n    }\\n\\n    function _getCalInterval(uint16 market) private view returns (uint256 _interval) {\\n        FeeStorage storage fs = Storage();\\n        _interval = fs.fundingIntervals[market];\\n        if (_interval == 0) return FundingRateCalculator.MIN_FUNDING_INTERVAL_3600;\\n    }\\n\\n    function maxFRatePerDay(uint16 market) internal view returns (uint256) {\\n        FeeStorage storage fs = Storage();\\n        return fs.configs[market][uint8(ConfigType.MaxFRatePerDay)];\\n    }\\n}\\n\",\"keccak256\":\"0xdb2dbb436b9e5d6b906bb8299e9889e0d44ba362598bfdfd6368c3ad708e1d58\",\"license\":\"MIT\"},\"src/lib/fee/FundingRateCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport {Calc} from \\\"../utils/Calc.sol\\\";\\n\\nlibrary FundingRateCalculator {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using FundingRateCalculator for FundFeeStorageMemory;\\n    using FundingRateCalculator for FundFeeVars;\\n\\n    uint256 internal constant MIN_FUNDING_INTERVAL_3600 = 1 hours; // 8hours\\n    uint256 internal constant ONE_WITH_8_DECIMALS = 10 ** 8; //0.0001666666*100000000\\n    uint256 internal constant BASIS_INTERVAL_HOUR_24 = 24;\\n    uint256 internal constant DEFAULT_RATE_DIVISOR_100 = 100;\\n\\n    /**\\n     * \\u8ba1\\u7b97\\u6700\\u5927\\u5355\\u4f4d\\u8d44\\u91d1\\u8d39\\u9650\\u5236\\n     */\\n    /**\\n     *\\n     * @param openInterest18Decimals 18zeros\\n     * @param aumWith18Decimals 18zeros\\n     * @param maxFRatePerDayWith8Decimals 8zeros\\n     * @param fundingIntervalSeconds seconds\\n     */\\n    function calculateMaxFundingRate(\\n        uint256 openInterest18Decimals,\\n        uint256 aumWith18Decimals,\\n        uint256 maxFRatePerDayWith8Decimals,\\n        uint256 fundingIntervalSeconds\\n    ) internal pure returns (uint256) {\\n        uint256 _maxFRate = (\\n            openInterest18Decimals * fundingIntervalSeconds * maxFRatePerDayWith8Decimals * ONE_WITH_8_DECIMALS\\n        ) / aumWith18Decimals / BASIS_INTERVAL_HOUR_24 / ONE_WITH_8_DECIMALS / MIN_FUNDING_INTERVAL_3600;\\n        return _maxFRate;\\n    }\\n\\n    /**\\n     * \\u8ba1\\u7b97\\u5355\\u4f4d\\u8d44\\u91d1\\u8d39(\\u52a0\\u4e0a\\u6700\\u5927\\u6700\\u5c0f\\u9650\\u5236\\u4e4b\\u540e)\\n     */\\n    function capFundingRateByLimits(\\n        uint256 long,\\n        uint256 short,\\n        uint256 maxFRate,\\n        uint256 minFRate,\\n        uint256 calculatedMaxFRate8Decimals,\\n        uint256 fRate,\\n        uint256 minority\\n    ) internal pure returns (uint256, uint256) {\\n        //- FRate<=minFRate\\u65f6\\uff1aFRate=minFRate\\uff08\\u53d6\\u6d88\\u53cc\\u8fb9\\u6536\\u53d6MinFRate\\uff09\\u3002\\n        /*\\n        if (fRate <= minFRate) return (minFRate, minFRate);\\n         */\\n        maxFRate = maxFRate == 0 ? calculatedMaxFRate8Decimals : maxFRate;\\n        if (fRate > maxFRate) fRate = maxFRate;\\n        if (fRate < minFRate) fRate = minFRate;\\n        return long >= short ? (fRate, minority) : (minority, fRate);\\n    }\\n\\n    /**\\n     * \\u8ba1\\u7b97\\u7528\\u6237\\u7684\\u8d44\\u91d1\\u8d39\\n     */\\n    function calUserFundingFee(uint256 size, int256 entryFundingRate, int256 cumRates) internal pure returns (int256) {\\n        // Calculate the funding fee by multiplying the position size with the rate.\\n        // - \\u6536\\u53d6\\u5468\\u671f\\u8d1f\\u8d44\\u91d1\\u8d39\\u65b9\\u5934\\u5bf8\\u4e3a0\\u65f6\\uff0c\\u6b63\\u8d44\\u91d1\\u8d39>0\\uff0c\\u8d1f\\u8d44\\u91d1\\u8d39\\u7387\\u4e3a<0\\uff1b\\u6536\\u53d6\\u7684\\u8d44\\u91d1\\u8d39\\u5168\\u90e8\\u7528\\u4e8e\\u62b5\\u6263\\u4e8f\\u635f\\uff0c\\u65e0\\u4e8f\\u635f\\u65f6\\u4e0d\\u53d1\\u653e\\uff1b\\n        // TODO \\u9700\\u8981\\u548c painter \\u8ba8\\u8bba\\n        return (int256(size) * (cumRates - entryFundingRate)) / int256(ONE_WITH_8_DECIMALS);\\n    }\\n\\n    /**\\n     * \\u8ba1\\u7b97\\u8d44\\u91d1\\u8d39\\u516c\\u5f0f\\n     */\\n    function calFeeRate(\\n        uint256 _longSizeWith18Decimals,\\n        uint256 _shortSizeWith18Decimals,\\n        uint256 _intervalSeconds,\\n        uint256 fRateFactorWith8Decimals\\n    ) internal pure returns (uint256) {\\n        // Calculate the absolute difference between longSize and shortSize.\\n        uint256 _size = Calc.abs(_longSizeWith18Decimals, _shortSizeWith18Decimals);\\n        uint256 _rate;\\n        if (_size != 0) {\\n            // Calculate the divisor by summing longSize and shortSize.\\n            uint256 _divisor = _longSizeWith18Decimals + _shortSizeWith18Decimals;\\n            // (1666-2000)/(2000+1666)\\n\\n            // Calculate the fee rate.\\n            _rate = (_size * ONE_WITH_8_DECIMALS) / _divisor;\\n\\n            // ((2000-1664)/(2000+1664) * 10**8)**2 * 3600 / (10**8) / 100 / 24 / 3600\\n            //350\\n            _rate = ((_rate ** 2) * _intervalSeconds) / ONE_WITH_8_DECIMALS / DEFAULT_RATE_DIVISOR_100\\n                / BASIS_INTERVAL_HOUR_24 / MIN_FUNDING_INTERVAL_3600;\\n            _rate = (_rate * fRateFactorWith8Decimals) / ONE_WITH_8_DECIMALS;\\n        }\\n        return _rate;\\n    }\\n\\n    /**\\n     * \\u8ba1\\u7b97 CFRate\\n     * @param Long_CumFRate \\u591a\\u5934\\u7684\\u7d2f\\u8ba1\\u8d44\\u91d1\\u8d39\\u7387, \\u7cbe\\u5ea6 8\\n     * @param Short_CumFRate \\u7a7a\\u5934\\u7684\\u7d2f\\u8ba1\\u8d44\\u91d1\\u8d39\\u7387, \\u7cbe\\u5ea6 8\\n     * @param minCFRate \\u6700\\u5c0f CFRate \\u9650\\u5236, \\u7ba1\\u7406\\u540e\\u53f0\\u914d\\u7f6e, \\u7cbe\\u5ea6 8\\n     */\\n    function calCFRate(int256 Long_CumFRate, int256 Short_CumFRate, uint256 minCFRate)\\n        internal\\n        pure\\n        returns (uint256 _CFRate)\\n    {\\n        // - \\u8d44\\u91d1\\u8d39\\u7387 C_FRate: \\u6bcf\\u5f53\\u591a\\u7a7a\\u4ed3\\u4f4d\\u7684FRate\\u5b8c\\u6210\\u4e00\\u4e2a\\u8ba1\\u7b97\\u5468\\u671f\\u65f6(\\u5373\\u8ba1\\u7b97\\u51fa8\\u4e2aFRate)\\uff0c\\u591a\\u7a7aCumFRate\\u7684\\u5dee\\u503c\\u7edd\\u5bf9\\u503c\\u4e3aC_Frate\\uff1b\\n        //   - C_FRate=| Long_CumFRate - Short_CumFRate |\\n        // - minC_FRate\\u7528\\u4e8e\\u9650\\u5236C_FRate\\u4e0b\\u9650(\\u7ba1\\u7406\\u540e\\u53f0\\u914d\\u7f6e\\uff0c\\u533a\\u95f40-1\\uff0c\\u9ed8\\u8ba4\\u4e3a0.0001\\uff0c\\u6536\\u53d6\\u6700\\u4f4e\\u8d44\\u91d1\\u8d39\\u7387\\u4e07\\u4e09\\u6bcf\\u5929)\\n        //   - C_FRate < minC_FRate \\u65f6\\uff0cC_FRate\\u53d6minC_FRate\\n        _CFRate = Calc.abs(Long_CumFRate, Short_CumFRate).toUint256();\\n        _CFRate = Math.max(_CFRate, minCFRate);\\n    }\\n\\n    /**\\n     * \\u7528\\u4e8e\\u8ba1\\u7b97 C_FRate_Long \\u548c C_FRate_Short\\n     * @param Long_CumFRate \\u591a\\u5934\\u7d2f\\u8ba1\\u8d44\\u91d1\\u8d39\\u7387 8\\u7cbe\\u5ea6\\n     * @param Short_CumFRate \\u591a\\u5934\\u7d2f\\u8ba1\\u8d44\\u91d1\\u8d39\\u7387 8\\u7cbe\\u5ea6\\n     * @param C_FRate C_FRate 8\\u7cbe\\u5ea6\\n     * @param fundingFeeLossOffLimit \\u8d1f\\u8d44\\u91d1\\u8d39\\u7387\\u516c\\u5f0f\\u62b5\\u6263\\u8d44\\u91d1\\u4e8f\\u635f\\u6bd4\\u4f8b(\\u7ba1\\u7406\\u540e\\u53f0\\u914d\\u7f6e) 8\\u7cbe\\u5ea6 \\u53d6\\u503c\\u8303\\u56f4[0,10^8]\\n     * @param fundingFeeLoss \\u5355\\u4e2a\\u5e02\\u573a\\u8bb0\\u5f55\\u8d44\\u91d1\\u8d39\\u4e8f\\u635f\\u603b\\u503c \\u7cbe\\u5ea618\\n     * @param Size_Long Size_Long \\u7cbe\\u5ea618\\n     * @param Size_Short Size_Short \\u7cbe\\u5ea618\\n     * @return C_FRate_Long C_FRate_Long 8\\u7cbe\\u5ea6\\n     * @return C_FRate_Short C_FRate_Short 8\\u7cbe\\u5ea6\\n     */\\n    function calNextCFRate(\\n        int256 Long_CumFRate,\\n        int256 Short_CumFRate,\\n        uint256 C_FRate,\\n        uint256 fundingFeeLossOffLimit,\\n        uint256 fundingFeeLoss,\\n        uint256 Size_Long,\\n        uint256 Size_Short\\n    ) internal pure returns (int256 C_FRate_Long, int256 C_FRate_Short, uint256 deductFundFeeAmount) {\\n        //- \\u6536\\u53d6\\u5468\\u671f\\u6b63\\u8d44\\u91d1\\u8d39\\u65b9\\u5934\\u5bf8\\u4e3a0\\u65f6\\uff0c\\u6b63\\u8d44\\u91d1\\u8d39>0,\\uff0c\\u6536\\u53d6\\u7684\\u8d44\\u91d1\\u8d39\\u4e3a0\\uff0c\\u8d1f\\u8d44\\u91d1\\u8d39\\u7387=0\\uff1b\\n        //- \\u6536\\u53d6\\u5468\\u671f\\u8d1f\\u8d44\\u91d1\\u8d39\\u65b9\\u5934\\u5bf8\\u4e3a0\\u65f6\\uff0c\\u6b63\\u8d44\\u91d1\\u8d39>0\\uff0c\\u8d1f\\u8d44\\u91d1\\u8d39\\u7387\\u53d60\\uff1b\\n        bool isFomular = Size_Long > 0 && Size_Short > 0;\\n        if (Long_CumFRate >= Short_CumFRate) {\\n            deductFundFeeAmount = _getLossOffset(Size_Long, C_FRate, fundingFeeLossOffLimit, fundingFeeLoss);\\n            C_FRate_Long = C_FRate.toInt256();\\n            if (isFomular) {\\n                C_FRate_Short = -(\\n                    (Size_Long.toInt256() * C_FRate_Long)\\n                        - deductFundFeeAmount.toInt256() * ONE_WITH_8_DECIMALS.toInt256()\\n                ) / Size_Short.toInt256();\\n            }\\n        } else {\\n            deductFundFeeAmount = _getLossOffset(Size_Short, C_FRate, fundingFeeLossOffLimit, fundingFeeLoss);\\n            C_FRate_Short = C_FRate.toInt256();\\n            if (isFomular) {\\n                //feeLoss\\u8ba1\\u7b97\\u51fa\\u6765\\u7684\\u4e00\\u5b9a < Size_Short.toInt256() * C_FRate_Short\\n                C_FRate_Long = -(\\n                    (Size_Short.toInt256() * C_FRate_Short)\\n                        - deductFundFeeAmount.toInt256() * ONE_WITH_8_DECIMALS.toInt256()\\n                ) / Size_Long.toInt256();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * \\u8ba1\\u7b97\\u8d44\\u91d1\\u8d39\\u4e8f\\u635f\\u503c\\n     * @param size \\u67d0\\u4e2a\\u65b9\\u5411\\u5934\\u5bf8, \\u7cbe\\u5ea6 18\\n     * @param _CFRate CFRate, \\u7cbe\\u5ea6 8\\n     * @param fundingFeeLossOffLimit \\u8d1f\\u8d44\\u91d1\\u8d39\\u7387\\u516c\\u5f0f\\u62b5\\u6263\\u8d44\\u91d1\\u4e8f\\u635f\\u6bd4\\u4f8b(\\u7ba1\\u7406\\u540e\\u53f0\\u914d\\u7f6e), \\u7cbe\\u5ea6 8\\n     * @param totalLoss \\u5355\\u4e2a\\u5e02\\u573a\\u8bb0\\u5f55\\u5e02\\u573a\\u5269\\u4f59\\u4e8f\\u635f, \\u7cbe\\u5ea618\\n     */\\n    // function _getFundingFeeLoss(\\n    function _getLossOffset(uint256 size, uint256 _CFRate, uint256 fundingFeeLossOffLimit, uint256 totalLoss)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // \\u8d44\\u91d1\\u8d39\\u4e8f\\u635f<= Size_Long * C_FRate_Long *10%\\n        return Math.min((size * _CFRate * fundingFeeLossOffLimit) / (ONE_WITH_8_DECIMALS ** 2), totalLoss);\\n    }\\n\\n\\n\\n    //========================================================================\\n    //               TIM\\n    //========================================================================\\n    // \\u8bbe \\u5c0f\\u5468\\u671f\\u522b\\u540d a\\uff0c\\u5927\\u5468\\u671f\\u522b\\u540d b\\n    struct FundFeeStorageMemory {\\n        uint256 aInterval;\\n        uint256 bInterval;\\n        uint256 aUpdatedAt;\\n        uint256 bUpdatedAt;\\n        uint256 sFRate;\\n        uint256 lFRate;\\n        int256 sCumFRate;\\n        int256 lCumFRate;\\n        uint256 fundFeeLoss;\\n    }\\n\\n    struct FundFeeVars {\\n        uint256 fundFeeLoss;\\n        uint256 intervalsN;\\n        uint256 intervals1; // \\u7b2c\\u4e00\\u65f6\\u6bb5\\u95f4\\u9694\\u6570\\n        uint256 intervals2; // \\u7b2c\\u4e8c\\u65f6\\u6bb5\\u95f4\\u9694\\u6570\\n        uint256 intervals3; // \\u7b2c\\u4e09\\u65f6\\u6bb5\\u95f4\\u9694\\u6570\\n        uint256 updatedAt; // \\u5728\\u4e0d\\u540c\\u65f6\\u6bb5\\u4ee3\\u8868\\u4e0d\\u540c\\u884c\\u65f6\\u6bb5\\u7684\\u5927\\u5468\\u671f\\u66f4\\u65b0\\u65f6\\u95f4\\n        uint256 deductAmount;\\n        uint256 accDeductAmount;\\n        int256 sCumFRate;\\n        int256 lCumFRate;\\n        int256 lCFRate;\\n        int256 sCFRate;\\n        int256 sCFRateDelta;\\n        int256 lCFRateDelta;\\n    }\\n\\n    function initializeFundFeeVars(FundFeeStorageMemory memory sm) internal pure returns (FundFeeVars memory vars) {\\n        vars.intervalsN = sm.bInterval / sm.aInterval;\\n        vars.lCumFRate = sm.lCumFRate;\\n        vars.sCumFRate = sm.sCumFRate;\\n        vars.updatedAt = sm.aUpdatedAt; // \\u5c0f\\u5468\\u671f\\u66f4\\u65b0\\u65f6\\u95f4, \\u521d\\u59cb\\u5316 0\\n        vars.fundFeeLoss = sm.fundFeeLoss;\\n        return vars;\\n    }\\n\\n    // \\u5224\\u65ad\\u662f\\u5426\\u5b58\\u5728\\u524d\\u7f6e\\u5927\\u533a\\u95f4\\n    function needsUpdateFirstOrSecondInterval(\\n        FundFeeStorageMemory memory sm,\\n        FundFeeVars memory vars,\\n        uint256 currentTime\\n    ) internal pure returns (bool) {\\n        if (vars.updatedAt == 0) {\\n            // \\u65f6\\u95f4\\u672a\\u521d\\u59cb\\u5316\\n            vars.updatedAt = (currentTime / sm.bInterval) * sm.bInterval;\\n            return true;\\n        }\\n\\n        // \\u5f53\\u524d\\u65f6\\u95f4 \\u5c0f\\u4e8e \\u5c0f\\u5468\\u671f\\u66f4\\u65b0\\u65f6\\u95f4\\n        if (currentTime < vars.updatedAt) return false;\\n\\n        // \\u5927\\u5468\\u671f\\u7684\\u66f4\\u65b0\\u65f6\\u95f4 + \\u5927\\u5468\\u671f\\u7684\\u5468\\u671f < \\u5f53\\u524d\\u65f6\\u95f4\\n        return sm.bUpdatedAt + sm.bInterval <= currentTime;\\n    }\\n\\n    // \\u5224\\u65ad\\u7b2c\\u4e00\\u65f6\\u6bb5\\u5b58\\u5728\\u7684\\u5468\\u671f\\u95f4\\u9694\\u6570\\n    function hasFirstInterval(FundFeeStorageMemory memory sm, FundFeeVars memory vars) internal pure returns (bool) {\\n        // \\u7b2c\\u4e00\\u6bb5\\u6709\\u591a\\u5c11\\u4e2a\\u5c0f\\u5468\\u671f\\u5269\\u4f59 = (\\u5c0f\\u5468\\u671f\\u7684\\u66f4\\u65b0\\u65f6\\u95f4 - \\u5927\\u5468\\u671f\\u7684\\u66f4\\u65b0\\u65f6\\u95f4) / \\u5c0f\\u5468\\u671f\\u7684\\u79d2\\u6570\\n        vars.intervals1 = (sm.aUpdatedAt - sm.bUpdatedAt) / sm.aInterval;\\n        return vars.intervals1 > 0;\\n    }\\n\\n    // \\u66f4\\u65b0\\u7b2c\\u4e00\\u65f6\\u6bb5\\u7ed3\\u675f\\u65f6\\u95f4\\u548cCumFRate\\n    function updateFirstInterval(FundFeeStorageMemory memory sm, FundFeeVars memory vars) internal pure {\\n        vars.updatedAt = sm.bUpdatedAt + sm.bInterval;\\n        vars.lCumFRate = sm.lCumFRate + (sm.lFRate * (vars.intervalsN - vars.intervals1)).toInt256();\\n        vars.sCumFRate = sm.sCumFRate + (sm.sFRate * (vars.intervalsN - vars.intervals1)).toInt256();\\n    }\\n\\n    // \\u5224\\u65ad\\u662f\\u5426\\u5b58\\u5728\\u7b2c\\u4e8c\\u65f6\\u6bb5\\n    function hasSecondInterval(FundFeeStorageMemory memory sm, uint256 currentTime, FundFeeVars memory vars)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        vars.intervals2 = (currentTime - vars.updatedAt) / sm.bInterval;\\n        return vars.intervals2 > 0;\\n    }\\n\\n    // \\u66f4\\u65b0\\u7b2c\\u4e8c\\u65f6\\u6bb5\\u7ed3\\u675f\\u65f6\\u95f4\\u548cCumFRate\\n    function updateSecondInterval(FundFeeStorageMemory memory sm, FundFeeVars memory vars) internal pure {\\n        vars.updatedAt += sm.bInterval * vars.intervals2;\\n        vars.lCumFRate = (sm.lFRate * vars.intervalsN).toInt256();\\n        vars.sCumFRate = (sm.sFRate * vars.intervalsN).toInt256();\\n    }\\n\\n    // \\u5224\\u65ad\\u662f\\u5426\\u5904\\u7406\\u8fc7\\u7b2c\\u4e00\\u65f6\\u6bb5\\u6216\\u7b2c\\u4e8c\\u65f6\\u6bb5\\n    /*\\n    function hasFirstOrSecondInterval(\\n        FundFeeVars memory vars\\n    ) internal pure returns (bool) {\\n        return vars.intervals1 > 0 || vars.intervals2 > 0;\\n    }\\n    */\\n\\n    // \\u5224\\u65ad\\u662f\\u5426\\u9700\\u8981\\u66f4\\u65b0\\u5c0f\\u5468\\u671f\\n    function updateThirdInterval(FundFeeStorageMemory memory sm, uint256 currentTime, FundFeeVars memory vars)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (currentTime < vars.updatedAt) {\\n            return false;\\n        }\\n        // (\\u5f53\\u524d\\u65f6\\u95f4 - \\u5185\\u5b58\\u4e2d\\u7ef4\\u62a4\\u7684\\u7b2c\\u4e8c\\u6bb5\\u7684\\u7ed3\\u675f\\u65f6\\u95f4) / \\u5c0f\\u5468\\u671f\\u79d2\\u6570\\n        vars.intervals3 = (currentTime - vars.updatedAt) / sm.aInterval;\\n        return vars.intervals3 > 0;\\n    }\\n\\n    // \\u65f6\\u6bb5\\u62c6\\u5206:\\n    // // ___    |________|________|________|________|    __\\n    function updateFundFee(\\n        uint256 lSize,\\n        uint256 sSize,\\n        uint256 currentTime,\\n        FundFeeStorageMemory memory sm,\\n        uint256 minCFRate,\\n        uint256 fundingFeeLossOffLimit\\n    )\\n        internal\\n        pure\\n        returns (\\n            FundFeeVars memory vars,\\n            FundFeeStorageMemory memory sm2,\\n            FundFeeVars memory vars2,\\n            bool update12Interval\\n        )\\n    {\\n        vars = sm.initializeFundFeeVars();\\n        update12Interval = sm.needsUpdateFirstOrSecondInterval(vars, currentTime);\\n        if (update12Interval) {\\n            if (sm.hasFirstInterval(vars)) {\\n                sm.updateFirstInterval(vars);\\n                _updateFundFeeStorageMemory(vars, lSize, sSize, minCFRate, fundingFeeLossOffLimit);\\n            }\\n            if (sm.hasSecondInterval(currentTime, vars)) {\\n                sm.updateSecondInterval(vars);\\n                for (uint256 i = 0; i < vars.intervals2; i++) {\\n                    _updateFundFeeStorageMemory(vars, lSize, sSize, minCFRate, fundingFeeLossOffLimit);\\n                }\\n            }\\n            vars2 = abi.decode(abi.encode(vars), (FundFeeVars));\\n            sm2 = abi.decode(abi.encode(sm), (FundFeeStorageMemory));\\n            vars.lCumFRate = 0;\\n            vars.sCumFRate = 0;\\n        }\\n        if (sm.updateThirdInterval(currentTime, vars)) {\\n            vars.updatedAt += sm.aInterval * vars.intervals3;\\n            vars.lCumFRate += (sm.lFRate * vars.intervals3).toInt256();\\n            vars.sCumFRate += (sm.sFRate * vars.intervals3).toInt256();\\n        }\\n    }\\n\\n    // \\u66f4\\u65b0\\u6b63\\u8d1f\\u8d44\\u91d1\\u8d39\\u548c\\u62b5\\u6263\\n    function _updateFundFeeStorageMemory(\\n        FundingRateCalculator.FundFeeVars memory vars,\\n        uint256 lSize,\\n        uint256 sSize,\\n        uint256 minCFRate,\\n        uint256 fundingFeeLossOffLimit\\n    ) internal pure {\\n        uint256 CFRate = calCFRate(vars.lCumFRate, vars.sCumFRate, minCFRate);\\n        (vars.lCFRate, vars.sCFRate, vars.deductAmount) = calNextCFRate(\\n            vars.lCumFRate, vars.sCumFRate, CFRate, fundingFeeLossOffLimit, vars.fundFeeLoss, lSize, sSize\\n        );\\n        vars.lCFRateDelta += vars.lCFRate;\\n        vars.sCFRateDelta += vars.sCFRate;\\n        vars.fundFeeLoss = vars.fundFeeLoss > vars.deductAmount ? vars.fundFeeLoss - vars.deductAmount : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1633dcf33da60d44e030c4c944d2a82b74817a141e6df909f0129192d240f14e\",\"license\":\"BUSL-1.1\"},\"src/lib/market/MarketHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\nlibrary MarketHandler { /* is IOrderBook, Ac */\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.market.storage\\\");\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Props {\\n        bool isSuspended;\\n        bool allowOpen;\\n        bool allowClose;\\n        bool validDecrease;\\n        uint16 minSlippage;\\n        uint16 maxSlippage;\\n        uint16 minLeverage;\\n        uint16 maxLeverage;\\n        uint16 minPayment;\\n        uint16 minCollateral;\\n        uint16 decreaseNumLimit; //default: 10\\n        uint32 maxTradeAmount;\\n    }\\n\\n    struct StorageStruct {\\n        address oracle;\\n        mapping(uint16 => Props) config;\\n        mapping(uint16 => string) name;\\n        mapping(uint16 => address) vault;\\n        mapping(uint16 => address) token;\\n        mapping(uint16 => uint256) balance;\\n        mapping(address vault => EnumerableSet.UintSet) marketIds;\\n    }\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    // function validPosition(bytes memory data) internal view {\\n    //     uint16 market;\\n    //     bool isIncrease;\\n    //     if (isIncrease) {\\n    //         validPay(market, 0);\\n    //     }\\n    //     uint256 _sizeDelta = 0;\\n    //     if (_sizeDelta > 0) {} else {\\n    //         validCollateralDelta(data);\\n    //     }\\n    //     // MarketDataTypes.UpdatePositionInputs memory params,\\n    //     // Position.Props memory position,\\n    //     // int256[] memory fees\\n    // }\\n\\n    // function validIncreaseOrder(bytes memory data) internal view {\\n    //     uint16 market;\\n    //     validPay(market, 0);\\n    //     // MarketDataTypes.UpdateOrderInputs memory vars,\\n    //     // int256 fees\\n    // }\\n\\n    // function validDecreaseOrder(bytes memory data) internal view {\\n    //     // uint16 market,\\n    //     // uint256 collateral,\\n    //     // uint256 collateralDelta,\\n    //     // uint256 size,\\n    //     // uint256 sizeDelta,\\n    //     // int256 fees,\\n    //     // uint256 decrOrderCount\\n    // }\\n\\n    // function validLev(uint16 market, uint256 newSize, uint256 newCollateral) internal view {}\\n    // function validTPSL(uint16 market, uint256 triggerPrice, uint256 tpPrice, uint256 slPrice, bool isLong)\\n    //     internal\\n    //     pure\\n    // {}\\n\\n    // function getDecreaseOrderValidation(uint16 market, uint256 decrOrderCount) internal view returns (bool isValid) {}\\n\\n    // function validateLiquidation(uint16 market, int256 fees, int256 liquidateFee, bool raise)\\n    //     internal\\n    //     view\\n    //     returns (uint8)\\n    // {}\\n    // //================================================================================================\\n    // // internal\\n    // //================================================================================================\\n    // function validSize(uint16 market, uint256 size, uint256 sizeDelta, bool isIncrease) internal pure {}\\n    // function validMarkPrice(uint16 market, bool isLong, uint256 price, bool isIncrease, bool isExec, uint256 markPrice)\\n    //     internal\\n    //     pure\\n    // {}\\n\\n    // function validSlippagePrice(bytes memory data) internal view {\\n    //     // MarketDataTypes.UpdatePositionInputs memory inputs // uint256 price, // \\uff08usdt\\uff09 // bool isLong, // uint256 slippage, // bool isIncrease, // bool isExec, // uint256 markPrice\\n    // }\\n    // function validCollateralDelta(bytes memory data) internal view {\\n    //     // uint16 market,\\n    //     // uint256 busType, // 1:increase 2. increase coll 3. decrease 4. decrease coll\\n    //     // uint256 collateral,\\n    //     // uint256 collateralDelta,\\n    //     // uint256 size,\\n    //     // uint256 sizeDelta,\\n    //     // int256 fees\\n    // }\\n    // function validPay(uint16 market, uint256 pay) internal view {}\\n}\\n\",\"keccak256\":\"0x4c9328d5bd6bff6b3e965569721dea186d7cd5ceafdad0f9b40a6321e8adc273\",\"license\":\"MIT\"},\"src/lib/oracle/OracleHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPriceFeed} from \\\"../../interfaces/IPriceFeed.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary OracleHandler {\\n    using SafeCast for int256;\\n\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"blex.oracle.storage\\\");\\n    uint256 constant PRICE_PRECISION = 10 ** 30;\\n    uint256 constant ONE_USD = PRICE_PRECISION;\\n    uint256 constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n    uint256 constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n    uint256 constant BP_DIVISOR = 10000;\\n\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    struct ConfigStruct {\\n        uint32 maxDeviationBP; // 1000\\n        uint32 priceDuration; // 300\\n        uint32 maxPriceUpdateDelay; // 3600\\n        uint32 priceDataInterval; // 60\\n        uint32 sampleSpace; // 3\\n    }\\n\\n    struct StorageStruct {\\n        address USDT;\\n        ConfigStruct config;\\n        mapping(uint16 => address) priceFeeds;\\n        mapping(uint16 => uint256) spreadBP;\\n        mapping(uint16 => uint256) prices;\\n        mapping(uint16 => uint256) maxCumulativeDeltaDiffs;\\n        mapping(uint16 => PriceDataItem) priceData;\\n    }\\n\\n    event PriceData(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event MaxCumulativeDeltaDiffExceeded(\\n        uint16 market, uint256 refPrice, uint256 fastPrice, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta\\n    );\\n    event UpdatePrice(address feed, uint16 indexed market, uint256 price);\\n\\n    function Storage() internal pure returns (StorageStruct storage fs) {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function config() internal view returns (ConfigStruct memory) {\\n        return Storage().config;\\n    }\\n\\n    function setPrices(uint16[] memory _markets, uint256[] memory _prices) internal {\\n        for (uint256 i = 0; i < _markets.length; i++) {\\n            _setPrice(_markets[i], _prices[i]);\\n        }\\n    }\\n\\n    function setPrice(uint16 _market, uint256 _price) internal {\\n        _setPrice(_market, _price);\\n    }\\n\\n    //==================================================================================================\\n    //================ view    functions================================================================\\n    //==================================================================================================\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBPIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBPIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case the maxDeviationBP between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n\\n    function getPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 chainPrice = getChainPrice(market, _maximise);\\n        return getFastPrice(market, chainPrice, _maximise);\\n    }\\n\\n    function getFastPrice(uint16 market, uint256 _refPrice, bool _maximise) internal view returns (uint256) {\\n        uint256 lastUpdate = uint256(Storage().priceData[market].refTime);\\n        uint256 fastPrice = Storage().prices[market];\\n        if (\\n            block.timestamp > lastUpdate + uint256(Storage().config.maxPriceUpdateDelay)\\n                || block.timestamp > lastUpdate + uint256(Storage().config.priceDuration) || fastPrice == 0\\n        ) {\\n            return _refPrice;\\n        }\\n\\n        uint256 diffBP = _refPrice > fastPrice ? _refPrice - fastPrice : fastPrice - _refPrice;\\n        diffBP = (diffBP * BP_DIVISOR) / _refPrice;\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBP is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        // 1. fastPrice\\n        // 2. fastprice > chainlink, false\\n        // 2. 1%\\n        // 3. fastPricechainlink/, fastPrice\\n\\n        if (favorFastPrice(market) && diffBP <= uint256(Storage().config.maxDeviationBP)) {\\n            return fastPrice;\\n        }\\n\\n        return comparePrices(_refPrice, fastPrice, _maximise);\\n    }\\n\\n    function comparePrices(uint256 price1, uint256 price2, bool maximize) private pure returns (uint256) {\\n        return maximize ? (price1 > price2 ? price1 : price2) : (price1 < price2 ? price1 : price2);\\n    }\\n\\n    function getChainPrice(uint16 market, bool _maximise) internal view returns (uint256) {\\n        uint256 xxxUSD = _getChainPrice(market, _maximise);\\n        uint256 _USDTUSD = _getChainPrice(market, _maximise);\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    //==================================================================================================\\n    //================ private functions================================================================\\n    //==================================================================================================\\n    function _setPrice(uint16 market, uint256 _price) internal {\\n        // check if the market has a price feed\\n        if (Storage().priceFeeds[market] != address(0)) {\\n            uint256 refPrice = _getLatestPriceWithUSDT(market);\\n            uint256 fastPrice = Storage().prices[market];\\n\\n            (uint256 prevRefPrice, uint256 refTime, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) =\\n                _getPriceData(market);\\n\\n            if (prevRefPrice > 0) {\\n                // chainlink\\n                uint256 refDeltaAmount = refPrice > prevRefPrice ? refPrice - prevRefPrice : prevRefPrice - refPrice;\\n                // fastPrice\\n                uint256 fastDeltaAmount = fastPrice > _price ? fastPrice - _price : _price - fastPrice;\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (\\n                    refTime / Storage().config.priceDataInterval != block.timestamp / Storage().config.priceDataInterval\\n                ) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n                //\\n                cumulativeRefDelta = cumulativeRefDelta + (refDeltaAmount * CUMULATIVE_DELTA_PRECISION) / prevRefPrice;\\n                cumulativeFastDelta = cumulativeFastDelta + (fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) / fastPrice;\\n            }\\n\\n            if (\\n                cumulativeFastDelta > cumulativeRefDelta\\n                    && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n            ) {\\n                emit MaxCumulativeDeltaDiffExceeded(\\n                    market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta\\n                );\\n            }\\n\\n            _setPriceData(market, refPrice, cumulativeRefDelta, cumulativeFastDelta);\\n            emit PriceData(market, refPrice, fastPrice, cumulativeRefDelta, cumulativeFastDelta);\\n        }\\n\\n        Storage().prices[market] = _price;\\n        emit UpdatePrice(msg.sender, market, _price);\\n    }\\n\\n    function _setPriceData(uint16 _market, uint256 _refPrice, uint256 _cumulativeRefDelta, uint256 _cumulativeFastDelta)\\n        private\\n    {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(_cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA, \\\"FastPriceFeed: invalid cumulativeRefDelta\\\");\\n        require(_cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA, \\\"FastPriceFeed: invalid cumulativeFastDelta\\\");\\n\\n        Storage().priceData[_market] = PriceDataItem(\\n            uint160(_refPrice), uint32(block.timestamp), uint32(_cumulativeRefDelta), uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _getLatestPriceWithUSDT(uint16 market) internal view returns (uint256) {\\n        uint256 xxxUSD = _getLatestPrice(market);\\n        uint256 _USDTUSD = (IPriceFeed(Storage().USDT).latestAnswer()).toUint256();\\n        if (xxxUSD < (2 ** 256 - 1) / PRICE_PRECISION) {\\n            return (xxxUSD * PRICE_PRECISION) / _USDTUSD;\\n        }\\n        return (xxxUSD / PRICE_PRECISION) * _USDTUSD;\\n    }\\n\\n    function _getLatestPrice(uint16 market) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n        IPriceFeed _priceFeed = IPriceFeed(_feed);\\n        int256 _price = _priceFeed.latestAnswer();\\n        require(_price > 0, \\\"PriceFeed: invalid price\\\");\\n        return uint256(_price);\\n    }\\n\\n    function _getChainPrice(uint16 market, bool _maximise) private view returns (uint256) {\\n        address _feed = Storage().priceFeeds[market];\\n        require(_feed != address(0), \\\"PriceFeed: invalid price feed\\\");\\n\\n        uint256 _price = 0;\\n        uint80 _id = IPriceFeed(Storage().priceFeeds[market]).latestRound();\\n\\n        for (uint80 i = 0; i < Storage().config.sampleSpace; i++) {\\n            if (_id <= i) {\\n                break;\\n            }\\n            uint256 p;\\n\\n            if (i == 0) {\\n                int256 _p = IPriceFeed(Storage().priceFeeds[market]).latestAnswer();\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            } else {\\n                (, int256 _p,,,) = IPriceFeed(Storage().priceFeeds[market]).getRoundData(_id - i);\\n                require(_p > 0, \\\"PriceFeed: invalid price\\\");\\n                p = uint256(_p);\\n            }\\n\\n            if (_price == 0) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (_maximise && p > _price) {\\n                _price = p;\\n                continue;\\n            }\\n\\n            if (!_maximise && p < _price) {\\n                _price = p;\\n            }\\n        }\\n\\n        require(_price > 0, \\\"PriceFeed: could not fetch price\\\");\\n        uint256 _decimals = IPriceFeed(Storage().priceFeeds[market]).decimals();\\n        return (_price * PRICE_PRECISION) / (10 ** _decimals);\\n    }\\n\\n    function _getPriceData(uint16 market) internal view returns (uint256, uint256, uint256, uint256) {\\n        PriceDataItem memory data = Storage().priceData[market];\\n        return (\\n            uint256(data.refPrice),\\n            uint256(data.refTime),\\n            uint256(data.cumulativeRefDelta),\\n            uint256(data.cumulativeFastDelta)\\n        );\\n    }\\n\\n    function favorFastPrice(uint16 market) internal view returns (bool) {\\n        (,, uint256 cumulativeRefDelta, uint256 cumulativeFastDelta) = _getPriceData(market);\\n        if (\\n            cumulativeFastDelta > cumulativeRefDelta\\n                && cumulativeFastDelta - cumulativeRefDelta > Storage().maxCumulativeDeltaDiffs[market]\\n        ) {\\n            // fast > chainlink, fast-chainlink >\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xad1f5ee47376eb63f8f7d4d7cf81a388db0131dd8009a6334140742d1f16bdc9\",\"license\":\"MIT\"},\"src/lib/position/PositionHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\npragma abicoder v2;\\n\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport {Position} from \\\"./../types/PositionStruct.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary PositionHandler {\\n    using Position for Position.Props;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using SafeCast for int128;\\n    using SafeCast for uint128;\\n\\n    bytes32 constant POS_STORAGE_POSITION = keccak256(\\\"blex.position.storage\\\");\\n\\n    struct PositionStorage {\\n        // save user position, address -> position\\n        mapping(bytes32 => mapping(address => Position.Props)) positions;\\n        // set of position address\\n        mapping(bytes32 => EnumerableSet.AddressSet) positionKeys;\\n        // global position\\n        mapping(bytes32 => Position.Props) globalPositions;\\n    }\\n\\n    event UpdatePosition(address indexed account, uint256 size, uint256 collateral);\\n    event RemovePosition(address indexed account, uint256 size, uint256 collateral);\\n\\n    function Storage() internal pure returns (PositionStorage storage fs) {\\n        bytes32 position = POS_STORAGE_POSITION;\\n        assembly {\\n            fs.slot := position\\n        }\\n    }\\n\\n    function storageKey(uint16 market, bool isLong) internal pure returns (bytes32 orderKey) {\\n        return bytes32(abi.encodePacked(isLong, market));\\n    }\\n\\n    struct Cache {\\n        uint16 market;\\n        address account;\\n        int256 collateralDelta;\\n        uint256 sizeDelta;\\n        uint256 markPrice;\\n        int256 fundingRate;\\n        bool isLong;\\n        bool isOpen;\\n        bytes32 sk;\\n        Position.Props position;\\n        Position.Props globalPosition;\\n    }\\n\\n    function increasePosition(bytes memory _data) internal returns (Position.Props memory result) {\\n        Cache memory cache;\\n        (\\n            cache.market,\\n            cache.account,\\n            cache.collateralDelta,\\n            cache.sizeDelta,\\n            cache.markPrice,\\n            cache.fundingRate,\\n            cache.isLong\\n        ) = abi.decode(_data, (uint16, address, int256, uint256, uint256, int256, bool));\\n        cache.isOpen = true;\\n        cache.sk = storageKey(cache.market, cache.isLong);\\n        cache.position = Storage().positions[cache.sk][cache.account];\\n\\n        if (cache.position.size == 0) cache.position.averagePrice = uint128(cache.markPrice);\\n\\n        if (cache.position.size > 0 && cache.sizeDelta > 0) {\\n            (bool _hasProfit, uint256 _realisedPnl) = cache.position.getPNL(cache.markPrice);\\n            cache.position.averagePrice =\\n                cache.position.calAveragePrice(cache.sizeDelta, cache.markPrice, _realisedPnl, _hasProfit);\\n\\n            int256 _pnl = _hasProfit ? int256(_realisedPnl) : -int256(_realisedPnl);\\n\\n            result.realisedPnl = _pnl;\\n            result.averagePrice = cache.position.averagePrice;\\n        }\\n\\n        cache.position.collateral = (cache.position.collateral.toInt256() + cache.collateralDelta).toUint256();\\n        cache.position.entryFundingRate = cache.fundingRate;\\n        cache.position.size = cache.position.size + cache.sizeDelta;\\n        cache.position.isLong = cache.isLong;\\n        cache.position.lastTime = uint32(block.timestamp);\\n\\n        require(cache.position.isValid(), \\\"positionBook: invalid position\\\");\\n        set(cache);\\n        result.size = cache.position.size;\\n        result.collateral = cache.position.collateral;\\n    }\\n\\n    function decreasePosition(bytes memory _data) internal returns (Position.Props memory result) {\\n        Cache memory cache;\\n        (cache.market, cache.account, cache.collateralDelta, cache.sizeDelta, cache.fundingRate, cache.isLong) =\\n            abi.decode(_data, (uint16, address, int256, uint256, int256, bool));\\n        cache.isOpen = false;\\n        cache.sk = storageKey(cache.market, cache.isLong);\\n        cache.position = Storage().positions[cache.sk][cache.account];\\n        require(cache.position.lastTime != uint32(block.timestamp), \\\"pb:same block\\\");\\n        require(cache.position.isValid(), \\\"positionBook: invalid position\\\");\\n        if (cache.collateralDelta > 0) {\\n            require(cache.position.collateral >= cache.collateralDelta.toUint256(), \\\"positionBook: invalid collateral\\\");\\n        }\\n        require(cache.position.size >= cache.sizeDelta, \\\"positionBook: invalid size\\\");\\n        if (cache.position.size != cache.sizeDelta) {\\n            cache.position.entryFundingRate = cache.fundingRate;\\n            cache.position.size = cache.position.size - cache.sizeDelta;\\n            cache.position.collateral = (cache.position.collateral.toInt256() - cache.collateralDelta).toUint256();\\n            require(cache.position.isValid(), \\\"positionBook: invalid position\\\");\\n            set(cache);\\n            result.size = cache.position.size;\\n            result.collateral = cache.position.collateral;\\n        } else {\\n            remove(cache);\\n        }\\n    }\\n\\n    function liquidatePosition(bytes memory _data) internal returns (Position.Props memory result) {\\n        Cache memory cache;\\n        (cache.market, cache.account, cache.markPrice, cache.isLong) =\\n            abi.decode(_data, (uint16, address, uint256, bool));\\n        cache.isOpen = false;\\n        cache.sk = storageKey(cache.market, cache.isLong);\\n        cache.position = Storage().positions[cache.sk][cache.account];\\n        require(cache.position.isExist(), \\\"positionBook: position does not exist\\\");\\n\\n        if (cache.markPrice != 0) {\\n            (bool _hasProfit, uint256 _realisedPnl) = cache.position.getPNL(cache.markPrice);\\n            int256 _pnl = _hasProfit ? int256(_realisedPnl) : -int256(_realisedPnl);\\n\\n            result.realisedPnl = _pnl;\\n        }\\n        remove(cache);\\n        result.size = cache.position.size;\\n        result.collateral = cache.position.collateral;\\n    }\\n\\n    // =====================================================\\n    //           view only\\n    // =====================================================\\n    function getPNL(Position.Props memory _position, uint256 sizeDelta, uint256 markPrice)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (_position.size == 0) {\\n            return 0;\\n        }\\n\\n        (bool _hasProfit, uint256 _pnl) = Position.getPNL(_position, markPrice);\\n        if (sizeDelta != 0) {\\n            _pnl = (sizeDelta * _pnl) / _position.size;\\n        }\\n\\n        return _hasProfit ? int256(_pnl) : -int256(_pnl);\\n    }\\n\\n    function getMarketPNL(uint16 market, uint256 longPrice, uint256 shortPrice) internal view returns (int256) {\\n        int256 _totalPNL = _getMarketPNL(market, longPrice, true);\\n        _totalPNL += _getMarketPNL(market, shortPrice, false);\\n        return _totalPNL;\\n    }\\n\\n    function _getMarketPNL(uint16 market, uint256 markPrice, bool isLong) private view returns (int256) {\\n        Position.Props memory _position = _getGlobalPosition(storageKey(market, isLong));\\n        if (_position.size == 0) {\\n            return 0;\\n        }\\n\\n        (bool _hasProfit, uint256 _pnl) = _getPNL(_position, markPrice);\\n        return _hasProfit ? int256(_pnl) : -int256(_pnl);\\n    }\\n\\n    function _getPNL(Position.Props memory position, uint256 markPrice)\\n        private\\n        pure\\n        returns (bool _hasProfit, uint256 _realisedPnl)\\n    {\\n        (_hasProfit, _realisedPnl) = position.getPNL(markPrice);\\n    }\\n\\n    function _getGlobalPosition(bytes32 sk) private view returns (Position.Props memory _position) {\\n        _position = Storage().globalPositions[sk];\\n    }\\n\\n    function _calGlobalPosition(Cache memory cache) private view returns (Position.Props memory) {\\n        Position.Props memory _position = Storage().globalPositions[cache.sk];\\n        if (cache.isOpen) {\\n            uint256 _averagePrice = _getGlobalAveragePrice(_position, cache.sizeDelta, cache.markPrice);\\n            require(_averagePrice > 100, \\\"pb:invalid global position\\\");\\n            _position.averagePrice = _averagePrice;\\n            _position.size += cache.sizeDelta;\\n            _position.collateral = (_position.collateral.toInt256() + cache.collateralDelta).toUint256();\\n            _position.isLong = cache.isLong;\\n            _position.lastTime = uint32(block.timestamp);\\n\\n            return _position;\\n        }\\n\\n        _position.size -= cache.sizeDelta;\\n        _position.collateral -= cache.collateralDelta.toUint256();\\n\\n        return _position;\\n    }\\n\\n    function _getGlobalAveragePrice(Position.Props memory position, uint256 sizeDelta, uint256 markPrice)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        if (position.size == 0) {\\n            return markPrice;\\n        }\\n        if (position.size > 0 && sizeDelta > 0) {\\n            (bool _hasProfit, uint256 _pnl) = position.getPNL(markPrice);\\n            position.averagePrice = position.calAveragePrice(sizeDelta, markPrice, _pnl, _hasProfit);\\n        }\\n\\n        return position.averagePrice;\\n    }\\n\\n    function set(Cache memory cache) private {\\n        cache.globalPosition = _calGlobalPosition(cache);\\n        Storage().positions[cache.sk][cache.account] = cache.position;\\n        Storage().globalPositions[cache.sk] = cache.globalPosition;\\n        Storage().positionKeys[cache.sk].add(cache.account);\\n        emit UpdatePosition(cache.account, cache.position.size, cache.position.collateral);\\n    }\\n\\n    function remove(Cache memory cache) private {\\n        bool has = Storage().positionKeys[cache.sk].contains(cache.account);\\n        require(has, \\\"position does not exist\\\");\\n        Storage().globalPositions[cache.sk] = cache.globalPosition;\\n        delete Storage().positions[cache.sk][cache.account];\\n        Storage().positionKeys[cache.sk].remove(cache.account);\\n        emit RemovePosition(cache.account, cache.position.size, cache.position.collateral);\\n    }\\n}\\n\",\"keccak256\":\"0xbd1f6e5d4d2e718a714f9947c30b5893686d03f40dd34501d2ca89f74de0ebff\",\"license\":\"BUSL-1.1\"},\"src/lib/types/FeeType.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\nlibrary FeeType {\\n    enum T {\\n        OpenFee, // 0\\n        CloseFee, // 1\\n        FundFee, // 2\\n        ExecFee, // 3\\n        LiqFee, // 4\\n        BuyLpFee, // 5\\n        SellLpFee, // 6\\n        ExtraFee0,\\n        ExtraFee1,\\n        ExtraFee2,\\n        ExtraFee3,\\n        ExtraFee4,\\n        Counter\\n    }\\n}\\n\",\"keccak256\":\"0xe9bd7af35a65739badd5e382627cfcb5c81850dd0369a2f942638bb0e8ee37ec\",\"license\":\"BUSL-1.1\"},\"src/lib/types/MarketDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary MarketDataTypes {\\n    struct Cache {\\n        uint256 oraclePrice;\\n        uint256 pay;\\n        uint256 slippage;\\n        uint16 market;\\n        bool isLong;\\n        bool isOpen;\\n        bool isCreate;\\n        bool isFromMarket;\\n        uint256 sizeDelta;\\n        uint256 price;\\n        uint256 collateralDelta;\\n        uint256 tp;\\n        uint256 sl;\\n        uint64 orderId;\\n        address account;\\n        bool isExec;\\n        uint8 liqState;\\n        uint64 fromOrder;\\n        bytes32 refCode;\\n        uint8 execNum;\\n        bool isKeepLev;\\n        bool isKeepLevTP;\\n        bool isKeepLevSL;\\n        bool triggerAbove;\\n        uint128 gas;\\n    }\\n\\n    function decodeCache(bytes memory data) internal pure returns (Cache memory inputs) {\\n        // (\\n        //     inputs.pay,\\n        //     inputs.slippage,\\n        //     inputs.market,\\n        //     inputs.isLong,\\n        //     inputs.isOpen,\\n        //     inputs.isCreate,\\n        //     inputs.sizeDelta,\\n        //     inputs.price,\\n        //     inputs.collateralDelta,\\n        //     inputs.tp,\\n        //     inputs.sl,\\n        //     inputs.account,\\n        //     inputs.refCode,\\n        //     inputs.keepLev,\\n        //     inputs.orderId,\\n        //     inputs.isExec,\\n        //     inputs.triggerAbove,\\n        //     inputs.keepLevSL,\\n        //     inputs.keepLevTP\\n        // ) = abi.decode(\\n        //     data,\\n        //     (\\n        //         uint256,\\n        //         uint256,\\n        //         uint16,\\n        //         bool,\\n        //         bool,\\n        //         bool,\\n        //         uint256,\\n        //         uint256,\\n        //         uint256,\\n        //         uint256,\\n        //         uint256,\\n        //         uint64,\\n        //         address,\\n        //         bytes32,\\n        //         bool,\\n        //         uint256,\\n        //         bool,\\n        //         bool,\\n        //         bool,\\n        //         bool\\n        //     )\\n        // );\\n    }\\n}\\n\",\"keccak256\":\"0xe6b709d21832335dea63b87e015aaea68942d9574f4d1e86a1665a4a22d1a066\",\"license\":\"BUSL-1.1\"},\"src/lib/types/OrderStruct.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nlibrary Order {\\n    using Order for Props;\\n\\n    uint8 internal constant STRUCT_VERSION = 0x01;\\n\\n    struct Props {\\n        //====0\\n        bytes32 refCode;\\n        //====1\\n        uint128 collateral;\\n        uint128 size;\\n        //====2\\n        uint256 price;\\n        uint256 tp;\\n        //====3\\n        bool triggerAbove;\\n        bool isFromMarket;\\n        bool isKeepLev;\\n        bool isKeepLevTP;\\n        bool isKeepLevSL;\\n        uint64 orderID;\\n        uint64 pairId;\\n        uint64 fromId;\\n        uint32 updatedAtBlock;\\n        uint8 extra0;\\n        //====4\\n        address account; //224\\n        uint96 extra1;\\n        //====5\\n        uint256 sl;\\n        bool isIncrease;\\n        bool isLong;\\n        uint16 market;\\n        uint96 extra2; //todo\\n        uint128 gas;\\n        uint8 version;\\n    }\\n\\n    function getKey(Props memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(order.account, order.orderID));\\n    }\\n\\n    function updateTime(Props memory _order) internal view {\\n        _order.updatedAtBlock = uint32(block.timestamp);\\n    }\\n\\n    function isMarkPriceValid(Props memory _order, uint256 _oraclePrice) internal pure returns (bool) {\\n        // TODO\\n        return _order.isFromMarket || _order.price == _oraclePrice;\\n    }\\n\\n    function validOrderAccountAndID(Props memory order) internal pure {\\n        require(order.account != address(0), \\\"invalid order key\\\");\\n        require(order.orderID != 0, \\\"invalid order key\\\");\\n    }\\n\\n    function validTPSL(Props memory _order, bool _isLong) internal pure {\\n        if (_order.tp > 0) {\\n            require(_order.tp > _order.price == _isLong, \\\"OrderBook:tp<price\\\");\\n        }\\n        if (_order.sl > 0) {\\n            require(_order.price > _order.sl == _isLong, \\\"OrderBook:sl>price\\\");\\n        }\\n    }\\n    // \\u7cbe\\u5ea6\\n    // \\u521b\\u5efa\\u7ed3\\u6784\\u4f53\\n    // valid\\n    // \\u8f6c\\u6362\\u7ed3\\u6784\\u4f53\\n}\\n\",\"keccak256\":\"0x64e96edf2a775a54f0b93fa387425d00397552477333d14632af68b9172c8aa2\",\"license\":\"BUSL-1.1\"},\"src/lib/types/PositionStruct.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Order} from \\\"./OrderStruct.sol\\\";\\n\\nlibrary Position {\\n    struct Props {\\n        // 1\\n        uint256 size;\\n        uint256 collateral;\\n        // 2\\n        int256 entryFundingRate;\\n        // 3\\n        int256 realisedPnl;\\n        // 4\\n        uint256 averagePrice;\\n        bool isLong;\\n        uint32 lastTime;\\n        uint16 market;\\n        uint72 extra0;\\n    }\\n\\n    function createPositionFromOrder(Order.Props memory order) internal view returns (Props memory result) {\\n        result.size = order.size;\\n        result.collateral = order.collateral;\\n        result.isLong = order.isLong;\\n        result.market = order.market;\\n        result.averagePrice = order.price;\\n        result.lastTime = uint32(block.timestamp);\\n        return result;\\n    }\\n\\n    function calAveragePrice(Props memory position, uint256 sizeDelta, uint256 markPrice, uint256 pnl, bool hasProfit)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 _size = position.size + sizeDelta;\\n        uint256 _netSize;\\n\\n        if (position.isLong) {\\n            _netSize = hasProfit ? _size + pnl : _size - pnl;\\n        } else {\\n            _netSize = hasProfit ? _size - pnl : _size + pnl;\\n        }\\n\\n        return (markPrice * _size) / _netSize;\\n    }\\n\\n    function getLeverage(Props memory position) internal pure returns (uint256) {\\n        return position.size / position.collateral;\\n    }\\n\\n    function getPNL(Props memory position, uint256 price) internal pure returns (bool, uint256) {\\n        uint256 _priceDelta =\\n            position.averagePrice > price ? position.averagePrice - price : price - position.averagePrice;\\n        uint256 _pnl = (position.size * _priceDelta) / position.averagePrice;\\n        bool _hasProfit;\\n\\n        if (position.isLong) {\\n            _hasProfit = price > position.averagePrice;\\n        } else {\\n            _hasProfit = position.averagePrice > price;\\n        }\\n\\n        return (_hasProfit, _pnl);\\n    }\\n\\n    function isExist(Props memory position) internal pure returns (bool) {\\n        return (position.size > 0);\\n    }\\n\\n    // only valid data of position, not include the business logic\\n    function isValid(Props memory position) internal pure returns (bool) {\\n        if (position.size == 0) {\\n            return false;\\n        }\\n        if (position.size < position.collateral) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xbabd6db2c3c762e66a19ff6e617a4b1ccfb9ac945a5d545d364d5a3c2a6c5a87\",\"license\":\"BUSL-1.1\"},\"src/lib/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary Calc {\\n    using SignedMath for int256;\\n\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (x >= y) return x - y;\\n        else return y - x;\\n    }\\n\\n    function abs(int256 x, int256 y) internal pure returns (int256) {\\n        if (x >= y) return x - y;\\n        else return y - x;\\n    }\\n\\n    function sum(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    function sum(int256 a, uint256 b) internal pure returns (int256) {\\n        return a + SafeCast.toInt256(b);\\n    }\\n\\n    function toSigned(\\n        uint256 a,\\n        bool isPositive\\n    ) internal pure returns (int256) {\\n        if (isPositive) {\\n            return SafeCast.toInt256(a);\\n        } else {\\n            return -SafeCast.toInt256(a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x975fcdbdbc884887ca5005b0b189cc613631c819cfaa89d5ae2dc88b720cfff0\",\"license\":\"BUSL-1.1\"},\"src/lib/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function valuesAt(\\n        EnumerableSet.Bytes32Set storage set,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) {\\n            end = max;\\n        }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n    function valuesAt(\\n        EnumerableSet.AddressSet storage set,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) {\\n            end = max;\\n        }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n    function valuesAt(\\n        EnumerableSet.UintSet storage set,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (uint256[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) {\\n            end = max;\\n        }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; ) {\\n            items[i - start] = set.at(i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0xf3e52ff4723275712a8d2754b9a75d20b39ac2f2b5f1d51fb1208bf9a62f3060\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061352d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100e55760003560e01c8062056b95146100ea57806313a300131461011c5780634da4ef301461014c578063653d64b61461017c57806370801978146101ac57806371127e8a146101dc578063735a28851461020d5780637370cf1c1461023d57806379eba7091461026d57806389d797b91461029d5780638d094b1e146102cd578063b0a3961a146102fe578063bd11025d1461032e578063cf9410f11461035e578063d4f8ba011461038e578063daa39c53146103be578063dd22378d146103ef578063ec2c90161461040b575b600080fd5b61010460048036038101906100ff91906121ab565b610429565b60405161011393929190612368565b60405180910390f35b610136600480360381019061013191906121ab565b61072c565b6040516101439190612444565b60405180910390f35b610166600480360381019061016191906124ca565b610733565b6040516101739190612621565b60405180910390f35b61019660048036038101906101919190612643565b61077e565b6040516101a3919061279b565b60405180910390f35b6101c660048036038101906101c191906127e3565b61088d565b6040516101d39190612832565b60405180910390f35b6101f660048036038101906101f191906121ab565b610970565b60405161020492919061285c565b60405180910390f35b61022760048036038101906102229190612885565b6109cf565b60405161023491906128d8565b60405180910390f35b610257600480360381019061025291906128f3565b6109d8565b604051610264919061297d565b60405180910390f35b610287600480360381019061028291906121ab565b6109e3565b6040516102949190612a8e565b60405180910390f35b6102b760048036038101906102b29190612aaa565b610b94565b6040516102c4919061279b565b60405180910390f35b6102e760048036038101906102e291906127e3565b610ce2565b6040516102f5929190612b11565b60405180910390f35b61031860048036038101906103139190612b3c565b610f6a565b604051610325919061297d565b60405180910390f35b61034860048036038101906103439190612643565b61103c565b60405161035591906128d8565b60405180910390f35b610378600480360381019061037391906121ab565b611078565b604051610385919061297d565b60405180910390f35b6103a860048036038101906103a391906121ab565b61107f565b6040516103b591906128d8565b60405180910390f35b6103d860048036038101906103d391906127e3565b611086565b6040516103e692919061285c565b60405180910390f35b61040960048036038101906104049190612b69565b611161565b005b610413611166565b6040516104209190612444565b60405180910390f35b6060806060600c8081111561044157610440612bbc565b5b60ff1667ffffffffffffffff81111561045d5761045c612beb565b5b60405190808252806020026020018201604052801561048b5781602001602082028036833780820191505090505b50925060005b600c808111156104a4576104a3612bbc565b5b60ff168160ff161015610522576104b961116b565b60060160008661ffff1661ffff16815260200190815260200160002060008260ff1660ff16815260200190815260200160002054848260ff168151811061050357610502612c1a565b5b602002602001018181525050808061051a90612c85565b915050610491565b50600267ffffffffffffffff81111561053e5761053d612beb565b5b60405190808252806020026020018201604052801561056c5781602001602082028036833780820191505090505b50915061057761116b565b60080160008561ffff1661ffff1681526020019081526020016000206000600115151515815260200190815260200160002054826000815181106105be576105bd612c1a565b5b6020026020010181815250506105d261116b565b60080160008561ffff1661ffff168152602001908152602001600020600080151515158152602001908152602001600020548260018151811061061857610617612c1a565b5b602002602001018181525050600267ffffffffffffffff81111561063f5761063e612beb565b5b60405190808252806020026020018201604052801561066d5781602001602082028036833780820191505090505b50905061067861116b565b60070160008561ffff1661ffff1681526020019081526020016000206000600115151515815260200190815260200160002054816000815181106106bf576106be612c1a565b5b6020026020010181815250506106d361116b565b60070160008561ffff1661ffff168152602001908152602001600020600080151515158152602001908152602001600020548160018151811061071957610718612c1a565b5b6020026020010181815250509193909250565b6060919050565b6060600061073f611198565b905061077385858360010160006107568b896111c5565b81526020019081526020016000206111fa9092919063ffffffff16565b915050949350505050565b61078661207e565b6000610790611198565b90508060020160006107a286866111c5565b81526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff168152505091505092915050565b600080610898611198565b905060008160000160006108ad8760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541180610967575060008160000160006109168760006111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154115b91505092915050565b600080600061097d611198565b90508060020160006109908660016111c5565b8152602001908152602001600020600001548160020160006109b38760006111c5565b8152602001908152602001600020600001549250925050915091565b60009392505050565b600095945050505050565b6109eb6120e1565b6109f3611306565b60010160008361ffff1661ffff168152602001908152602001600020604051806101800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900460ff161515151581526020016000820160039054906101000a900460ff161515151581526020016000820160049054906101000a900461ffff1661ffff1661ffff1681526020016000820160069054906101000a900461ffff1661ffff1661ffff1681526020016000820160089054906101000a900461ffff1661ffff1661ffff16815260200160008201600a9054906101000a900461ffff1661ffff1661ffff16815260200160008201600c9054906101000a900461ffff1661ffff1661ffff16815260200160008201600e9054906101000a900461ffff1661ffff1661ffff1681526020016000820160109054906101000a900461ffff1661ffff1661ffff1681526020016000820160129054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b610b9c61207e565b6000610ba6611198565b9050806000016000610bb888866111c5565b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff1681525050915050949350505050565b610cea61207e565b610cf261207e565b6000610cfc611198565b9050806000016000610d0f8760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509250806000016000610e418760006111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509150509250929050565b600080610f75611306565b60060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610fc282611333565b90506000805b8251811015611030576000838281518110610fe657610fe5612c1a565b5b6020026020010151905061100f81610fff836001611354565b61100a846000611354565b611377565b8361101a9190612cae565b925050808061102890612cf2565b915050610fc8565b50809350505050919050565b600080611047611198565b905061106f81600101600061105c87876111c5565b81526020019081526020016000206113ac565b91505092915050565b6000919050565b6000919050565b6000806000611093611198565b90508060000160006110a68760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548160000160006111068860006111c5565b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015492509250509250929050565b505050565b606090565b6000807f8044e54adfaacc587fefea0831a427898a157664a4fc313bb47c3132ec6276ed90508091505090565b6000807f92bcfabaf0a890def3092675474357e5f93a0f117ca63a3db421d44c5b55fba590508091505090565b600081836040516020016111da929190612db8565b6040516020818303038152906040526111f290612e20565b905092915050565b60606000611207856113ac565b905080831115611215578092505b600084846112239190612e87565b67ffffffffffffffff81111561123c5761123b612beb565b5b60405190808252806020026020018201604052801561126a5781602001602082028036833780820191505090505b50905060008590505b848110156112f95761128e81886113c190919063ffffffff16565b82878361129b9190612e87565b815181106112ac576112ab612c1a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806112f190612cf2565b915050611273565b5080925050509392505050565b6000807f2eec39e2b6bcfb5f1ee2be0b6e9d5a470a45585b1e2f7f291af9fb9f551763d090508091505090565b60606000611343836000016113db565b905060608190508092505050919050565b6000806113618484611437565b905061136e8482856114f0565b91505092915050565b60008061138685856001611686565b905061139485846000611686565b8161139f9190612cae565b9050809150509392505050565b60006113ba826000016116e7565b9050919050565b60006113d083600001836116f8565b60001c905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561142b57602002820191906000526020600020905b815481526020019060010190808311611417575b50505050509050919050565b6000806114448484611723565b905060006114528585611723565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61148d9190612eea565b8210156114c157806c0c9f2c9cd04674edea40000000836114ae9190612f1b565b6114b89190612eea565b925050506114ea565b806c0c9f2c9cd04674edea40000000836114db9190612eea565b6114e59190612f1b565b925050505b92915050565b6000806114fb611cb0565b60060160008661ffff1661ffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050600061153d611cb0565b60040160008761ffff1661ffff168152602001908152602001600020549050611564611cb0565b60010160000160089054906101000a900463ffffffff1663ffffffff168261158c9190612f5d565b4211806115c7575061159c611cb0565b60010160000160049054906101000a900463ffffffff1663ffffffff16826115c49190612f5d565b42115b806115d25750600081145b156115e157849250505061167f565b60008186116115fb5785826115f69190612e87565b611608565b81866116079190612e87565b5b905085612710826116199190612f1b565b6116239190612eea565b905061162e87611cdd565b801561165e575061163d611cb0565b60010160000160009054906101000a900463ffffffff1663ffffffff168111155b1561166e5781935050505061167f565b611679868387611d4a565b93505050505b9392505050565b60008061169b61169686856111c5565b611d7e565b905060008160000151036116b35760009150506116e0565b6000806116c08387611e7d565b91509150816116d857806116d390612f91565b6116da565b805b93505050505b9392505050565b600081600001805490509050919050565b60008260000182815481106117105761170f612c1a565b5b9060005260206000200154905092915050565b60008061172e611cb0565b60020160008561ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d390613036565b60405180910390fd5b6000806117e7611cb0565b60020160008761ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190613098565b905060005b61189f611cb0565b60010160000160109054906101000a900463ffffffff1663ffffffff168169ffffffffffffffffffff161015611b76578069ffffffffffffffffffff168269ffffffffffffffffffff161115611b76576000808269ffffffffffffffffffff1603611a0757600061190e611cb0565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b991906130f1565b9050600081136119fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f59061316a565b60405180910390fd5b80915050611b20565b6000611a11611cb0565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6fc8f58486611a75919061318a565b6040518263ffffffff1660e01b8152600401611a9191906131d7565b60a060405180830381865afa158015611aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad29190613207565b50505091505060008113611b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b129061316a565b60405180910390fd5b809150505b60008403611b315780935050611b63565b868015611b3d57508381115b15611b4b5780935050611b63565b86158015611b5857508381105b15611b61578093505b505b8080611b6e90613282565b915050611897565b5060008211611bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb190613300565b60405180910390fd5b6000611bc4611cb0565b60020160008861ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f919061334c565b60ff16905080600a611c8191906134ac565b6c0c9f2c9cd04674edea4000000084611c9a9190612f1b565b611ca49190612eea565b94505050505092915050565b6000807f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490508091505090565b6000806000611ceb84611ea2565b9350935050508181118015611d2e5750611d03611cb0565b60050160008561ffff1661ffff168152602001908152602001600020548282611d2c9190612e87565b115b15611d3e57600092505050611d45565b6001925050505b919050565b600081611d6557828410611d5e5782611d60565b835b611d75565b828411611d725782611d74565b835b5b90509392505050565b611d8661207e565b611d8e611198565b60020160008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509050919050565b600080611e938385611fef90919063ffffffff16565b80925081935050509250929050565b6000806000806000611eb2611cb0565b60060160008761ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16816020015163ffffffff16826040015163ffffffff16836060015163ffffffff169450945094509450509193509193565b6000806000838560800151116120145784608001518461200f9190612e87565b612025565b8385608001516120249190612e87565b5b90506000856080015182876000015161203e9190612f1b565b6120489190612eea565b905060008660a00151156120645786608001518611905061206e565b8587608001511190505b8082945094505050509250929050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600063ffffffff168152602001600061ffff168152602001600068ffffffffffffffffff1681525090565b604051806101800160405280600015158152602001600015158152602001600015158152602001600015158152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600063ffffffff1681525090565b600080fd5b600061ffff82169050919050565b61218881612171565b811461219357600080fd5b50565b6000813590506121a58161217f565b92915050565b6000602082840312156121c1576121c061216c565b5b60006121cf84828501612196565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61221781612204565b82525050565b6000612229838361220e565b60208301905092915050565b6000602082019050919050565b600061224d826121d8565b61225781856121e3565b9350612262836121f4565b8060005b8381101561229357815161227a888261221d565b975061228583612235565b925050600181019050612266565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122df816122cc565b82525050565b60006122f183836122d6565b60208301905092915050565b6000602082019050919050565b6000612315826122a0565b61231f81856122ab565b935061232a836122bc565b8060005b8381101561235b57815161234288826122e5565b975061234d836122fd565b92505060018101905061232e565b5085935050505092915050565b600060608201905081810360008301526123828186612242565b90508181036020830152612396818561230a565b905081810360408301526123aa818461230a565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123ee5780820151818401526020810190506123d3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612416826123b4565b61242081856123bf565b93506124308185602086016123d0565b612439816123fa565b840191505092915050565b6000602082019050818103600083015261245e818461240b565b905092915050565b61246f81612204565b811461247a57600080fd5b50565b60008135905061248c81612466565b92915050565b60008115159050919050565b6124a781612492565b81146124b257600080fd5b50565b6000813590506124c48161249e565b92915050565b600080600080608085870312156124e4576124e361216c565b5b60006124f287828801612196565b94505060206125038782880161247d565b93505060406125148782880161247d565b9250506060612525878288016124b5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125888261255d565b9050919050565b6125988161257d565b82525050565b60006125aa838361258f565b60208301905092915050565b6000602082019050919050565b60006125ce82612531565b6125d8818561253c565b93506125e38361254d565b8060005b838110156126145781516125fb888261259e565b9750612606836125b6565b9250506001810190506125e7565b5085935050505092915050565b6000602082019050818103600083015261263b81846125c3565b905092915050565b6000806040838503121561265a5761265961216c565b5b600061266885828601612196565b9250506020612679858286016124b5565b9150509250929050565b61268c81612492565b82525050565b600063ffffffff82169050919050565b6126ab81612692565b82525050565b6126ba81612171565b82525050565b600068ffffffffffffffffff82169050919050565b6126de816126c0565b82525050565b610120820160008201516126fb600085018261220e565b50602082015161270e602085018261220e565b50604082015161272160408501826122d6565b50606082015161273460608501826122d6565b506080820151612747608085018261220e565b5060a082015161275a60a0850182612683565b5060c082015161276d60c08501826126a2565b5060e082015161278060e08501826126b1565b506101008201516127956101008501826126d5565b50505050565b6000610120820190506127b160008301846126e4565b92915050565b6127c08161257d565b81146127cb57600080fd5b50565b6000813590506127dd816127b7565b92915050565b600080604083850312156127fa576127f961216c565b5b600061280885828601612196565b9250506020612819858286016127ce565b9150509250929050565b61282c81612492565b82525050565b60006020820190506128476000830184612823565b92915050565b61285681612204565b82525050565b6000604082019050612871600083018561284d565b61287e602083018461284d565b9392505050565b60008060006060848603121561289e5761289d61216c565b5b60006128ac868287016127ce565b93505060206128bd868287016127ce565b92505060406128ce868287016124b5565b9150509250925092565b60006020820190506128ed600083018461284d565b92915050565b600080600080600060a0868803121561290f5761290e61216c565b5b600061291d88828901612196565b955050602061292e888289016127ce565b945050604061293f8882890161247d565b93505060606129508882890161247d565b9250506080612961888289016124b5565b9150509295509295909350565b612977816122cc565b82525050565b6000602082019050612992600083018461296e565b92915050565b610180820160008201516129af6000850182612683565b5060208201516129c26020850182612683565b5060408201516129d56040850182612683565b5060608201516129e86060850182612683565b5060808201516129fb60808501826126b1565b5060a0820151612a0e60a08501826126b1565b5060c0820151612a2160c08501826126b1565b5060e0820151612a3460e08501826126b1565b50610100820151612a496101008501826126b1565b50610120820151612a5e6101208501826126b1565b50610140820151612a736101408501826126b1565b50610160820151612a886101608501826126a2565b50505050565b600061018082019050612aa46000830184612998565b92915050565b60008060008060808587031215612ac457612ac361216c565b5b6000612ad287828801612196565b9450506020612ae3878288016127ce565b9350506040612af48782880161247d565b9250506060612b05878288016124b5565b91505092959194509250565b600061024082019050612b2760008301856126e4565b612b356101208301846126e4565b9392505050565b600060208284031215612b5257612b5161216c565b5b6000612b60848285016127ce565b91505092915050565b600080600060608486031215612b8257612b8161216c565b5b6000612b9086828701612196565b9350506020612ba1868287016127ce565b9250506040612bb2868287016124b5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000612c9082612c78565b915060ff8203612ca357612ca2612c49565b5b600182019050919050565b6000612cb9826122cc565b9150612cc4836122cc565b925082820190508281121560008312168382126000841215161715612cec57612ceb612c49565b5b92915050565b6000612cfd82612204565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d2f57612d2e612c49565b5b600182019050919050565b60008160f81b9050919050565b6000612d5282612d3a565b9050919050565b6000612d6482612d47565b9050919050565b612d7c612d7782612492565b612d59565b82525050565b60008160f01b9050919050565b6000612d9a82612d82565b9050919050565b612db2612dad82612171565b612d8f565b82525050565b6000612dc48285612d6b565b600182019150612dd48284612da1565b6002820191508190509392505050565b6000819050602082019050919050565b6000819050919050565b6000612e0a8251612df4565b80915050919050565b600082821b905092915050565b6000612e2b826123b4565b82612e3584612de4565b9050612e4081612dfe565b92506020821015612e8057612e7b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612e13565b831692505b5050919050565b6000612e9282612204565b9150612e9d83612204565b9250828203905081811115612eb557612eb4612c49565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ef582612204565b9150612f0083612204565b925082612f1057612f0f612ebb565b5b828204905092915050565b6000612f2682612204565b9150612f3183612204565b9250828202612f3f81612204565b91508282048414831517612f5657612f55612c49565b5b5092915050565b6000612f6882612204565b9150612f7383612204565b9250828201905080821115612f8b57612f8a612c49565b5b92915050565b6000612f9c826122cc565b91507f80000000000000000000000000000000000000000000000000000000000000008203612fce57612fcd612c49565b5b816000039050919050565b600082825260208201905092915050565b7f5072696365466565643a20696e76616c69642070726963652066656564000000600082015250565b6000613020601d83612fd9565b915061302b82612fea565b602082019050919050565b6000602082019050818103600083015261304f81613013565b9050919050565b600069ffffffffffffffffffff82169050919050565b61307581613056565b811461308057600080fd5b50565b6000815190506130928161306c565b92915050565b6000602082840312156130ae576130ad61216c565b5b60006130bc84828501613083565b91505092915050565b6130ce816122cc565b81146130d957600080fd5b50565b6000815190506130eb816130c5565b92915050565b6000602082840312156131075761310661216c565b5b6000613115848285016130dc565b91505092915050565b7f5072696365466565643a20696e76616c69642070726963650000000000000000600082015250565b6000613154601883612fd9565b915061315f8261311e565b602082019050919050565b6000602082019050818103600083015261318381613147565b9050919050565b600061319582613056565b91506131a083613056565b9250828203905069ffffffffffffffffffff8111156131c2576131c1612c49565b5b92915050565b6131d181613056565b82525050565b60006020820190506131ec60008301846131c8565b92915050565b60008151905061320181612466565b92915050565b600080600080600060a086880312156132235761322261216c565b5b600061323188828901613083565b9550506020613242888289016130dc565b9450506040613253888289016131f2565b9350506060613264888289016131f2565b925050608061327588828901613083565b9150509295509295909350565b600061328d82613056565b915069ffffffffffffffffffff82036132a9576132a8612c49565b5b600182019050919050565b7f5072696365466565643a20636f756c64206e6f74206665746368207072696365600082015250565b60006132ea602083612fd9565b91506132f5826132b4565b602082019050919050565b60006020820190508181036000830152613319816132dd565b9050919050565b61332981612c78565b811461333457600080fd5b50565b60008151905061334681613320565b92915050565b6000602082840312156133625761336161216c565b5b600061337084828501613337565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156133d0578086048111156133ac576133ab612c49565b5b60018516156133bb5780820291505b80810290506133c985613379565b9450613390565b94509492505050565b6000826133e957600190506134a5565b816133f757600090506134a5565b816001811461340d576002811461341757613446565b60019150506134a5565b60ff84111561342957613428612c49565b5b8360020a9150848211156134405761343f612c49565b5b506134a5565b5060208310610133831016604e8410600b841016171561347b5782820a90508381111561347657613475612c49565b5b6134a5565b6134888484846001613386565b9250905081840481111561349f5761349e612c49565b5b81810290505b9392505050565b60006134b782612204565b91506134c283612204565b92506134ef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846133d9565b90509291505056fea26469706673582212208744dc554d8f9a14442cdb9fbc694ed23b8ff6ff0c497f25e36a8e9d855540cb64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e55760003560e01c8062056b95146100ea57806313a300131461011c5780634da4ef301461014c578063653d64b61461017c57806370801978146101ac57806371127e8a146101dc578063735a28851461020d5780637370cf1c1461023d57806379eba7091461026d57806389d797b91461029d5780638d094b1e146102cd578063b0a3961a146102fe578063bd11025d1461032e578063cf9410f11461035e578063d4f8ba011461038e578063daa39c53146103be578063dd22378d146103ef578063ec2c90161461040b575b600080fd5b61010460048036038101906100ff91906121ab565b610429565b60405161011393929190612368565b60405180910390f35b610136600480360381019061013191906121ab565b61072c565b6040516101439190612444565b60405180910390f35b610166600480360381019061016191906124ca565b610733565b6040516101739190612621565b60405180910390f35b61019660048036038101906101919190612643565b61077e565b6040516101a3919061279b565b60405180910390f35b6101c660048036038101906101c191906127e3565b61088d565b6040516101d39190612832565b60405180910390f35b6101f660048036038101906101f191906121ab565b610970565b60405161020492919061285c565b60405180910390f35b61022760048036038101906102229190612885565b6109cf565b60405161023491906128d8565b60405180910390f35b610257600480360381019061025291906128f3565b6109d8565b604051610264919061297d565b60405180910390f35b610287600480360381019061028291906121ab565b6109e3565b6040516102949190612a8e565b60405180910390f35b6102b760048036038101906102b29190612aaa565b610b94565b6040516102c4919061279b565b60405180910390f35b6102e760048036038101906102e291906127e3565b610ce2565b6040516102f5929190612b11565b60405180910390f35b61031860048036038101906103139190612b3c565b610f6a565b604051610325919061297d565b60405180910390f35b61034860048036038101906103439190612643565b61103c565b60405161035591906128d8565b60405180910390f35b610378600480360381019061037391906121ab565b611078565b604051610385919061297d565b60405180910390f35b6103a860048036038101906103a391906121ab565b61107f565b6040516103b591906128d8565b60405180910390f35b6103d860048036038101906103d391906127e3565b611086565b6040516103e692919061285c565b60405180910390f35b61040960048036038101906104049190612b69565b611161565b005b610413611166565b6040516104209190612444565b60405180910390f35b6060806060600c8081111561044157610440612bbc565b5b60ff1667ffffffffffffffff81111561045d5761045c612beb565b5b60405190808252806020026020018201604052801561048b5781602001602082028036833780820191505090505b50925060005b600c808111156104a4576104a3612bbc565b5b60ff168160ff161015610522576104b961116b565b60060160008661ffff1661ffff16815260200190815260200160002060008260ff1660ff16815260200190815260200160002054848260ff168151811061050357610502612c1a565b5b602002602001018181525050808061051a90612c85565b915050610491565b50600267ffffffffffffffff81111561053e5761053d612beb565b5b60405190808252806020026020018201604052801561056c5781602001602082028036833780820191505090505b50915061057761116b565b60080160008561ffff1661ffff1681526020019081526020016000206000600115151515815260200190815260200160002054826000815181106105be576105bd612c1a565b5b6020026020010181815250506105d261116b565b60080160008561ffff1661ffff168152602001908152602001600020600080151515158152602001908152602001600020548260018151811061061857610617612c1a565b5b602002602001018181525050600267ffffffffffffffff81111561063f5761063e612beb565b5b60405190808252806020026020018201604052801561066d5781602001602082028036833780820191505090505b50905061067861116b565b60070160008561ffff1661ffff1681526020019081526020016000206000600115151515815260200190815260200160002054816000815181106106bf576106be612c1a565b5b6020026020010181815250506106d361116b565b60070160008561ffff1661ffff168152602001908152602001600020600080151515158152602001908152602001600020548160018151811061071957610718612c1a565b5b6020026020010181815250509193909250565b6060919050565b6060600061073f611198565b905061077385858360010160006107568b896111c5565b81526020019081526020016000206111fa9092919063ffffffff16565b915050949350505050565b61078661207e565b6000610790611198565b90508060020160006107a286866111c5565b81526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff168152505091505092915050565b600080610898611198565b905060008160000160006108ad8760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541180610967575060008160000160006109168760006111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154115b91505092915050565b600080600061097d611198565b90508060020160006109908660016111c5565b8152602001908152602001600020600001548160020160006109b38760006111c5565b8152602001908152602001600020600001549250925050915091565b60009392505050565b600095945050505050565b6109eb6120e1565b6109f3611306565b60010160008361ffff1661ffff168152602001908152602001600020604051806101800160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900460ff161515151581526020016000820160039054906101000a900460ff161515151581526020016000820160049054906101000a900461ffff1661ffff1661ffff1681526020016000820160069054906101000a900461ffff1661ffff1661ffff1681526020016000820160089054906101000a900461ffff1661ffff1661ffff16815260200160008201600a9054906101000a900461ffff1661ffff1661ffff16815260200160008201600c9054906101000a900461ffff1661ffff1661ffff16815260200160008201600e9054906101000a900461ffff1661ffff1661ffff1681526020016000820160109054906101000a900461ffff1661ffff1661ffff1681526020016000820160129054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050919050565b610b9c61207e565b6000610ba6611198565b9050806000016000610bb888866111c5565b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff1681525050915050949350505050565b610cea61207e565b610cf261207e565b6000610cfc611198565b9050806000016000610d0f8760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509250806000016000610e418760006111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509150509250929050565b600080610f75611306565b60060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610fc282611333565b90506000805b8251811015611030576000838281518110610fe657610fe5612c1a565b5b6020026020010151905061100f81610fff836001611354565b61100a846000611354565b611377565b8361101a9190612cae565b925050808061102890612cf2565b915050610fc8565b50809350505050919050565b600080611047611198565b905061106f81600101600061105c87876111c5565b81526020019081526020016000206113ac565b91505092915050565b6000919050565b6000919050565b6000806000611093611198565b90508060000160006110a68760016111c5565b815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548160000160006111068860006111c5565b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015492509250509250929050565b505050565b606090565b6000807f8044e54adfaacc587fefea0831a427898a157664a4fc313bb47c3132ec6276ed90508091505090565b6000807f92bcfabaf0a890def3092675474357e5f93a0f117ca63a3db421d44c5b55fba590508091505090565b600081836040516020016111da929190612db8565b6040516020818303038152906040526111f290612e20565b905092915050565b60606000611207856113ac565b905080831115611215578092505b600084846112239190612e87565b67ffffffffffffffff81111561123c5761123b612beb565b5b60405190808252806020026020018201604052801561126a5781602001602082028036833780820191505090505b50905060008590505b848110156112f95761128e81886113c190919063ffffffff16565b82878361129b9190612e87565b815181106112ac576112ab612c1a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806112f190612cf2565b915050611273565b5080925050509392505050565b6000807f2eec39e2b6bcfb5f1ee2be0b6e9d5a470a45585b1e2f7f291af9fb9f551763d090508091505090565b60606000611343836000016113db565b905060608190508092505050919050565b6000806113618484611437565b905061136e8482856114f0565b91505092915050565b60008061138685856001611686565b905061139485846000611686565b8161139f9190612cae565b9050809150509392505050565b60006113ba826000016116e7565b9050919050565b60006113d083600001836116f8565b60001c905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561142b57602002820191906000526020600020905b815481526020019060010190808311611417575b50505050509050919050565b6000806114448484611723565b905060006114528585611723565b90506c0c9f2c9cd04674edea400000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61148d9190612eea565b8210156114c157806c0c9f2c9cd04674edea40000000836114ae9190612f1b565b6114b89190612eea565b925050506114ea565b806c0c9f2c9cd04674edea40000000836114db9190612eea565b6114e59190612f1b565b925050505b92915050565b6000806114fb611cb0565b60060160008661ffff1661ffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050600061153d611cb0565b60040160008761ffff1661ffff168152602001908152602001600020549050611564611cb0565b60010160000160089054906101000a900463ffffffff1663ffffffff168261158c9190612f5d565b4211806115c7575061159c611cb0565b60010160000160049054906101000a900463ffffffff1663ffffffff16826115c49190612f5d565b42115b806115d25750600081145b156115e157849250505061167f565b60008186116115fb5785826115f69190612e87565b611608565b81866116079190612e87565b5b905085612710826116199190612f1b565b6116239190612eea565b905061162e87611cdd565b801561165e575061163d611cb0565b60010160000160009054906101000a900463ffffffff1663ffffffff168111155b1561166e5781935050505061167f565b611679868387611d4a565b93505050505b9392505050565b60008061169b61169686856111c5565b611d7e565b905060008160000151036116b35760009150506116e0565b6000806116c08387611e7d565b91509150816116d857806116d390612f91565b6116da565b805b93505050505b9392505050565b600081600001805490509050919050565b60008260000182815481106117105761170f612c1a565b5b9060005260206000200154905092915050565b60008061172e611cb0565b60020160008561ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d390613036565b60405180910390fd5b6000806117e7611cb0565b60020160008761ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663668a0f026040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190613098565b905060005b61189f611cb0565b60010160000160109054906101000a900463ffffffff1663ffffffff168169ffffffffffffffffffff161015611b76578069ffffffffffffffffffff168269ffffffffffffffffffff161115611b76576000808269ffffffffffffffffffff1603611a0757600061190e611cb0565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b991906130f1565b9050600081136119fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f59061316a565b60405180910390fd5b80915050611b20565b6000611a11611cb0565b60020160008a61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6fc8f58486611a75919061318a565b6040518263ffffffff1660e01b8152600401611a9191906131d7565b60a060405180830381865afa158015611aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad29190613207565b50505091505060008113611b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b129061316a565b60405180910390fd5b809150505b60008403611b315780935050611b63565b868015611b3d57508381115b15611b4b5780935050611b63565b86158015611b5857508381105b15611b61578093505b505b8080611b6e90613282565b915050611897565b5060008211611bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb190613300565b60405180910390fd5b6000611bc4611cb0565b60020160008861ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6f919061334c565b60ff16905080600a611c8191906134ac565b6c0c9f2c9cd04674edea4000000084611c9a9190612f1b565b611ca49190612eea565b94505050505092915050565b6000807f215c1de8a6459dcf0789cdceef063745b34797042fd1550737c0f263affdef6490508091505090565b6000806000611ceb84611ea2565b9350935050508181118015611d2e5750611d03611cb0565b60050160008561ffff1661ffff168152602001908152602001600020548282611d2c9190612e87565b115b15611d3e57600092505050611d45565b6001925050505b919050565b600081611d6557828410611d5e5782611d60565b835b611d75565b828411611d725782611d74565b835b5b90509392505050565b611d8661207e565b611d8e611198565b60020160008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016005820160059054906101000a900461ffff1661ffff1661ffff1681526020016005820160079054906101000a900468ffffffffffffffffff1668ffffffffffffffffff1668ffffffffffffffffff16815250509050919050565b600080611e938385611fef90919063ffffffff16565b80925081935050509250929050565b6000806000806000611eb2611cb0565b60060160008761ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff16816020015163ffffffff16826040015163ffffffff16836060015163ffffffff169450945094509450509193509193565b6000806000838560800151116120145784608001518461200f9190612e87565b612025565b8385608001516120249190612e87565b5b90506000856080015182876000015161203e9190612f1b565b6120489190612eea565b905060008660a00151156120645786608001518611905061206e565b8587608001511190505b8082945094505050509250929050565b6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600015158152602001600063ffffffff168152602001600061ffff168152602001600068ffffffffffffffffff1681525090565b604051806101800160405280600015158152602001600015158152602001600015158152602001600015158152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600063ffffffff1681525090565b600080fd5b600061ffff82169050919050565b61218881612171565b811461219357600080fd5b50565b6000813590506121a58161217f565b92915050565b6000602082840312156121c1576121c061216c565b5b60006121cf84828501612196565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61221781612204565b82525050565b6000612229838361220e565b60208301905092915050565b6000602082019050919050565b600061224d826121d8565b61225781856121e3565b9350612262836121f4565b8060005b8381101561229357815161227a888261221d565b975061228583612235565b925050600181019050612266565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122df816122cc565b82525050565b60006122f183836122d6565b60208301905092915050565b6000602082019050919050565b6000612315826122a0565b61231f81856122ab565b935061232a836122bc565b8060005b8381101561235b57815161234288826122e5565b975061234d836122fd565b92505060018101905061232e565b5085935050505092915050565b600060608201905081810360008301526123828186612242565b90508181036020830152612396818561230a565b905081810360408301526123aa818461230a565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123ee5780820151818401526020810190506123d3565b60008484015250505050565b6000601f19601f8301169050919050565b6000612416826123b4565b61242081856123bf565b93506124308185602086016123d0565b612439816123fa565b840191505092915050565b6000602082019050818103600083015261245e818461240b565b905092915050565b61246f81612204565b811461247a57600080fd5b50565b60008135905061248c81612466565b92915050565b60008115159050919050565b6124a781612492565b81146124b257600080fd5b50565b6000813590506124c48161249e565b92915050565b600080600080608085870312156124e4576124e361216c565b5b60006124f287828801612196565b94505060206125038782880161247d565b93505060406125148782880161247d565b9250506060612525878288016124b5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125888261255d565b9050919050565b6125988161257d565b82525050565b60006125aa838361258f565b60208301905092915050565b6000602082019050919050565b60006125ce82612531565b6125d8818561253c565b93506125e38361254d565b8060005b838110156126145781516125fb888261259e565b9750612606836125b6565b9250506001810190506125e7565b5085935050505092915050565b6000602082019050818103600083015261263b81846125c3565b905092915050565b6000806040838503121561265a5761265961216c565b5b600061266885828601612196565b9250506020612679858286016124b5565b9150509250929050565b61268c81612492565b82525050565b600063ffffffff82169050919050565b6126ab81612692565b82525050565b6126ba81612171565b82525050565b600068ffffffffffffffffff82169050919050565b6126de816126c0565b82525050565b610120820160008201516126fb600085018261220e565b50602082015161270e602085018261220e565b50604082015161272160408501826122d6565b50606082015161273460608501826122d6565b506080820151612747608085018261220e565b5060a082015161275a60a0850182612683565b5060c082015161276d60c08501826126a2565b5060e082015161278060e08501826126b1565b506101008201516127956101008501826126d5565b50505050565b6000610120820190506127b160008301846126e4565b92915050565b6127c08161257d565b81146127cb57600080fd5b50565b6000813590506127dd816127b7565b92915050565b600080604083850312156127fa576127f961216c565b5b600061280885828601612196565b9250506020612819858286016127ce565b9150509250929050565b61282c81612492565b82525050565b60006020820190506128476000830184612823565b92915050565b61285681612204565b82525050565b6000604082019050612871600083018561284d565b61287e602083018461284d565b9392505050565b60008060006060848603121561289e5761289d61216c565b5b60006128ac868287016127ce565b93505060206128bd868287016127ce565b92505060406128ce868287016124b5565b9150509250925092565b60006020820190506128ed600083018461284d565b92915050565b600080600080600060a0868803121561290f5761290e61216c565b5b600061291d88828901612196565b955050602061292e888289016127ce565b945050604061293f8882890161247d565b93505060606129508882890161247d565b9250506080612961888289016124b5565b9150509295509295909350565b612977816122cc565b82525050565b6000602082019050612992600083018461296e565b92915050565b610180820160008201516129af6000850182612683565b5060208201516129c26020850182612683565b5060408201516129d56040850182612683565b5060608201516129e86060850182612683565b5060808201516129fb60808501826126b1565b5060a0820151612a0e60a08501826126b1565b5060c0820151612a2160c08501826126b1565b5060e0820151612a3460e08501826126b1565b50610100820151612a496101008501826126b1565b50610120820151612a5e6101208501826126b1565b50610140820151612a736101408501826126b1565b50610160820151612a886101608501826126a2565b50505050565b600061018082019050612aa46000830184612998565b92915050565b60008060008060808587031215612ac457612ac361216c565b5b6000612ad287828801612196565b9450506020612ae3878288016127ce565b9350506040612af48782880161247d565b9250506060612b05878288016124b5565b91505092959194509250565b600061024082019050612b2760008301856126e4565b612b356101208301846126e4565b9392505050565b600060208284031215612b5257612b5161216c565b5b6000612b60848285016127ce565b91505092915050565b600080600060608486031215612b8257612b8161216c565b5b6000612b9086828701612196565b9350506020612ba1868287016127ce565b9250506040612bb2868287016124b5565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000612c9082612c78565b915060ff8203612ca357612ca2612c49565b5b600182019050919050565b6000612cb9826122cc565b9150612cc4836122cc565b925082820190508281121560008312168382126000841215161715612cec57612ceb612c49565b5b92915050565b6000612cfd82612204565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d2f57612d2e612c49565b5b600182019050919050565b60008160f81b9050919050565b6000612d5282612d3a565b9050919050565b6000612d6482612d47565b9050919050565b612d7c612d7782612492565b612d59565b82525050565b60008160f01b9050919050565b6000612d9a82612d82565b9050919050565b612db2612dad82612171565b612d8f565b82525050565b6000612dc48285612d6b565b600182019150612dd48284612da1565b6002820191508190509392505050565b6000819050602082019050919050565b6000819050919050565b6000612e0a8251612df4565b80915050919050565b600082821b905092915050565b6000612e2b826123b4565b82612e3584612de4565b9050612e4081612dfe565b92506020821015612e8057612e7b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802612e13565b831692505b5050919050565b6000612e9282612204565b9150612e9d83612204565b9250828203905081811115612eb557612eb4612c49565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ef582612204565b9150612f0083612204565b925082612f1057612f0f612ebb565b5b828204905092915050565b6000612f2682612204565b9150612f3183612204565b9250828202612f3f81612204565b91508282048414831517612f5657612f55612c49565b5b5092915050565b6000612f6882612204565b9150612f7383612204565b9250828201905080821115612f8b57612f8a612c49565b5b92915050565b6000612f9c826122cc565b91507f80000000000000000000000000000000000000000000000000000000000000008203612fce57612fcd612c49565b5b816000039050919050565b600082825260208201905092915050565b7f5072696365466565643a20696e76616c69642070726963652066656564000000600082015250565b6000613020601d83612fd9565b915061302b82612fea565b602082019050919050565b6000602082019050818103600083015261304f81613013565b9050919050565b600069ffffffffffffffffffff82169050919050565b61307581613056565b811461308057600080fd5b50565b6000815190506130928161306c565b92915050565b6000602082840312156130ae576130ad61216c565b5b60006130bc84828501613083565b91505092915050565b6130ce816122cc565b81146130d957600080fd5b50565b6000815190506130eb816130c5565b92915050565b6000602082840312156131075761310661216c565b5b6000613115848285016130dc565b91505092915050565b7f5072696365466565643a20696e76616c69642070726963650000000000000000600082015250565b6000613154601883612fd9565b915061315f8261311e565b602082019050919050565b6000602082019050818103600083015261318381613147565b9050919050565b600061319582613056565b91506131a083613056565b9250828203905069ffffffffffffffffffff8111156131c2576131c1612c49565b5b92915050565b6131d181613056565b82525050565b60006020820190506131ec60008301846131c8565b92915050565b60008151905061320181612466565b92915050565b600080600080600060a086880312156132235761322261216c565b5b600061323188828901613083565b9550506020613242888289016130dc565b9450506040613253888289016131f2565b9350506060613264888289016131f2565b925050608061327588828901613083565b9150509295509295909350565b600061328d82613056565b915069ffffffffffffffffffff82036132a9576132a8612c49565b5b600182019050919050565b7f5072696365466565643a20636f756c64206e6f74206665746368207072696365600082015250565b60006132ea602083612fd9565b91506132f5826132b4565b602082019050919050565b60006020820190508181036000830152613319816132dd565b9050919050565b61332981612c78565b811461333457600080fd5b50565b60008151905061334681613320565b92915050565b6000602082840312156133625761336161216c565b5b600061337084828501613337565b91505092915050565b60008160011c9050919050565b6000808291508390505b60018511156133d0578086048111156133ac576133ab612c49565b5b60018516156133bb5780820291505b80810290506133c985613379565b9450613390565b94509492505050565b6000826133e957600190506134a5565b816133f757600090506134a5565b816001811461340d576002811461341757613446565b60019150506134a5565b60ff84111561342957613428612c49565b5b8360020a9150848211156134405761343f612c49565b5b506134a5565b5060208310610133831016604e8410600b841016171561347b5782820a90508381111561347657613475612c49565b5b6134a5565b6134888484846001613386565b9250905081840481111561349f5761349e612c49565b5b81810290505b9392505050565b60006134b782612204565b91506134c283612204565b92506134ef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846133d9565b90509291505056fea26469706673582212208744dc554d8f9a14442cdb9fbc694ed23b8ff6ff0c497f25e36a8e9d855540cb64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}