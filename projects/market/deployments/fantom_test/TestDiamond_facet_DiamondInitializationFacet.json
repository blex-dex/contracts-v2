{
  "address": "0x00BF8C1B8719e95F4C949fb1c3998289567b5c43",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "test",
          "type": "uint256"
        }
      ],
      "name": "Test",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x391209647f5855af4fb2281d61c3416dca0ac3b47ea33ffc3f3e6fe380a67952",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x653985cBA14eF0b751bf209fee39De78b4d21676",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "366127",
    "logsBloom": "0x
    "blockHash": "0x000061bd00000adb269c04068e123f9520f024802b75e42835287652a4b917ee",
    "transactionHash": "0x391209647f5855af4fb2281d61c3416dca0ac3b47ea33ffc3f3e6fe380a67952",
    "logs": [],
    "blockNumber": 25055346,
    "cumulativeGasUsed": "366127",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9d21a15dec77f014f2cf4a464d5e97af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"test\",\"type\":\"uint256\"}],\"name\":\"Test\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamondtest/facets/DiamondInitializationFacet.sol\":\"DiamondInitializationFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":1},\"remappings\":[]},\"sources\":{\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\n\\ncontract UsingDiamondOwner {\\n    modifier onlyOwner() {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Only owner is allowed to perform this action\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x610145c6957708608f3d2c2626dbf3461f2886b0b304c2bdc0c332df981b82f8\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"},\"src/diamondtest/base/ImportingDiamondConstants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.9;\\n\\ncontract ImportingDiamondConstants {\\n    uint256 internal constant TEST = 3;\\n}\\n\",\"keccak256\":\"0x56586ff55486f5b57f2fe435b69ac18d39451abcacc0873232a3f92ed1945775\",\"license\":\"AGPL-1.0\"},\"src/diamondtest/base/ImportingDiamondEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.9;\\n\\ncontract ImportingDiamondEvents {\\n    event Initialized();\\n    event Test(uint256 test);\\n}\\n\",\"keccak256\":\"0xfdefce1f709a67e74284ffcae96d83a681edfcfa0d473e3fe2fd753ececf1536\",\"license\":\"AGPL-1.0\"},\"src/diamondtest/base/ImportingDiamondTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.9;\\n\\ncontract ImportingDiamondTypes {\\n    struct TestData {\\n        uint64 test1;\\n        uint64 test2;\\n    }\\n}\\n\",\"keccak256\":\"0xf9c12fcd8755f57a556389f8102723313f1f15856f1184e96506767ad4c027ab\",\"license\":\"AGPL-1.0\"},\"src/diamondtest/base/UsingDiamondDataLayout.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ImportingDiamondTypes.sol\\\";\\n\\ncontract UsingDiamondDataLayout is ImportingDiamondTypes {\\n    bool internal _initialsed;\\n    mapping(uint256 => TestData) internal _data;\\n}\\n\",\"keccak256\":\"0x4224d1bc5ac5522111d79ba73723c3519fc6dd440a5a744d4c2fbb9cb4f50f58\",\"license\":\"AGPL-1.0\"},\"src/diamondtest/facets/DiamondInitializationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../base/ImportingDiamondConstants.sol\\\";\\nimport \\\"../base/ImportingDiamondEvents.sol\\\";\\nimport \\\"../base/UsingDiamondDataLayout.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/diamond/UsingDiamondOwner.sol\\\";\\n\\ncontract DiamondInitializationFacet is\\n    ImportingDiamondConstants,\\n    ImportingDiamondEvents,\\n    UsingDiamondOwner,\\n    UsingDiamondDataLayout\\n{\\n    // bytes32 internal immutable _param1AsBytes32;\\n\\n    struct Init {\\n        bytes32 param1AsBytes32;\\n    }\\n\\n    constructor() {\\n        // _param1AsBytes32 = init.param1AsBytes32;\\n    }\\n\\n    function init() external onlyOwner {\\n        if (!_initialsed) {\\n            emit Initialized();\\n            _initialsed = true;\\n        }\\n    }\\n\\n    function addMarket(bytes calldata data) external {\\n        (uint16 market, string memory name, address vault, address token) =\\n            abi.decode(data, (uint16, string, address, address));\\n        // MarketHandler.addMarket(market, name, vault, token);\\n        // MarketHandler.Storage().config[market] = config;\\n    }\\n}\\n\",\"keccak256\":\"0x7191a6c5b2d724a91b3a64f6437dd9fc2e52265e123e6645c0e491635af9cc4d\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b51b8de01461003b578063e1c7392a14610057575b600080fd5b61005560048036038101906100509190610226565b610061565b005b61005f610086565b005b6000806000808585810190610076919061044c565b9350935093509350505050505050565b6000610090610180565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011b90610552565b60405180910390fd5b60008054906101000a900460ff1661017d577f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a160016000806101000a81548160ff0219169083151502179055505b50565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101e6576101e56101c1565b5b8235905067ffffffffffffffff811115610203576102026101c6565b5b60208301915083600182028301111561021f5761021e6101cb565b5b9250929050565b6000806020838503121561023d5761023c6101b7565b5b600083013567ffffffffffffffff81111561025b5761025a6101bc565b5b610267858286016101d0565b92509250509250929050565b600061ffff82169050919050565b61028a81610273565b811461029557600080fd5b50565b6000813590506102a781610281565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102fb826102b2565b810181811067ffffffffffffffff8211171561031a576103196102c3565b5b80604052505050565b600061032d6101ad565b905061033982826102f2565b919050565b600067ffffffffffffffff821115610359576103586102c3565b5b610362826102b2565b9050602081019050919050565b82818337600083830152505050565b600061039161038c8461033e565b610323565b9050828152602081018484840111156103ad576103ac6102ad565b5b6103b884828561036f565b509392505050565b600082601f8301126103d5576103d46101c1565b5b81356103e584826020860161037e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610419826103ee565b9050919050565b6104298161040e565b811461043457600080fd5b50565b60008135905061044681610420565b92915050565b60008060008060808587031215610466576104656101b7565b5b600061047487828801610298565b945050602085013567ffffffffffffffff811115610495576104946101bc565b5b6104a1878288016103c0565b93505060406104b287828801610437565b92505060606104c387828801610437565b91505092959194509250565b600082825260208201905092915050565b7f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60008201527f207468697320616374696f6e0000000000000000000000000000000000000000602082015250565b600061053c602c836104cf565b9150610547826104e0565b604082019050919050565b6000602082019050818103600083015261056b8161052f565b905091905056fea264697066735822122020009b825d6d531ac40b518e136f4ab263e0723cc613ec1051fe8ae9ce5b806364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b51b8de01461003b578063e1c7392a14610057575b600080fd5b61005560048036038101906100509190610226565b610061565b005b61005f610086565b005b6000806000808585810190610076919061044c565b9350935093509350505050505050565b6000610090610180565b90508060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161011b90610552565b60405180910390fd5b60008054906101000a900460ff1661017d577f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c860405160405180910390a160016000806101000a81548160ff0219169083151502179055505b50565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126101e6576101e56101c1565b5b8235905067ffffffffffffffff811115610203576102026101c6565b5b60208301915083600182028301111561021f5761021e6101cb565b5b9250929050565b6000806020838503121561023d5761023c6101b7565b5b600083013567ffffffffffffffff81111561025b5761025a6101bc565b5b610267858286016101d0565b92509250509250929050565b600061ffff82169050919050565b61028a81610273565b811461029557600080fd5b50565b6000813590506102a781610281565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102fb826102b2565b810181811067ffffffffffffffff8211171561031a576103196102c3565b5b80604052505050565b600061032d6101ad565b905061033982826102f2565b919050565b600067ffffffffffffffff821115610359576103586102c3565b5b610362826102b2565b9050602081019050919050565b82818337600083830152505050565b600061039161038c8461033e565b610323565b9050828152602081018484840111156103ad576103ac6102ad565b5b6103b884828561036f565b509392505050565b600082601f8301126103d5576103d46101c1565b5b81356103e584826020860161037e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610419826103ee565b9050919050565b6104298161040e565b811461043457600080fd5b50565b60008135905061044681610420565b92915050565b60008060008060808587031215610466576104656101b7565b5b600061047487828801610298565b945050602085013567ffffffffffffffff811115610495576104946101bc565b5b6104a1878288016103c0565b93505060406104b287828801610437565b92505060606104c387828801610437565b91505092959194509250565b600082825260208201905092915050565b7f4f6e6c79206f776e657220697320616c6c6f77656420746f20706572666f726d60008201527f207468697320616374696f6e0000000000000000000000000000000000000000602082015250565b600061053c602c836104cf565b9150610547826104e0565b604082019050919050565b6000602082019050818103600083015261056b8161052f565b905091905056fea264697066735822122020009b825d6d531ac40b518e136f4ab263e0723cc613ec1051fe8ae9ce5b806364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 927,
        "contract": "src/diamondtest/facets/DiamondInitializationFacet.sol:DiamondInitializationFacet",
        "label": "_initialsed",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 932,
        "contract": "src/diamondtest/facets/DiamondInitializationFacet.sol:DiamondInitializationFacet",
        "label": "_data",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(TestData)919_storage)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(TestData)919_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingDiamondTypes.TestData)",
        "numberOfBytes": "32",
        "value": "t_struct(TestData)919_storage"
      },
      "t_struct(TestData)919_storage": {
        "encoding": "inplace",
        "label": "struct ImportingDiamondTypes.TestData",
        "members": [
          {
            "astId": 916,
            "contract": "src/diamondtest/facets/DiamondInitializationFacet.sol:DiamondInitializationFacet",
            "label": "test1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 918,
            "contract": "src/diamondtest/facets/DiamondInitializationFacet.sol:DiamondInitializationFacet",
            "label": "test2",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}